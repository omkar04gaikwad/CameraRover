



Has exactly what the file says
Used for personal refernce on things I need freq help with / deemed imp & unknown by me


************************NOTES************************************


FFMPEG NOTES 

-formats   print the list of supported file formats
-codecs    print the list of supported codecs (E=encode,D=decode)
-i         set the input file. Multiple -i switchs can be used
-f         set video format (for the input if before of -i, for output otherwise)
-an        ignore audio
-vn        ignore video
-ar        set audio rate (in Hz)
-ac        set the number of channels
-ab        set audio bitrate
-acodec    choose audio codec or use “copy” to bypass audio encoding
-vcodec    choose video codec or use “copy” to bypass video encoding
-r         video fps. You can also use fractional values like 30000/1001 instead of 29.97
-s         frame size (w x h, ie: 320x240)
-aspect    set the aspect ratio i.e: 4:3 or 16:9
-sameq     ffmpeg tries to keep the visual quality of the input
-t N       encode only N seconds of video (you can use also the hh:mm:ss.ddd format)
-croptop, -cropleft, -cropright, -cropbottom   crop input video frame on each side
-y         automatic overwrite of the output file
-ss        select the starting time in the source file
-vol       change the volume of the audio
-g         Gop size (distance between keyframes)
-b         Video bitrate
-bt        Video bitrate tolerance
-metadata  add a key=value metadata




SEMAPHORES AND MUTEXES 

A semaphore has a max size, current size. 
You wait ie you consume a semaphore on a semaphore ie the thread waiting on it will decrease it by 1 every iter.
If count == 0 it cant be decremented, so wait call will block current thread until count !> 0, done by another thread.
You signal a semaphore, you increase the current count, if count == 0 you wake up only one thread though many might depend on it , if size is full simply ignore / sometimes report error.

Note ****
http://effbot.org/zone/thread-synchronization.htm
 At any time, a lock can be held by a single thread, or by no thread at all. If a thread attempts to hold a lock that’s already held by some other thread, *execution of the first thread is halted until the lock is released*.
Serious issue threding issue, may have been causing the bugs.

The RLock class is a version of simple locking that only blocks if the lock is held by another thread, so I can access blocked codes of same thread with RLOCKS.

Depending on how the semaphore is initialized, this allows multiple threads to access the same code section simultaneously.

semaphore = threading.BoundedSemaphore()
semaphore.acquire() # decrements the counter
... access the shared resource
semaphore.release() # increments the counter

This means if acquiring thread semaphore == 0 the thread will be blocked aka stopped / paused , it wont run ... in the processor until semaphore val is !>0.
eg .. 
max_connections = 10
semaphore = threading.BoundedSemaphore(max_connections)
Can be used for limiting no of threads running in processor instead of adding sleep 

For proper operation, it’s important to release the lock even if something goes wrong when accessing the resource. You can use try-finally for this purpose:

lock.acquire()
try:
    ... access shared resource
finally:
    lock.release() # release lock, no matter what
    