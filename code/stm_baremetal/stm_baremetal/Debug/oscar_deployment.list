
oscar_deployment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800a328  0800a328  0001a328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  200001e0  0800a8d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001708  0800a8d0  00021708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b87  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000251a  00000000  00000000  00030d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00034050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c72  00000000  00000000  00034cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2ec  00000000  00000000  0004e942  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2411  00000000  00000000  0005bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe03f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  000fe0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a310 	.word	0x0800a310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a310 	.word	0x0800a310

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <longMotn>:

/*Tim3 ch4 LONGITUDINAL PWM*/
/*Tim4 ch3 LATERAL PWM*/

/* < 0 Motors backward , > 0 Motors Forward, mod(PercentPWM)<=100 */
void longMotn(int8_t PercentPWM ){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if(PercentPWM > 100 || PercentPWM < -100){
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	dc04      	bgt.n	8000fb4 <longMotn+0x1c>
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000fb2:	da01      	bge.n	8000fb8 <longMotn+0x20>
		Error_Handler();
 8000fb4:	f001 f91c 	bl	80021f0 <Error_Handler>
	}
	if(PercentPWM > 0){
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dd24      	ble.n	800100a <longMotn+0x72>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, ((float_t)PercentPWM*htim3.Init.Period)/(100.0F)); //update pwm value
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <longMotn+0xec>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fdc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001088 <longMotn+0xf0>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <longMotn+0xec>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fec:	ee17 2a90 	vmov	r2, s15
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(LONG_IP1_PORT, LONG_IP1_PIN, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <longMotn+0xf4>)
 8000ff8:	f001 ff1e 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LONG_IP2_PORT, LONG_IP2_PIN, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <longMotn+0xf4>)
 8001004:	f001 ff18 	bl	8002e38 <HAL_GPIO_WritePin>
    }
    else if(PercentPWM == 0){
        HAL_GPIO_WritePin(LONG_IP1_PORT, LONG_IP1_PIN, RESET);
		HAL_GPIO_WritePin(LONG_IP2_PORT, LONG_IP2_PIN, RESET);
    }
}
 8001008:	e038      	b.n	800107c <longMotn+0xe4>
    else if(PercentPWM < 0){
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	da25      	bge.n	800105e <longMotn+0xc6>
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, ((float_t)(-PercentPWM)*htim3.Init.Period)/(100.0F)); //update pwm value
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	425b      	negs	r3, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <longMotn+0xec>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001030:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001088 <longMotn+0xf0>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <longMotn+0xec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001040:	ee17 2a90 	vmov	r2, s15
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(LONG_IP1_PORT, LONG_IP1_PIN, RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2102      	movs	r1, #2
 800104a:	4810      	ldr	r0, [pc, #64]	; (800108c <longMotn+0xf4>)
 800104c:	f001 fef4 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LONG_IP2_PORT, LONG_IP2_PIN, SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <longMotn+0xf4>)
 8001058:	f001 feee 	bl	8002e38 <HAL_GPIO_WritePin>
}
 800105c:	e00e      	b.n	800107c <longMotn+0xe4>
    else if(PercentPWM == 0){
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <longMotn+0xe4>
        HAL_GPIO_WritePin(LONG_IP1_PORT, LONG_IP1_PIN, RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <longMotn+0xf4>)
 800106c:	f001 fee4 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LONG_IP2_PORT, LONG_IP2_PIN, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <longMotn+0xf4>)
 8001078:	f001 fede 	bl	8002e38 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000144c 	.word	0x2000144c
 8001088:	42c80000 	.word	0x42c80000
 800108c:	40020400 	.word	0x40020400

08001090 <lateralMotn>:
/*<0 motor steer Left , > 0 motor steer Right, mod(PercentPWM)<=100 */
void lateralMotn(int8_t PercentPWM ){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	if(PercentPWM > 100 || PercentPWM < -100){
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	dc04      	bgt.n	80010ac <lateralMotn+0x1c>
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80010aa:	da01      	bge.n	80010b0 <lateralMotn+0x20>
		Error_Handler();
 80010ac:	f001 f8a0 	bl	80021f0 <Error_Handler>
	}
	if(PercentPWM > 0){
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd25      	ble.n	8001104 <lateralMotn+0x74>
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, ((float_t)PercentPWM*htim3.Init.Period)/(100.0F)); //update pwm value
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <lateralMotn+0xf4>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001188 <lateralMotn+0xf8>
 80010d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <lateralMotn+0xfc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(LAT_IP1_PORT, LAT_IP1_PIN, SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f0:	4827      	ldr	r0, [pc, #156]	; (8001190 <lateralMotn+0x100>)
 80010f2:	f001 fea1 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LAT_IP2_PORT, LAT_IP2_PIN, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4824      	ldr	r0, [pc, #144]	; (8001190 <lateralMotn+0x100>)
 80010fe:	f001 fe9b 	bl	8002e38 <HAL_GPIO_WritePin>
    }
    else if(PercentPWM == 0){
        HAL_GPIO_WritePin(LAT_IP1_PORT, LAT_IP1_PIN, RESET);
		HAL_GPIO_WritePin(LAT_IP2_PORT, LAT_IP2_PIN, RESET);
    }
}
 8001102:	e03a      	b.n	800117a <lateralMotn+0xea>
    else if(PercentPWM < 0){
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da26      	bge.n	800115a <lateralMotn+0xca>
        __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, ((float_t)(-PercentPWM)*htim3.Init.Period)/(100.0F)); //update pwm value
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	425b      	negs	r3, r3
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <lateralMotn+0xf4>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001188 <lateralMotn+0xf8>
 800112e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <lateralMotn+0xfc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113a:	ee17 2a90 	vmov	r2, s15
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(LAT_IP1_PORT, LAT_IP1_PIN, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <lateralMotn+0x100>)
 8001148:	f001 fe76 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LAT_IP2_PORT, LAT_IP2_PIN, SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <lateralMotn+0x100>)
 8001154:	f001 fe70 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8001158:	e00f      	b.n	800117a <lateralMotn+0xea>
    else if(PercentPWM == 0){
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10b      	bne.n	800117a <lateralMotn+0xea>
        HAL_GPIO_WritePin(LAT_IP1_PORT, LAT_IP1_PIN, RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <lateralMotn+0x100>)
 800116a:	f001 fe65 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LAT_IP2_PORT, LAT_IP2_PIN, RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <lateralMotn+0x100>)
 8001176:	f001 fe5f 	bl	8002e38 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000144c 	.word	0x2000144c
 8001188:	42c80000 	.word	0x42c80000
 800118c:	200011d8 	.word	0x200011d8
 8001190:	40020400 	.word	0x40020400

08001194 <parseData>:
/* External variables --------------------------------------------------------*/
/* USER CODE BEGIN EV */
/* USER CODE END EV */


void parseData(byte * parseMsg){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  saveptr1 = NULL;  
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <parseData+0x5c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
  saveptr2 = NULL; 
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <parseData+0x60>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
  int frameIndex = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  byte* frameToken = strtok_r(parseMsg,(byte *)semicolonDelim,&saveptr1);
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <parseData+0x5c>)
 80011ae:	4912      	ldr	r1, [pc, #72]	; (80011f8 <parseData+0x64>)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f006 fb77 	bl	80078a4 <strtok_r>
 80011b6:	60b8      	str	r0, [r7, #8]
    
  parseCoeffs(frameToken,frameIndex);
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f000 f81e 	bl	80011fc <parseCoeffs>
  while (frameToken != NULL){
 80011c0:	e00f      	b.n	80011e2 <parseData+0x4e>
    ++frameIndex;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
	  frameToken = strtok_r(NULL, (byte *)semicolonDelim,&saveptr1);
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <parseData+0x5c>)
 80011ca:	490b      	ldr	r1, [pc, #44]	; (80011f8 <parseData+0x64>)
 80011cc:	2000      	movs	r0, #0
 80011ce:	f006 fb69 	bl	80078a4 <strtok_r>
 80011d2:	60b8      	str	r0, [r7, #8]
    if(frameToken!=NULL){
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <parseData+0x4e>
      parseCoeffs(frameToken,frameIndex);
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	68b8      	ldr	r0, [r7, #8]
 80011de:	f000 f80d 	bl	80011fc <parseCoeffs>
  while (frameToken != NULL){
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1ec      	bne.n	80011c2 <parseData+0x2e>
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200001fc 	.word	0x200001fc
 80011f4:	20000200 	.word	0x20000200
 80011f8:	0800a34c 	.word	0x0800a34c

080011fc <parseCoeffs>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseCoeffs(byte * frameMsg, int index){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  byte * coeffsToken = strtok_r(frameMsg,(byte*) delimiter, &saveptr2);
 8001206:	4ab0      	ldr	r2, [pc, #704]	; (80014c8 <parseCoeffs+0x2cc>)
 8001208:	49b0      	ldr	r1, [pc, #704]	; (80014cc <parseCoeffs+0x2d0>)
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f006 fb4a 	bl	80078a4 <strtok_r>
 8001210:	60f8      	str	r0, [r7, #12]

  area.curves[index].d = atof(coeffsToken);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f004 fe29 	bl	8005e6a <atof>
 8001218:	ec54 3b10 	vmov	r3, r4, d0
 800121c:	4618      	mov	r0, r3
 800121e:	4621      	mov	r1, r4
 8001220:	f7ff fcea 	bl	8000bf8 <__aeabi_d2f>
 8001224:	4601      	mov	r1, r0
 8001226:	4aaa      	ldr	r2, [pc, #680]	; (80014d0 <parseCoeffs+0x2d4>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001230:	4aa5      	ldr	r2, [pc, #660]	; (80014c8 <parseCoeffs+0x2cc>)
 8001232:	49a6      	ldr	r1, [pc, #664]	; (80014cc <parseCoeffs+0x2d0>)
 8001234:	2000      	movs	r0, #0
 8001236:	f006 fb35 	bl	80078a4 <strtok_r>
 800123a:	60f8      	str	r0, [r7, #12]
  area.curves[index].c = atof(coeffsToken);
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f004 fe14 	bl	8005e6a <atof>
 8001242:	ec54 3b10 	vmov	r3, r4, d0
 8001246:	4618      	mov	r0, r3
 8001248:	4621      	mov	r1, r4
 800124a:	f7ff fcd5 	bl	8000bf8 <__aeabi_d2f>
 800124e:	4601      	mov	r1, r0
 8001250:	4a9f      	ldr	r2, [pc, #636]	; (80014d0 <parseCoeffs+0x2d4>)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	3304      	adds	r3, #4
 800125a:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800125c:	4a9a      	ldr	r2, [pc, #616]	; (80014c8 <parseCoeffs+0x2cc>)
 800125e:	499b      	ldr	r1, [pc, #620]	; (80014cc <parseCoeffs+0x2d0>)
 8001260:	2000      	movs	r0, #0
 8001262:	f006 fb1f 	bl	80078a4 <strtok_r>
 8001266:	60f8      	str	r0, [r7, #12]
  area.curves[index].b = atof(coeffsToken);
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f004 fdfe 	bl	8005e6a <atof>
 800126e:	ec54 3b10 	vmov	r3, r4, d0
 8001272:	4618      	mov	r0, r3
 8001274:	4621      	mov	r1, r4
 8001276:	f7ff fcbf 	bl	8000bf8 <__aeabi_d2f>
 800127a:	4601      	mov	r1, r0
 800127c:	4a94      	ldr	r2, [pc, #592]	; (80014d0 <parseCoeffs+0x2d4>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	3308      	adds	r3, #8
 8001286:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001288:	4a8f      	ldr	r2, [pc, #572]	; (80014c8 <parseCoeffs+0x2cc>)
 800128a:	4990      	ldr	r1, [pc, #576]	; (80014cc <parseCoeffs+0x2d0>)
 800128c:	2000      	movs	r0, #0
 800128e:	f006 fb09 	bl	80078a4 <strtok_r>
 8001292:	60f8      	str	r0, [r7, #12]
  area.curves[index].a = atof(coeffsToken);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f004 fde8 	bl	8005e6a <atof>
 800129a:	ec54 3b10 	vmov	r3, r4, d0
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fca9 	bl	8000bf8 <__aeabi_d2f>
 80012a6:	4601      	mov	r1, r0
 80012a8:	4a89      	ldr	r2, [pc, #548]	; (80014d0 <parseCoeffs+0x2d4>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	330c      	adds	r3, #12
 80012b2:	6019      	str	r1, [r3, #0]
  
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80012b4:	4a84      	ldr	r2, [pc, #528]	; (80014c8 <parseCoeffs+0x2cc>)
 80012b6:	4985      	ldr	r1, [pc, #532]	; (80014cc <parseCoeffs+0x2d0>)
 80012b8:	2000      	movs	r0, #0
 80012ba:	f006 faf3 	bl	80078a4 <strtok_r>
 80012be:	60f8      	str	r0, [r7, #12]
  roll.curves[index].d = atof(coeffsToken);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f004 fdd2 	bl	8005e6a <atof>
 80012c6:	ec54 3b10 	vmov	r3, r4, d0
 80012ca:	4618      	mov	r0, r3
 80012cc:	4621      	mov	r1, r4
 80012ce:	f7ff fc93 	bl	8000bf8 <__aeabi_d2f>
 80012d2:	4601      	mov	r1, r0
 80012d4:	4a7f      	ldr	r2, [pc, #508]	; (80014d4 <parseCoeffs+0x2d8>)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <parseCoeffs+0x2cc>)
 80012e0:	497a      	ldr	r1, [pc, #488]	; (80014cc <parseCoeffs+0x2d0>)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f006 fade 	bl	80078a4 <strtok_r>
 80012e8:	60f8      	str	r0, [r7, #12]
  roll.curves[index].c = atof(coeffsToken);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f004 fdbd 	bl	8005e6a <atof>
 80012f0:	ec54 3b10 	vmov	r3, r4, d0
 80012f4:	4618      	mov	r0, r3
 80012f6:	4621      	mov	r1, r4
 80012f8:	f7ff fc7e 	bl	8000bf8 <__aeabi_d2f>
 80012fc:	4601      	mov	r1, r0
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <parseCoeffs+0x2d8>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <parseCoeffs+0x2cc>)
 800130c:	496f      	ldr	r1, [pc, #444]	; (80014cc <parseCoeffs+0x2d0>)
 800130e:	2000      	movs	r0, #0
 8001310:	f006 fac8 	bl	80078a4 <strtok_r>
 8001314:	60f8      	str	r0, [r7, #12]
  roll.curves[index].b = atof(coeffsToken);
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f004 fda7 	bl	8005e6a <atof>
 800131c:	ec54 3b10 	vmov	r3, r4, d0
 8001320:	4618      	mov	r0, r3
 8001322:	4621      	mov	r1, r4
 8001324:	f7ff fc68 	bl	8000bf8 <__aeabi_d2f>
 8001328:	4601      	mov	r1, r0
 800132a:	4a6a      	ldr	r2, [pc, #424]	; (80014d4 <parseCoeffs+0x2d8>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	3308      	adds	r3, #8
 8001334:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001336:	4a64      	ldr	r2, [pc, #400]	; (80014c8 <parseCoeffs+0x2cc>)
 8001338:	4964      	ldr	r1, [pc, #400]	; (80014cc <parseCoeffs+0x2d0>)
 800133a:	2000      	movs	r0, #0
 800133c:	f006 fab2 	bl	80078a4 <strtok_r>
 8001340:	60f8      	str	r0, [r7, #12]
  roll.curves[index].a = atof(coeffsToken);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f004 fd91 	bl	8005e6a <atof>
 8001348:	ec54 3b10 	vmov	r3, r4, d0
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc52 	bl	8000bf8 <__aeabi_d2f>
 8001354:	4601      	mov	r1, r0
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <parseCoeffs+0x2d8>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	330c      	adds	r3, #12
 8001360:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001362:	4a59      	ldr	r2, [pc, #356]	; (80014c8 <parseCoeffs+0x2cc>)
 8001364:	4959      	ldr	r1, [pc, #356]	; (80014cc <parseCoeffs+0x2d0>)
 8001366:	2000      	movs	r0, #0
 8001368:	f006 fa9c 	bl	80078a4 <strtok_r>
 800136c:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].d = atof(coeffsToken);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f004 fd7b 	bl	8005e6a <atof>
 8001374:	ec54 3b10 	vmov	r3, r4, d0
 8001378:	4618      	mov	r0, r3
 800137a:	4621      	mov	r1, r4
 800137c:	f7ff fc3c 	bl	8000bf8 <__aeabi_d2f>
 8001380:	4601      	mov	r1, r0
 8001382:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <parseCoeffs+0x2dc>)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <parseCoeffs+0x2cc>)
 800138e:	494f      	ldr	r1, [pc, #316]	; (80014cc <parseCoeffs+0x2d0>)
 8001390:	2000      	movs	r0, #0
 8001392:	f006 fa87 	bl	80078a4 <strtok_r>
 8001396:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].c = atof(coeffsToken);
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f004 fd66 	bl	8005e6a <atof>
 800139e:	ec54 3b10 	vmov	r3, r4, d0
 80013a2:	4618      	mov	r0, r3
 80013a4:	4621      	mov	r1, r4
 80013a6:	f7ff fc27 	bl	8000bf8 <__aeabi_d2f>
 80013aa:	4601      	mov	r1, r0
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <parseCoeffs+0x2dc>)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	3304      	adds	r3, #4
 80013b6:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80013b8:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <parseCoeffs+0x2cc>)
 80013ba:	4944      	ldr	r1, [pc, #272]	; (80014cc <parseCoeffs+0x2d0>)
 80013bc:	2000      	movs	r0, #0
 80013be:	f006 fa71 	bl	80078a4 <strtok_r>
 80013c2:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].b = atof(coeffsToken);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f004 fd50 	bl	8005e6a <atof>
 80013ca:	ec54 3b10 	vmov	r3, r4, d0
 80013ce:	4618      	mov	r0, r3
 80013d0:	4621      	mov	r1, r4
 80013d2:	f7ff fc11 	bl	8000bf8 <__aeabi_d2f>
 80013d6:	4601      	mov	r1, r0
 80013d8:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <parseCoeffs+0x2dc>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	3308      	adds	r3, #8
 80013e2:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80013e4:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <parseCoeffs+0x2cc>)
 80013e6:	4939      	ldr	r1, [pc, #228]	; (80014cc <parseCoeffs+0x2d0>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f006 fa5b 	bl	80078a4 <strtok_r>
 80013ee:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].a = atof(coeffsToken);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f004 fd3a 	bl	8005e6a <atof>
 80013f6:	ec54 3b10 	vmov	r3, r4, d0
 80013fa:	4618      	mov	r0, r3
 80013fc:	4621      	mov	r1, r4
 80013fe:	f7ff fbfb 	bl	8000bf8 <__aeabi_d2f>
 8001402:	4601      	mov	r1, r0
 8001404:	4a34      	ldr	r2, [pc, #208]	; (80014d8 <parseCoeffs+0x2dc>)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4413      	add	r3, r2
 800140c:	330c      	adds	r3, #12
 800140e:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <parseCoeffs+0x2cc>)
 8001412:	492e      	ldr	r1, [pc, #184]	; (80014cc <parseCoeffs+0x2d0>)
 8001414:	2000      	movs	r0, #0
 8001416:	f006 fa45 	bl	80078a4 <strtok_r>
 800141a:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].d = atof(coeffsToken);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f004 fd24 	bl	8005e6a <atof>
 8001422:	ec54 3b10 	vmov	r3, r4, d0
 8001426:	4618      	mov	r0, r3
 8001428:	4621      	mov	r1, r4
 800142a:	f7ff fbe5 	bl	8000bf8 <__aeabi_d2f>
 800142e:	4601      	mov	r1, r0
 8001430:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <parseCoeffs+0x2e0>)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <parseCoeffs+0x2cc>)
 800143c:	4923      	ldr	r1, [pc, #140]	; (80014cc <parseCoeffs+0x2d0>)
 800143e:	2000      	movs	r0, #0
 8001440:	f006 fa30 	bl	80078a4 <strtok_r>
 8001444:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].c = atof(coeffsToken);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f004 fd0f 	bl	8005e6a <atof>
 800144c:	ec54 3b10 	vmov	r3, r4, d0
 8001450:	4618      	mov	r0, r3
 8001452:	4621      	mov	r1, r4
 8001454:	f7ff fbd0 	bl	8000bf8 <__aeabi_d2f>
 8001458:	4601      	mov	r1, r0
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <parseCoeffs+0x2e0>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	3304      	adds	r3, #4
 8001464:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <parseCoeffs+0x2cc>)
 8001468:	4918      	ldr	r1, [pc, #96]	; (80014cc <parseCoeffs+0x2d0>)
 800146a:	2000      	movs	r0, #0
 800146c:	f006 fa1a 	bl	80078a4 <strtok_r>
 8001470:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].b = atof(coeffsToken);
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f004 fcf9 	bl	8005e6a <atof>
 8001478:	ec54 3b10 	vmov	r3, r4, d0
 800147c:	4618      	mov	r0, r3
 800147e:	4621      	mov	r1, r4
 8001480:	f7ff fbba 	bl	8000bf8 <__aeabi_d2f>
 8001484:	4601      	mov	r1, r0
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <parseCoeffs+0x2e0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	3308      	adds	r3, #8
 8001490:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001492:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <parseCoeffs+0x2cc>)
 8001494:	490d      	ldr	r1, [pc, #52]	; (80014cc <parseCoeffs+0x2d0>)
 8001496:	2000      	movs	r0, #0
 8001498:	f006 fa04 	bl	80078a4 <strtok_r>
 800149c:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].a = atof(coeffsToken);
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f004 fce3 	bl	8005e6a <atof>
 80014a4:	ec54 3b10 	vmov	r3, r4, d0
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	f7ff fba4 	bl	8000bf8 <__aeabi_d2f>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <parseCoeffs+0x2e0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	330c      	adds	r3, #12
 80014bc:	6019      	str	r1, [r3, #0]

}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000200 	.word	0x20000200
 80014cc:	0800a348 	.word	0x0800a348
 80014d0:	20000530 	.word	0x20000530
 80014d4:	20000440 	.word	0x20000440
 80014d8:	20000350 	.word	0x20000350
 80014dc:	20000260 	.word	0x20000260

080014e0 <crc_accumulate>:
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
#ifndef HAVE_CRC_ACCUMULATE
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4053      	eors	r3, r2
 80014f6:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4053      	eors	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b29b      	uxth	r3, r3
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21b      	sxth	r3, r3
 8001518:	4053      	eors	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	b21b      	sxth	r3, r3
 8001522:	4053      	eors	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	4053      	eors	r3, r2
 8001530:	b21b      	sxth	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	801a      	strh	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	801a      	strh	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800156c:	f107 030e 	add.w	r3, r7, #14
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ffe7 	bl	8001544 <crc_init>
	while (length--) {
 8001576:	e009      	b.n	800158c <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f107 020e 	add.w	r2, r7, #14
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ffaa 	bl	80014e0 <crc_accumulate>
	while (length--) {
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	807a      	strh	r2, [r7, #2]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <crc_calculate+0x18>
        }
        return crcTmp;
 8001596:	89fb      	ldrh	r3, [r7, #14]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <mavlink_get_channel_status>:

/*
  internal function to give access to the channel status for each channel
 */
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <mavlink_get_channel_status+0x24>)
 80015b6:	4413      	add	r3, r2
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000218 	.word	0x20000218

080015c8 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	70fb      	strb	r3, [r7, #3]
 80015da:	460b      	mov	r3, r1
 80015dc:	70bb      	strb	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	uint16_t checksum;
	msg->magic = MAVLINK_STX;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	22fe      	movs	r2, #254	; 0xfe
 80015e6:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ee:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	78ba      	ldrb	r2, [r7, #2]
 80015fa:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffce 	bl	80015a0 <mavlink_get_channel_status>
 8001604:	4603      	mov	r3, r0
 8001606:	799a      	ldrb	r2, [r3, #6]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ffc6 	bl	80015a0 <mavlink_get_channel_status>
 8001614:	4603      	mov	r3, r0
 8001616:	799c      	ldrb	r4, [r3, #6]
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ffc0 	bl	80015a0 <mavlink_get_channel_status>
 8001620:	4603      	mov	r3, r0
 8001622:	1c62      	adds	r2, r4, #1
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((uint8_t*)&msg->len, length + MAVLINK_CORE_HEADER_LEN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1cda      	adds	r2, r3, #3
 800162c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001630:	b29b      	uxth	r3, r3
 8001632:	3305      	adds	r3, #5
 8001634:	b29b      	uxth	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	4610      	mov	r0, r2
 800163a:	f7ff ff91 	bl	8001560 <crc_calculate>
 800163e:	4603      	mov	r3, r0
 8001640:	81fb      	strh	r3, [r7, #14]
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
 8001642:	f107 020e 	add.w	r2, r7, #14
 8001646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff47 	bl	80014e0 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001652:	89f9      	ldrh	r1, [r7, #14]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3308      	adds	r3, #8
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	78d2      	ldrb	r2, [r2, #3]
 800165c:	4413      	add	r3, r2
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b299      	uxth	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0208 	add.w	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	3301      	adds	r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 800167a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3308      	adds	r3, #8
 8001682:	b29b      	uxth	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}

0800168c <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	70fb      	strb	r3, [r7, #3]
 800169e:	460b      	mov	r3, r1
 80016a0:	70bb      	strb	r3, [r7, #2]
 80016a2:	4613      	mov	r3, r2
 80016a4:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 80016a6:	78ba      	ldrb	r2, [r7, #2]
 80016a8:	78f9      	ldrb	r1, [r7, #3]
 80016aa:	7c3b      	ldrb	r3, [r7, #16]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	787b      	ldrb	r3, [r7, #1]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff87 	bl	80015c8 <mavlink_finalize_message_chan>
 80016ba:	4603      	mov	r3, r0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	1c99      	adds	r1, r3, #2
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	3308      	adds	r3, #8
 80016d8:	461a      	mov	r2, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f004 fbf2 	bl	8005ec4 <memcpy>
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	78db      	ldrb	r3, [r3, #3]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3308      	adds	r3, #8
 80016e8:	b29b      	uxth	r3, r3
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <mavlink_msg_command_long_pack>:
 * @param param7 Parameter 7, as defined by MAV_CMD enum.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b096      	sub	sp, #88	; 0x58
 80016f6:	af02      	add	r7, sp, #8
 80016f8:	623a      	str	r2, [r7, #32]
 80016fa:	461a      	mov	r2, r3
 80016fc:	ed87 0a07 	vstr	s0, [r7, #28]
 8001700:	edc7 0a06 	vstr	s1, [r7, #24]
 8001704:	ed87 1a05 	vstr	s2, [r7, #20]
 8001708:	edc7 1a04 	vstr	s3, [r7, #16]
 800170c:	ed87 2a03 	vstr	s4, [r7, #12]
 8001710:	edc7 2a02 	vstr	s5, [r7, #8]
 8001714:	ed87 3a01 	vstr	s6, [r7, #4]
 8001718:	4603      	mov	r3, r0
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	460b      	mov	r3, r1
 8001720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001724:	4613      	mov	r3, r2
 8001726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	_mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, 33);
#else
	mavlink_command_long_t packet;
	packet.param1 = param1;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet.param2 = param2;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
	packet.param3 = param3;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
	packet.param4 = param4;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
	packet.param5 = param5;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
	packet.param6 = param6;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	643b      	str	r3, [r7, #64]	; 0x40
	packet.param7 = param7;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
	packet.command = command;
 8001746:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800174a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	packet.target_system = target_system;
 800174e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001752:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	packet.target_component = target_component;
 8001756:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800175a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	packet.confirmation = confirmation;
 800175e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001762:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, 33);
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	3308      	adds	r3, #8
 800176a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800176e:	2221      	movs	r2, #33	; 0x21
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fba7 	bl	8005ec4 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	224c      	movs	r2, #76	; 0x4c
 800177a:	71da      	strb	r2, [r3, #7]
	return mavlink_finalize_message(msg, system_id, component_id, 33, 152);
 800177c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001780:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001784:	2398      	movs	r3, #152	; 0x98
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2321      	movs	r3, #33	; 0x21
 800178a:	6a38      	ldr	r0, [r7, #32]
 800178c:	f7ff ff7e 	bl	800168c <mavlink_finalize_message>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <setAngles>:
        
  }



  void setAngles(float roll, float pitch, float yaw){
 800179c:	b580      	push	{r7, lr}
 800179e:	b0a4      	sub	sp, #144	; 0x90
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80017a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80017aa:	ed87 1a01 	vstr	s2, [r7, #4]
    
    mavlink_message_t msg;
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    mavlink_msg_command_long_pack(255, 1, &msg, 71, 67, 205, 0, pitch, roll, yaw, 0.0, 0.0, 0.0, 0.0);
 80017ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017b2:	2300      	movs	r3, #0
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	23cd      	movs	r3, #205	; 0xcd
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2343      	movs	r3, #67	; 0x43
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	ed9f 3a15 	vldr	s6, [pc, #84]	; 8001814 <setAngles+0x78>
 80017c2:	eddf 2a14 	vldr	s5, [pc, #80]	; 8001814 <setAngles+0x78>
 80017c6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8001814 <setAngles+0x78>
 80017ca:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001814 <setAngles+0x78>
 80017ce:	ed97 1a01 	vldr	s2, [r7, #4]
 80017d2:	edd7 0a03 	vldr	s1, [r7, #12]
 80017d6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017da:	2347      	movs	r3, #71	; 0x47
 80017dc:	2101      	movs	r1, #1
 80017de:	20ff      	movs	r0, #255	; 0xff
 80017e0:	f7ff ff87 	bl	80016f2 <mavlink_msg_command_long_pack>
    uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 80017e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff68 	bl	80016c4 <mavlink_msg_to_send_buffer>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    HAL_UART_Transmit(&uart_gimbal, (uint8_t*)buf, len, 100);
 80017fa:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <setAngles+0x7c>)
 8001806:	f002 fba2 	bl	8003f4e <HAL_UART_Transmit>
      
  }
 800180a:	bf00      	nop
 800180c:	3780      	adds	r7, #128	; 0x80
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	00000000 	.word	0x00000000
 8001818:	2000148c 	.word	0x2000148c

0800181c <init_gimbal>:
    
  }

#endif

void init_gimbal(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  setAngles(3, -30, 20);
 8001820:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001824:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 8001828:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800182c:	f7ff ffb6 	bl	800179c <setAngles>
  HAL_Delay(1000); // MS
 8001830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001834:	f001 f828 	bl	8002888 <HAL_Delay>
  setAngles(0, 0, 0);
 8001838:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800187c <init_gimbal+0x60>
 800183c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800187c <init_gimbal+0x60>
 8001840:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800187c <init_gimbal+0x60>
 8001844:	f7ff ffaa 	bl	800179c <setAngles>
  HAL_Delay(1000); // MS
 8001848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184c:	f001 f81c 	bl	8002888 <HAL_Delay>
  setAngles(-3, 30, -20);
 8001850:	eebb 1a04 	vmov.f32	s2, #180	; 0xc1a00000 -20.0
 8001854:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001858:	eeb8 0a08 	vmov.f32	s0, #136	; 0xc0400000 -3.0
 800185c:	f7ff ff9e 	bl	800179c <setAngles>
  HAL_Delay(1000); // MS
 8001860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001864:	f001 f810 	bl	8002888 <HAL_Delay>
  setAngles(0, 0, 0);
 8001868:	ed9f 1a04 	vldr	s2, [pc, #16]	; 800187c <init_gimbal+0x60>
 800186c:	eddf 0a03 	vldr	s1, [pc, #12]	; 800187c <init_gimbal+0x60>
 8001870:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800187c <init_gimbal+0x60>
 8001874:	f7ff ff92 	bl	800179c <setAngles>
  
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	00000000 	.word	0x00000000

08001880 <getFiringTime>:

void getFiringTime(void){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  //no_of_fires & MAX_HYPERFRAME_TIME
  firingTime = (MAX_FIRES % no_of_fires)*(MAX_HYPERFRAME_TIME/(float)MAX_FIRES);
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <getFiringTime+0x40>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	230a      	movs	r3, #10
 800188c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001890:	fb02 f201 	mul.w	r2, r2, r1
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80018c4 <getFiringTime+0x44>
 80018a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018aa:	ee17 3a90 	vmov	r3, s15
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <getFiringTime+0x48>)
 80018b2:	801a      	strh	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000001 	.word	0x20000001
 80018c4:	42200000 	.word	0x42200000
 80018c8:	20000208 	.word	0x20000208
 80018cc:	00000000 	.word	0x00000000

080018d0 <getFiringVals>:

void getFiringVals(void){
 80018d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
   // Goes from 0 to INTERPOLATION_PTS - 1
   float_t cyclicVar = (no_of_fires) % INTERPOLATION_PTS; 
 80018d8:	4bd9      	ldr	r3, [pc, #868]	; (8001c40 <getFiringVals+0x370>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e8:	edc7 7a03 	vstr	s15, [r7, #12]
   float_t x = cyclicVar/(float_t)(INTERPOLATION_PTS);
 80018ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	edc7 7a02 	vstr	s15, [r7, #8]
   if( (int8_t)(cyclicVar) == 0 ){
 80018fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001904:	edc7 7a01 	vstr	s15, [r7, #4]
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	b25b      	sxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d108      	bne.n	8001922 <getFiringVals+0x52>
     curveIndex++;
 8001910:	4bcc      	ldr	r3, [pc, #816]	; (8001c44 <getFiringVals+0x374>)
 8001912:	f993 3000 	ldrsb.w	r3, [r3]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	3301      	adds	r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	b25a      	sxtb	r2, r3
 800191e:	4bc9      	ldr	r3, [pc, #804]	; (8001c44 <getFiringVals+0x374>)
 8001920:	701a      	strb	r2, [r3, #0]
   }
    curveAngleRoll = getCurveVal(x,roll.curves[curveIndex].d,roll.curves[curveIndex].c,roll.curves[curveIndex].b,roll.curves[curveIndex].a);
 8001922:	4bc8      	ldr	r3, [pc, #800]	; (8001c44 <getFiringVals+0x374>)
 8001924:	f993 3000 	ldrsb.w	r3, [r3]
 8001928:	4ac7      	ldr	r2, [pc, #796]	; (8001c48 <getFiringVals+0x378>)
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe11 	bl	8000558 <__aeabi_f2d>
 8001936:	4604      	mov	r4, r0
 8001938:	460d      	mov	r5, r1
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f7fe fe0c 	bl	8000558 <__aeabi_f2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8001c30 <getFiringVals+0x360>
 8001948:	ec43 2b10 	vmov	d0, r2, r3
 800194c:	f003 fa38 	bl	8004dc0 <pow>
 8001950:	ec53 2b10 	vmov	r2, r3, d0
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fe56 	bl	8000608 <__aeabi_dmul>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	4625      	mov	r5, r4
 8001962:	461c      	mov	r4, r3
 8001964:	4bb7      	ldr	r3, [pc, #732]	; (8001c44 <getFiringVals+0x374>)
 8001966:	f993 3000 	ldrsb.w	r3, [r3]
 800196a:	4ab7      	ldr	r2, [pc, #732]	; (8001c48 <getFiringVals+0x378>)
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	4680      	mov	r8, r0
 800197c:	4689      	mov	r9, r1
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8001c38 <getFiringVals+0x368>
 800198c:	ec43 2b10 	vmov	d0, r2, r3
 8001990:	f003 fa16 	bl	8004dc0 <pow>
 8001994:	ec53 2b10 	vmov	r2, r3, d0
 8001998:	4640      	mov	r0, r8
 800199a:	4649      	mov	r1, r9
 800199c:	f7fe fe34 	bl	8000608 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fc78 	bl	800029c <__adddf3>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4625      	mov	r5, r4
 80019b2:	461c      	mov	r4, r3
 80019b4:	4ba3      	ldr	r3, [pc, #652]	; (8001c44 <getFiringVals+0x374>)
 80019b6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ba:	4aa3      	ldr	r2, [pc, #652]	; (8001c48 <getFiringVals+0x378>)
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3308      	adds	r3, #8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdc7 	bl	8000558 <__aeabi_f2d>
 80019ca:	4680      	mov	r8, r0
 80019cc:	4689      	mov	r9, r1
 80019ce:	68b8      	ldr	r0, [r7, #8]
 80019d0:	f7fe fdc2 	bl	8000558 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	f7fe fe14 	bl	8000608 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fc58 	bl	800029c <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4625      	mov	r5, r4
 80019f2:	461c      	mov	r4, r3
 80019f4:	4b93      	ldr	r3, [pc, #588]	; (8001c44 <getFiringVals+0x374>)
 80019f6:	f993 3000 	ldrsb.w	r3, [r3]
 80019fa:	4a93      	ldr	r2, [pc, #588]	; (8001c48 <getFiringVals+0x378>)
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	330c      	adds	r3, #12
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda7 	bl	8000558 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fc43 	bl	800029c <__adddf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	f7ff f8eb 	bl	8000bf8 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <getFiringVals+0x37c>)
 8001a26:	601a      	str	r2, [r3, #0]
    curveAnglePitch = getCurveVal(x,pitch.curves[curveIndex].d,pitch.curves[curveIndex].c,pitch.curves[curveIndex].b,pitch.curves[curveIndex].a);
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <getFiringVals+0x374>)
 8001a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a2e:	4a88      	ldr	r2, [pc, #544]	; (8001c50 <getFiringVals+0x380>)
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd8e 	bl	8000558 <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f7fe fd89 	bl	8000558 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001c30 <getFiringVals+0x360>
 8001a4e:	ec43 2b10 	vmov	d0, r2, r3
 8001a52:	f003 f9b5 	bl	8004dc0 <pow>
 8001a56:	ec53 2b10 	vmov	r2, r3, d0
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4625      	mov	r5, r4
 8001a68:	461c      	mov	r4, r3
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <getFiringVals+0x374>)
 8001a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a70:	4a77      	ldr	r2, [pc, #476]	; (8001c50 <getFiringVals+0x380>)
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd6c 	bl	8000558 <__aeabi_f2d>
 8001a80:	4680      	mov	r8, r0
 8001a82:	4689      	mov	r9, r1
 8001a84:	68b8      	ldr	r0, [r7, #8]
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001c38 <getFiringVals+0x368>
 8001a92:	ec43 2b10 	vmov	d0, r2, r3
 8001a96:	f003 f993 	bl	8004dc0 <pow>
 8001a9a:	ec53 2b10 	vmov	r2, r3, d0
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	f7fe fdb1 	bl	8000608 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fbf5 	bl	800029c <__adddf3>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4625      	mov	r5, r4
 8001ab8:	461c      	mov	r4, r3
 8001aba:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <getFiringVals+0x374>)
 8001abc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac0:	4a63      	ldr	r2, [pc, #396]	; (8001c50 <getFiringVals+0x380>)
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd44 	bl	8000558 <__aeabi_f2d>
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	4689      	mov	r9, r1
 8001ad4:	68b8      	ldr	r0, [r7, #8]
 8001ad6:	f7fe fd3f 	bl	8000558 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4640      	mov	r0, r8
 8001ae0:	4649      	mov	r1, r9
 8001ae2:	f7fe fd91 	bl	8000608 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fbd5 	bl	800029c <__adddf3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4625      	mov	r5, r4
 8001af8:	461c      	mov	r4, r3
 8001afa:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <getFiringVals+0x374>)
 8001afc:	f993 3000 	ldrsb.w	r3, [r3]
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <getFiringVals+0x380>)
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	330c      	adds	r3, #12
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fbc0 	bl	800029c <__adddf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7ff f868 	bl	8000bf8 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <getFiringVals+0x384>)
 8001b2c:	601a      	str	r2, [r3, #0]
    curveAngleYaw = getCurveVal(x,yaw.curves[curveIndex].d,yaw.curves[curveIndex].c,yaw.curves[curveIndex].b,yaw.curves[curveIndex].a);
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <getFiringVals+0x374>)
 8001b30:	f993 3000 	ldrsb.w	r3, [r3]
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <getFiringVals+0x388>)
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd0b 	bl	8000558 <__aeabi_f2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f7fe fd06 	bl	8000558 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001c30 <getFiringVals+0x360>
 8001b54:	ec43 2b10 	vmov	d0, r2, r3
 8001b58:	f003 f932 	bl	8004dc0 <pow>
 8001b5c:	ec53 2b10 	vmov	r2, r3, d0
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fd50 	bl	8000608 <__aeabi_dmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	4625      	mov	r5, r4
 8001b6e:	461c      	mov	r4, r3
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <getFiringVals+0x374>)
 8001b72:	f993 3000 	ldrsb.w	r3, [r3]
 8001b76:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <getFiringVals+0x388>)
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fce9 	bl	8000558 <__aeabi_f2d>
 8001b86:	4680      	mov	r8, r0
 8001b88:	4689      	mov	r9, r1
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f7fe fce4 	bl	8000558 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c38 <getFiringVals+0x368>
 8001b98:	ec43 2b10 	vmov	d0, r2, r3
 8001b9c:	f003 f910 	bl	8004dc0 <pow>
 8001ba0:	ec53 2b10 	vmov	r2, r3, d0
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	f7fe fd2e 	bl	8000608 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fb72 	bl	800029c <__adddf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4625      	mov	r5, r4
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <getFiringVals+0x374>)
 8001bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc6:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <getFiringVals+0x388>)
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	3308      	adds	r3, #8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc1 	bl	8000558 <__aeabi_f2d>
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	4689      	mov	r9, r1
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f7fe fcbc 	bl	8000558 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4640      	mov	r0, r8
 8001be6:	4649      	mov	r1, r9
 8001be8:	f7fe fd0e 	bl	8000608 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb52 	bl	800029c <__adddf3>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	4625      	mov	r5, r4
 8001bfe:	461c      	mov	r4, r3
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <getFiringVals+0x374>)
 8001c02:	f993 3000 	ldrsb.w	r3, [r3]
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <getFiringVals+0x388>)
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fca1 	bl	8000558 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb3d 	bl	800029c <__adddf3>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4618      	mov	r0, r3
 8001c28:	4621      	mov	r1, r4
 8001c2a:	e017      	b.n	8001c5c <getFiringVals+0x38c>
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40080000 	.word	0x40080000
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40000000 	.word	0x40000000
 8001c40:	20000001 	.word	0x20000001
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000440 	.word	0x20000440
 8001c4c:	2000020c 	.word	0x2000020c
 8001c50:	20000350 	.word	0x20000350
 8001c54:	20000210 	.word	0x20000210
 8001c58:	20000260 	.word	0x20000260
 8001c5c:	f7fe ffcc 	bl	8000bf8 <__aeabi_d2f>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <getFiringVals+0x3a0>)
 8001c64:	601a      	str	r2, [r3, #0]
   
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c70:	20000214 	.word	0x20000214

08001c74 <actuate_gimbal>:
void actuate_gimbal(void){
 8001c74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af04      	add	r7, sp, #16
  gimbalHyperframeTime = 0;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <actuate_gimbal+0xc0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  firingTime = 0;
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <actuate_gimbal+0xc4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
  no_of_fires = CURVES_TO_CONSIDER*INTERPOLATION_PTS;
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <actuate_gimbal+0xc8>)
 8001c8a:	220a      	movs	r2, #10
 8001c8c:	701a      	strb	r2, [r3, #0]
  curveIndex = -1;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <actuate_gimbal+0xcc>)
 8001c90:	22ff      	movs	r2, #255	; 0xff
 8001c92:	701a      	strb	r2, [r3, #0]
   
  while(no_of_fires){
 8001c94:	e045      	b.n	8001d22 <actuate_gimbal+0xae>
    getFiringTime();
 8001c96:	f7ff fdf3 	bl	8001880 <getFiringTime>
    getFiringVals();
 8001c9a:	f7ff fe19 	bl	80018d0 <getFiringVals>
    // Wait until it is time to fire. 
    while(  (gimbalHyperframeTime <= firingTime)  && (gimbalHyperframeTime <= MAX_HYPERFRAME_TIME));
 8001c9e:	bf00      	nop
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <actuate_gimbal+0xc4>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <actuate_gimbal+0xc0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d304      	bcc.n	8001cb8 <actuate_gimbal+0x44>
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <actuate_gimbal+0xc0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001cb6:	d9f3      	bls.n	8001ca0 <actuate_gimbal+0x2c>
    setAngles(curveAngleRoll,curveAnglePitch,curveAngleYaw);
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <actuate_gimbal+0xd0>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <actuate_gimbal+0xd4>)
 8001cc0:	ed93 7a00 	vldr	s14, [r3]
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <actuate_gimbal+0xd8>)
 8001cc6:	edd3 6a00 	vldr	s13, [r3]
 8001cca:	eeb0 1a66 	vmov.f32	s2, s13
 8001cce:	eef0 0a47 	vmov.f32	s1, s14
 8001cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd6:	f7ff fd61 	bl	800179c <setAngles>
    printf("Roll:%f ,Pitch:%f, Yaw:%f \n", curveAngleRoll, curveAnglePitch, curveAngleYaw );
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <actuate_gimbal+0xd0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc3a 	bl	8000558 <__aeabi_f2d>
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	4689      	mov	r9, r1
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <actuate_gimbal+0xd4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	460d      	mov	r5, r1
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <actuate_gimbal+0xd8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc2c 	bl	8000558 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d08:	e9cd 4500 	strd	r4, r5, [sp]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	480f      	ldr	r0, [pc, #60]	; (8001d50 <actuate_gimbal+0xdc>)
 8001d12:	f004 ff29 	bl	8006b68 <iprintf>
    no_of_fires--;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <actuate_gimbal+0xc8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <actuate_gimbal+0xc8>)
 8001d20:	701a      	strb	r2, [r3, #0]
  while(no_of_fires){
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <actuate_gimbal+0xc8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1b5      	bne.n	8001c96 <actuate_gimbal+0x22>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d32:	bf00      	nop
 8001d34:	20000204 	.word	0x20000204
 8001d38:	20000208 	.word	0x20000208
 8001d3c:	20000001 	.word	0x20000001
 8001d40:	20000000 	.word	0x20000000
 8001d44:	2000020c 	.word	0x2000020c
 8001d48:	20000210 	.word	0x20000210
 8001d4c:	20000214 	.word	0x20000214
 8001d50:	0800a32c 	.word	0x0800a32c

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f000 fd24 	bl	80027a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f87a 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f000 f9de 	bl	8002120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d64:	f000 f988 	bl	8002078 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001d68:	f000 f9b0 	bl	80020cc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001d6c:	f000 f8d0 	bl	8001f10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d70:	f000 f928 	bl	8001fc4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t debugMsg[] = "hi\n";

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // flag receive
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <main+0xdc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <main+0xdc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC); // flat Tx_IT
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <main+0xdc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <main+0xdc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d92:	60da      	str	r2, [r3, #12]

  HAL_TIM_Base_Start(&htim3);
 8001d94:	4827      	ldr	r0, [pc, #156]	; (8001e34 <main+0xe0>)
 8001d96:	f001 fca5 	bl	80036e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4); //Start Pwm signal on PB-6 Pin
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	4825      	ldr	r0, [pc, #148]	; (8001e34 <main+0xe0>)
 8001d9e:	f001 fcf1 	bl	8003784 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim4);
 8001da2:	4825      	ldr	r0, [pc, #148]	; (8001e38 <main+0xe4>)
 8001da4:	f001 fc9e 	bl	80036e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3); //Start Pwm signal on PB-6 Pin
 8001da8:	2108      	movs	r1, #8
 8001daa:	4823      	ldr	r0, [pc, #140]	; (8001e38 <main+0xe4>)
 8001dac:	f001 fcea 	bl	8003784 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  longMotn(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f7ff f8f1 	bl	8000f98 <longMotn>
  lateralMotn(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f7ff f96a 	bl	8001090 <lateralMotn>

  init_gimbal();
 8001dbc:	f7ff fd2e 	bl	800181c <init_gimbal>

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)setupInitMsg, sizeof(setupInitMsg));
 8001dc0:	2213      	movs	r2, #19
 8001dc2:	491e      	ldr	r1, [pc, #120]	; (8001e3c <main+0xe8>)
 8001dc4:	481a      	ldr	r0, [pc, #104]	; (8001e30 <main+0xdc>)
 8001dc6:	f002 f95b 	bl	8004080 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 8001dca:	2205      	movs	r2, #5
 8001dcc:	491c      	ldr	r1, [pc, #112]	; (8001e40 <main+0xec>)
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <main+0xdc>)
 8001dd0:	f002 f99b 	bl	800410a <HAL_UART_Receive_IT>
	    // Magic pixie dust
	   if (UartReady != SET) {
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <main+0xf0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d00f      	beq.n	8001dfe <main+0xaa>
      /* do shit all... The Part When UART interrupt is not triggered  */
       /* Turn the LED PIN OFF */
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2120      	movs	r1, #32
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <main+0xf4>)
 8001de4:	f001 f828 	bl	8002e38 <HAL_GPIO_WritePin>

      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
      if(newData == TRUE){
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <main+0xf8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <main+0xa2>
        //parseData(commBuff);
        //regensplines
        //interpolate splines 
        // fire to gimbal 
        newData = FALSE;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <main+0xf8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
      }
      
      
      // Find sleep functionality later and replace this here ...
      HAL_Delay(100); // MS
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f000 fd46 	bl	8002888 <HAL_Delay>
      continue;
 8001dfc:	e017      	b.n	8001e2e <main+0xda>
	    }
	   else {
       // The part when UART was triggered. 
	        UartReady = RESET;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <main+0xf0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
	        /* Turn the LED PIN ON */
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2120      	movs	r1, #32
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <main+0xf4>)
 8001e0a:	f001 f815 	bl	8002e38 <HAL_GPIO_WritePin>
	        //printf("command buffer is %s", commBuff);
	        memset(commBuff,32,21);
 8001e0e:	2215      	movs	r2, #21
 8001e10:	2120      	movs	r1, #32
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <main+0xfc>)
 8001e14:	f004 f861 	bl	8005eda <memset>
	        parseData((byte* )commBuff);
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <main+0xfc>)
 8001e1a:	f7ff f9bb 	bl	8001194 <parseData>
	        actuate_gimbal();
 8001e1e:	f7ff ff29 	bl	8001c74 <actuate_gimbal>
	        //printf("area.curves[0].d = 99 should be :%f", area.curves[0].d);
	        memset(commBuff,0,sizeof(commBuff));
 8001e22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e26:	2100      	movs	r1, #0
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <main+0xfc>)
 8001e2a:	f004 f856 	bl	8005eda <memset>
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 8001e2e:	e7cc      	b.n	8001dca <main+0x76>
 8001e30:	200016c0 	.word	0x200016c0
 8001e34:	2000144c 	.word	0x2000144c
 8001e38:	200011d8 	.word	0x200011d8
 8001e3c:	0800a350 	.word	0x0800a350
 8001e40:	20001258 	.word	0x20001258
 8001e44:	20000248 	.word	0x20000248
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	20000249 	.word	0x20000249
 8001e50:	20000620 	.word	0x20000620

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	; 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	2230      	movs	r2, #48	; 0x30
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f839 	bl	8005eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <SystemClock_Config+0xb4>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <SystemClock_Config+0xb4>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <SystemClock_Config+0xb4>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <SystemClock_Config+0xb8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <SystemClock_Config+0xb8>)
 8001e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <SystemClock_Config+0xb8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb8:	2310      	movs	r3, #16
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 ffd1 	bl	8002e6c <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001ed0:	f000 f98e 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fa2c 	bl	800334c <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001efa:	f000 f979 	bl	80021f0 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <MX_TIM3_Init+0xb0>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f46:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f5a:	f001 fbe7 	bl	800372c <HAL_TIM_PWM_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f64:	f000 f944 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	4619      	mov	r1, r3
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f78:	f001 ff2e 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f82:	f000 f935 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f86:	2360      	movs	r3, #96	; 0x60
 8001f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	220c      	movs	r2, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001f9e:	f001 fc23 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001fa8:	f000 f922 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM3_Init+0xac>)
 8001fae:	f000 f987 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000144c 	.word	0x2000144c
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_TIM4_Init+0xac>)
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <MX_TIM4_Init+0xb0>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <MX_TIM4_Init+0xac>)
 8001fee:	220f      	movs	r2, #15
 8001ff0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_TIM4_Init+0xac>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_TIM4_Init+0xac>)
 8001ffa:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ffe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <MX_TIM4_Init+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_TIM4_Init+0xac>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800200c:	4818      	ldr	r0, [pc, #96]	; (8002070 <MX_TIM4_Init+0xac>)
 800200e:	f001 fb8d 	bl	800372c <HAL_TIM_PWM_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002018:	f000 f8ea 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002024:	f107 0320 	add.w	r3, r7, #32
 8002028:	4619      	mov	r1, r3
 800202a:	4811      	ldr	r0, [pc, #68]	; (8002070 <MX_TIM4_Init+0xac>)
 800202c:	f001 fed4 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002036:	f000 f8db 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203a:	2360      	movs	r3, #96	; 0x60
 800203c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2208      	movs	r2, #8
 800204e:	4619      	mov	r1, r3
 8002050:	4807      	ldr	r0, [pc, #28]	; (8002070 <MX_TIM4_Init+0xac>)
 8002052:	f001 fbc9 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800205c:	f000 f8c8 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <MX_TIM4_Init+0xac>)
 8002062:	f000 f92d 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200011d8 	.word	0x200011d8
 8002074:	40000800 	.word	0x40000800

08002078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f001 ff00 	bl	8003eb4 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f000 f899 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200016c0 	.word	0x200016c0
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <MX_USART6_UART_Init+0x50>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_USART6_UART_Init+0x4c>)
 8002104:	f001 fed6 	bl	8003eb4 <HAL_UART_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800210e:	f000 f86f 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000148c 	.word	0x2000148c
 800211c:	40011400 	.word	0x40011400

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <MX_GPIO_Init+0xc4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <MX_GPIO_Init+0xc4>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <MX_GPIO_Init+0xc4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2120      	movs	r1, #32
 800218e:	4816      	ldr	r0, [pc, #88]	; (80021e8 <MX_GPIO_Init+0xc8>)
 8002190:	f000 fe52 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f24e 0102 	movw	r1, #57346	; 0xe002
 800219a:	4814      	ldr	r0, [pc, #80]	; (80021ec <MX_GPIO_Init+0xcc>)
 800219c:	f000 fe4c 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021a0:	2320      	movs	r3, #32
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <MX_GPIO_Init+0xc8>)
 80021b8:	f000 fcbc 	bl	8002b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021bc:	f24e 0302 	movw	r3, #57346	; 0xe002
 80021c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_GPIO_Init+0xcc>)
 80021d6:	f000 fcad 	bl	8002b34 <HAL_GPIO_Init>

}
 80021da:	bf00      	nop
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_MspInit+0x4c>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_MspInit+0x4c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_TIM_PWM_MspInit+0x64>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800227e:	e012      	b.n	80022a6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_TIM_PWM_MspInit+0x6c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10d      	bne.n	80022a6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_TIM_PWM_MspInit+0x68>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a25      	ldr	r2, [pc, #148]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d11f      	bne.n	8002322 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002310:	2302      	movs	r3, #2
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4818      	ldr	r0, [pc, #96]	; (800237c <HAL_TIM_MspPostInit+0xbc>)
 800231c:	f000 fc0a 	bl	8002b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002320:	e023      	b.n	800236a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_TIM_MspPostInit+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11e      	bne.n	800236a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	6313      	str	r3, [r2, #48]	; 0x30
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_TIM_MspPostInit+0xb8>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800235a:	2302      	movs	r3, #2
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <HAL_TIM_MspPostInit+0xc4>)
 8002366:	f000 fbe5 	bl	8002b34 <HAL_GPIO_Init>
}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40000400 	.word	0x40000400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40000800 	.word	0x40000800
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a36      	ldr	r2, [pc, #216]	; (8002480 <HAL_UART_MspInit+0xf8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d134      	bne.n	8002414 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_UART_MspInit+0xfc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023e2:	230c      	movs	r3, #12
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f2:	2307      	movs	r3, #7
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4822      	ldr	r0, [pc, #136]	; (8002488 <HAL_UART_MspInit+0x100>)
 80023fe:	f000 fb99 	bl	8002b34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2026      	movs	r0, #38	; 0x26
 8002408:	f000 fb3b 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800240c:	2026      	movs	r0, #38	; 0x26
 800240e:	f000 fb54 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002412:	e031      	b.n	8002478 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_UART_MspInit+0x104>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_UART_MspInit+0xfc>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_UART_MspInit+0xfc>)
 8002428:	f043 0320 	orr.w	r3, r3, #32
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_UART_MspInit+0xfc>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_UART_MspInit+0xfc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_UART_MspInit+0xfc>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_UART_MspInit+0xfc>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002456:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002468:	2308      	movs	r3, #8
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_UART_MspInit+0x100>)
 8002474:	f000 fb5e 	bl	8002b34 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40004400 	.word	0x40004400
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	40011400 	.word	0x40011400

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f9b0 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  gimbalHyperframeTime++;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <SysTick_Handler+0x18>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <SysTick_Handler+0x18>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000204 	.word	0x20000204

080024fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002500:	481b      	ldr	r0, [pc, #108]	; (8002570 <USART2_IRQHandler+0x74>)
 8002502:	f001 fe57 	bl	80041b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)bufferRx, 1 );
 8002506:	2201      	movs	r2, #1
 8002508:	491a      	ldr	r1, [pc, #104]	; (8002574 <USART2_IRQHandler+0x78>)
 800250a:	4819      	ldr	r0, [pc, #100]	; (8002570 <USART2_IRQHandler+0x74>)
 800250c:	f001 fdfd 	bl	800410a <HAL_UART_Receive_IT>
   // write the bytes to our Command buffer
   commBuff[commBuff_index] = bufferRx[0];
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <USART2_IRQHandler+0x7c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	; (8002574 <USART2_IRQHandler+0x78>)
 8002516:	7811      	ldrb	r1, [r2, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <USART2_IRQHandler+0x80>)
 800251a:	54d1      	strb	r1, [r2, r3]
   if (bufferRx[0] == '\r' || bufferRx[0] == '\n' || bufferRx[0] == 'q')
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <USART2_IRQHandler+0x78>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b0d      	cmp	r3, #13
 8002522:	d007      	beq.n	8002534 <USART2_IRQHandler+0x38>
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <USART2_IRQHandler+0x78>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d003      	beq.n	8002534 <USART2_IRQHandler+0x38>
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <USART2_IRQHandler+0x78>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b71      	cmp	r3, #113	; 0x71
 8002532:	d116      	bne.n	8002562 <USART2_IRQHandler+0x66>
   {
       UartReady = SET;
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <USART2_IRQHandler+0x84>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)commBuff, sizeof(commBuff), 100);
 800253a:	2364      	movs	r3, #100	; 0x64
 800253c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <USART2_IRQHandler+0x80>)
 8002542:	480b      	ldr	r0, [pc, #44]	; (8002570 <USART2_IRQHandler+0x74>)
 8002544:	f001 fd03 	bl	8003f4e <HAL_UART_Transmit>
       sent_index=commBuff_index;
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <USART2_IRQHandler+0x7c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <USART2_IRQHandler+0x88>)
 800254e:	6013      	str	r3, [r2, #0]
       bufferRx[0] = '\0';
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <USART2_IRQHandler+0x78>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
       commBuff_index = 0;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <USART2_IRQHandler+0x7c>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
       newData = TRUE;  
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <USART2_IRQHandler+0x8c>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
   }
   // use normal transmit (not transmit_IT) so we don't
   // get duplicates in the buffer
   // TODO - stop using this dirty hack...
   //HAL_UART_Transmit(&huart2, bufferRx, 5,100);
   commBuff_index++;
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <USART2_IRQHandler+0x7c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a03      	ldr	r2, [pc, #12]	; (8002578 <USART2_IRQHandler+0x7c>)
 800256a:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200016c0 	.word	0x200016c0
 8002574:	20001258 	.word	0x20001258
 8002578:	20000250 	.word	0x20000250
 800257c:	20000620 	.word	0x20000620
 8002580:	20000248 	.word	0x20000248
 8002584:	2000024c 	.word	0x2000024c
 8002588:	20000249 	.word	0x20000249

0800258c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <ITM_SendChar+0x48>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <ITM_SendChar+0x48>)
 800259c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <ITM_SendChar+0x4c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <ITM_SendChar+0x4c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80025ae:	bf00      	nop
 80025b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f8      	beq.n	80025b0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80025be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000edfc 	.word	0xe000edfc
 80025d8:	e0000e00 	.word	0xe0000e00

080025dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00a      	b.n	8002604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ee:	f3af 8000 	nop.w
 80025f2:	4601      	mov	r1, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	b2ca      	uxtb	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf0      	blt.n	80025ee <_read+0x12>
	}

return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e009      	b.n	800263c <_write+0x26>
	{
		/*__io_putchar(*ptr++);*/
		ITM_SendChar(*ptr++);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ffab 	bl	800258c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	dbf1      	blt.n	8002628 <_write+0x12>
	}
	return len;
 8002644:	687b      	ldr	r3, [r7, #4]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_close>:

int _close(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002676:	605a      	str	r2, [r3, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <_isatty>:

int _isatty(int file)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	return 1;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
	return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f003 fbc2 	bl	8005e70 <__errno>
 80026ec:	4602      	mov	r2, r0
 80026ee:	230c      	movs	r3, #12
 80026f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20020000 	.word	0x20020000
 8002718:	00000400 	.word	0x00000400
 800271c:	20000254 	.word	0x20000254
 8002720:	20001708 	.word	0x20001708

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <SystemInit+0x28>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <SystemInit+0x28>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <SystemInit+0x28>)
 800273a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273e:	609a      	str	r2, [r3, #8]
#endif
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002756:	e003      	b.n	8002760 <LoopCopyDataInit>

08002758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800275a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800275c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800275e:	3104      	adds	r1, #4

08002760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002768:	d3f6      	bcc.n	8002758 <CopyDataInit>
  ldr  r2, =_sbss
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800276c:	e002      	b.n	8002774 <LoopFillZerobss>

0800276e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800276e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002770:	f842 3b04 	str.w	r3, [r2], #4

08002774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002778:	d3f9      	bcc.n	800276e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800277a:	f7ff ffd3 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277e:	f003 fb7d 	bl	8005e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7ff fae7 	bl	8001d54 <main>
  bx  lr    
 8002786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002788:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800278c:	0800a6f0 	.word	0x0800a6f0
  ldr  r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002794:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002798:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800279c:	20001708 	.word	0x20001708

080027a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_Init+0x40>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_Init+0x40>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_Init+0x40>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f94d 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f808 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fd12 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_InitTick+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f965 	bl	8002ad6 <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f000 f92d 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	; (8002844 <HAL_InitTick+0x5c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000004 	.word	0x20000004
 8002840:	2000000c 	.word	0x2000000c
 8002844:	20000008 	.word	0x20000008

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000000c 	.word	0x2000000c
 800286c:	20001700 	.word	0x20001700

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20001700 	.word	0x20001700

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_Delay+0x40>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000000c 	.word	0x2000000c

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e00c      	b.n	8002b26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e159      	b.n	8002e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 8148 	bne.w	8002dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d00b      	beq.n	8002b8e <HAL_GPIO_Init+0x5a>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b82:	2b11      	cmp	r3, #17
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b12      	cmp	r3, #18
 8002b8c:	d130      	bne.n	8002bf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 0201 	and.w	r2, r3, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0xfc>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b12      	cmp	r3, #18
 8002c2e:	d123      	bne.n	8002c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	08da      	lsrs	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3208      	adds	r2, #8
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a2 	beq.w	8002dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_GPIO_Init+0x2e4>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a55      	ldr	r2, [pc, #340]	; (8002e18 <HAL_GPIO_Init+0x2e4>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x2e4>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd6:	4a51      	ldr	r2, [pc, #324]	; (8002e1c <HAL_GPIO_Init+0x2e8>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_GPIO_Init+0x2ec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d019      	beq.n	8002d36 <HAL_GPIO_Init+0x202>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a47      	ldr	r2, [pc, #284]	; (8002e24 <HAL_GPIO_Init+0x2f0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0x1fe>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <HAL_GPIO_Init+0x2f4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_GPIO_Init+0x1fa>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <HAL_GPIO_Init+0x2f8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0x1f6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a44      	ldr	r2, [pc, #272]	; (8002e30 <HAL_GPIO_Init+0x2fc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_GPIO_Init+0x1f2>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e008      	b.n	8002d38 <HAL_GPIO_Init+0x204>
 8002d26:	2307      	movs	r3, #7
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x204>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x204>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x204>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x204>
 8002d36:	2300      	movs	r3, #0
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f002 0203 	and.w	r2, r2, #3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d48:	4934      	ldr	r1, [pc, #208]	; (8002e1c <HAL_GPIO_Init+0x2e8>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_GPIO_Init+0x300>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	f67f aea2 	bls.w	8002b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3724      	adds	r7, #36	; 0x24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40013c00 	.word	0x40013c00

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e25b      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d075      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	4ba3      	ldr	r3, [pc, #652]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4ba0      	ldr	r3, [pc, #640]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b9d      	ldr	r3, [pc, #628]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b99      	ldr	r3, [pc, #612]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e236      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x74>
 8002ed2:	4b91      	ldr	r3, [pc, #580]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a90      	ldr	r2, [pc, #576]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a8a      	ldr	r2, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a83      	ldr	r2, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a80      	ldr	r2, [pc, #512]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7ff fca4 	bl	8002870 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7ff fca0 	bl	8002870 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e1fb      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7ff fc90 	bl	8002870 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7ff fc8c 	bl	8002870 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1e7      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b62      	ldr	r3, [pc, #392]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1bb      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b56      	ldr	r3, [pc, #344]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4952      	ldr	r1, [pc, #328]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b4f      	ldr	r3, [pc, #316]	; (800311c <HAL_RCC_OscConfig+0x2b0>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7ff fc45 	bl	8002870 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7ff fc41 	bl	8002870 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e19c      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4940      	ldr	r1, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x2b0>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7ff fc24 	bl	8002870 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7ff fc20 	bl	8002870 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e17b      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d030      	beq.n	80030b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_RCC_OscConfig+0x2b4>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7ff fc04 	bl	8002870 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7ff fc00 	bl	8002870 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e15b      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x200>
 800308a:	e015      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x2b4>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7ff fbed 	bl	8002870 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7ff fbe9 	bl	8002870 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e144      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a0 	beq.w	8003206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d121      	bne.n	8003146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7ff fbaf 	bl	8002870 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e011      	b.n	800313a <HAL_RCC_OscConfig+0x2ce>
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
 8003124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7ff fba2 	bl	8002870 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0fd      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_RCC_OscConfig+0x4d4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x2f0>
 800314e:	4b7d      	ldr	r3, [pc, #500]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a7c      	ldr	r2, [pc, #496]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	e01c      	b.n	8003196 <HAL_RCC_OscConfig+0x32a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x312>
 8003164:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a76      	ldr	r2, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a73      	ldr	r2, [pc, #460]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x32a>
 800317e:	4b71      	ldr	r3, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a70      	ldr	r2, [pc, #448]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b6e      	ldr	r3, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a6d      	ldr	r2, [pc, #436]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7ff fb67 	bl	8002870 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7ff fb63 	bl	8002870 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0bc      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ee      	beq.n	80031a6 <HAL_RCC_OscConfig+0x33a>
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7ff fb51 	bl	8002870 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7ff fb4d 	bl	8002870 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e0a6      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b56      	ldr	r3, [pc, #344]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b52      	ldr	r3, [pc, #328]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a51      	ldr	r2, [pc, #324]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8092 	beq.w	8003334 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d05c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d141      	bne.n	80032a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b48      	ldr	r3, [pc, #288]	; (8003348 <HAL_RCC_OscConfig+0x4dc>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7ff fb21 	bl	8002870 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7ff fb1d 	bl	8002870 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e078      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	4933      	ldr	r1, [pc, #204]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCC_OscConfig+0x4dc>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff faf6 	bl	8002870 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff faf2 	bl	8002870 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04d      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x41c>
 80032a6:	e045      	b.n	8003334 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x4dc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7ff fadf 	bl	8002870 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff fadb 	bl	8002870 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e036      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x44a>
 80032d4:	e02e      	b.n	8003334 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e029      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_RCC_OscConfig+0x4d8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d115      	bne.n	8003330 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800330a:	4013      	ands	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d10d      	bne.n	8003330 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40007000 	.word	0x40007000
 8003344:	40023800 	.word	0x40023800
 8003348:	42470060 	.word	0x42470060

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0cc      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d90c      	bls.n	8003388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b8      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	494d      	ldr	r1, [pc, #308]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d044      	beq.n	800346c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d119      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003406:	2b03      	cmp	r3, #3
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e067      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4934      	ldr	r1, [pc, #208]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800343c:	f7ff fa18 	bl	8002870 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7ff fa14 	bl	8002870 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e04f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d20c      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e032      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4916      	ldr	r1, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 f821 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d6:	4601      	mov	r1, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	fa21 f303 	lsr.w	r3, r1, r3
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f978 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00
 8003508:	40023800 	.word	0x40023800
 800350c:	0800a364 	.word	0x0800a364
 8003510:	20000004 	.word	0x20000004
 8003514:	20000008 	.word	0x20000008

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352e:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d007      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x32>
 800353a:	2b08      	cmp	r3, #8
 800353c:	d008      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x38>
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 808d 	bne.w	800365e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003546:	60bb      	str	r3, [r7, #8]
       break;
 8003548:	e08c      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_RCC_GetSysClockFreq+0x160>)
 800354c:	60bb      	str	r3, [r7, #8]
      break;
 800354e:	e089      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b45      	ldr	r3, [pc, #276]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d023      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b42      	ldr	r3, [pc, #264]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	f04f 0400 	mov.w	r4, #0
 8003570:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	ea03 0501 	and.w	r5, r3, r1
 800357c:	ea04 0602 	and.w	r6, r4, r2
 8003580:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <HAL_RCC_GetSysClockFreq+0x160>)
 8003582:	fb02 f106 	mul.w	r1, r2, r6
 8003586:	2200      	movs	r2, #0
 8003588:	fb02 f205 	mul.w	r2, r2, r5
 800358c:	440a      	add	r2, r1
 800358e:	493a      	ldr	r1, [pc, #232]	; (8003678 <HAL_RCC_GetSysClockFreq+0x160>)
 8003590:	fba5 0101 	umull	r0, r1, r5, r1
 8003594:	1853      	adds	r3, r2, r1
 8003596:	4619      	mov	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f04f 0400 	mov.w	r4, #0
 800359e:	461a      	mov	r2, r3
 80035a0:	4623      	mov	r3, r4
 80035a2:	f7fd fb79 	bl	8000c98 <__aeabi_uldivmod>
 80035a6:	4603      	mov	r3, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e049      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	ea03 0501 	and.w	r5, r3, r1
 80035c4:	ea04 0602 	and.w	r6, r4, r2
 80035c8:	4629      	mov	r1, r5
 80035ca:	4632      	mov	r2, r6
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	0154      	lsls	r4, r2, #5
 80035d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035da:	014b      	lsls	r3, r1, #5
 80035dc:	4619      	mov	r1, r3
 80035de:	4622      	mov	r2, r4
 80035e0:	1b49      	subs	r1, r1, r5
 80035e2:	eb62 0206 	sbc.w	r2, r2, r6
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0194      	lsls	r4, r2, #6
 80035f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f4:	018b      	lsls	r3, r1, #6
 80035f6:	1a5b      	subs	r3, r3, r1
 80035f8:	eb64 0402 	sbc.w	r4, r4, r2
 80035fc:	f04f 0100 	mov.w	r1, #0
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	00e2      	lsls	r2, r4, #3
 8003606:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800360a:	00d9      	lsls	r1, r3, #3
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	195b      	adds	r3, r3, r5
 8003612:	eb44 0406 	adc.w	r4, r4, r6
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	02a2      	lsls	r2, r4, #10
 8003620:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003624:	0299      	lsls	r1, r3, #10
 8003626:	460b      	mov	r3, r1
 8003628:	4614      	mov	r4, r2
 800362a:	4618      	mov	r0, r3
 800362c:	4621      	mov	r1, r4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f04f 0400 	mov.w	r4, #0
 8003634:	461a      	mov	r2, r3
 8003636:	4623      	mov	r3, r4
 8003638:	f7fd fb2e 	bl	8000c98 <__aeabi_uldivmod>
 800363c:	4603      	mov	r3, r0
 800363e:	460c      	mov	r4, r1
 8003640:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_GetSysClockFreq+0x158>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	3301      	adds	r3, #1
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	60bb      	str	r3, [r7, #8]
      break;
 800365c:	e002      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003660:	60bb      	str	r3, [r7, #8]
      break;
 8003662:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003664:	68bb      	ldr	r3, [r7, #8]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	017d7840 	.word	0x017d7840

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000004 	.word	0x20000004

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4601      	mov	r1, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800a374 	.word	0x0800a374

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffdc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c4:	4601      	mov	r1, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0b5b      	lsrs	r3, r3, #13
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800a374 	.word	0x0800a374

080036e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d007      	beq.n	8003716 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e01d      	b.n	800377a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fd7c 	bl	8002250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 f902 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 faf8 	bl	8003d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_TIM_PWM_Start+0x60>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d007      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000

080037e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e0b4      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	f200 809f 	bhi.w	8003958 <HAL_TIM_PWM_ConfigChannel+0x170>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003855 	.word	0x08003855
 8003824:	08003959 	.word	0x08003959
 8003828:	08003959 	.word	0x08003959
 800382c:	08003959 	.word	0x08003959
 8003830:	08003895 	.word	0x08003895
 8003834:	08003959 	.word	0x08003959
 8003838:	08003959 	.word	0x08003959
 800383c:	08003959 	.word	0x08003959
 8003840:	080038d7 	.word	0x080038d7
 8003844:	08003959 	.word	0x08003959
 8003848:	08003959 	.word	0x08003959
 800384c:	08003959 	.word	0x08003959
 8003850:	08003917 	.word	0x08003917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f90a 	bl	8003a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0208 	orr.w	r2, r2, #8
 800386e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0204 	bic.w	r2, r2, #4
 800387e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6999      	ldr	r1, [r3, #24]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
      break;
 8003892:	e062      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f950 	bl	8003b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	021a      	lsls	r2, r3, #8
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	619a      	str	r2, [r3, #24]
      break;
 80038d4:	e041      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f99b 	bl	8003c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0208 	orr.w	r2, r2, #8
 80038f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0204 	bic.w	r2, r2, #4
 8003900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69d9      	ldr	r1, [r3, #28]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]
      break;
 8003914:	e021      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f9e5 	bl	8003cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	61da      	str	r2, [r3, #28]
      break;
 8003956:	e000      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003958:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <TIM_Base_SetConfig+0xe4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00f      	beq.n	80039ac <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003992:	d00b      	beq.n	80039ac <TIM_Base_SetConfig+0x38>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <TIM_Base_SetConfig+0xe8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d007      	beq.n	80039ac <TIM_Base_SetConfig+0x38>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a30      	ldr	r2, [pc, #192]	; (8003a60 <TIM_Base_SetConfig+0xec>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_Base_SetConfig+0x38>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <TIM_Base_SetConfig+0xf0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d108      	bne.n	80039be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_Base_SetConfig+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01b      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d017      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <TIM_Base_SetConfig+0xe8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <TIM_Base_SetConfig+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00f      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <TIM_Base_SetConfig+0xf0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00b      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <TIM_Base_SetConfig+0xf4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <TIM_Base_SetConfig+0xf8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_Base_SetConfig+0x8a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <TIM_Base_SetConfig+0xfc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d108      	bne.n	8003a10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <TIM_Base_SetConfig+0xe4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d103      	bne.n	8003a44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	615a      	str	r2, [r3, #20]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0302 	bic.w	r3, r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <TIM_OC1_SetConfig+0xc8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10c      	bne.n	8003aea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0308 	bic.w	r3, r3, #8
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <TIM_OC1_SetConfig+0xc8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d111      	bne.n	8003b16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40010000 	.word	0x40010000

08003b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f023 0210 	bic.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0320 	bic.w	r3, r3, #32
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <TIM_OC2_SetConfig+0xd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <TIM_OC2_SetConfig+0xd4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d113      	bne.n	8003bec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000

08003c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <TIM_OC3_SetConfig+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10d      	bne.n	8003c92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <TIM_OC3_SetConfig+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d113      	bne.n	8003cc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40010000 	.word	0x40010000

08003cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <TIM_OC4_SetConfig+0x9c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d109      	bne.n	8003d60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000

08003d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e050      	b.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10c      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40014000 	.word	0x40014000

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03f      	b.n	8003f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe fa54 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fbe5 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b088      	sub	sp, #32
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 8083 	bne.w	8004076 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Transmit+0x2e>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e07b      	b.n	8004078 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Transmit+0x40>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e074      	b.n	8004078 <HAL_UART_Transmit+0x12a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	; 0x21
 8003fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003fa4:	f7fe fc64 	bl	8002870 <HAL_GetTick>
 8003fa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003fbe:	e042      	b.n	8004046 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d122      	bne.n	800401e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa04 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e042      	b.n	8004078 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3302      	adds	r3, #2
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	e017      	b.n	8004046 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3301      	adds	r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	e013      	b.n	8004046 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f9e1 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e01f      	b.n	8004078 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	60ba      	str	r2, [r7, #8]
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1b7      	bne.n	8003fc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2200      	movs	r2, #0
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f9c8 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e006      	b.n	8004078 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	d130      	bne.n	80040fc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_Transmit_IT+0x26>
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e029      	b.n	80040fe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Transmit_IT+0x38>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e022      	b.n	80040fe <HAL_UART_Transmit_IT+0x7e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2221      	movs	r2, #33	; 0x21
 80040dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d140      	bne.n	80041a6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Receive_IT+0x26>
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e039      	b.n	80041a8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UART_Receive_IT+0x38>
 800413e:	2302      	movs	r3, #2
 8004140:	e032      	b.n	80041a8 <HAL_UART_Receive_IT+0x9e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2222      	movs	r2, #34	; 0x22
 8004166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0220 	orr.w	r2, r2, #32
 80041a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_UART_IRQHandler+0x52>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f9e0 	bl	80045c4 <UART_Receive_IT>
      return;
 8004204:	e0d1      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80b0 	beq.w	800436e <HAL_UART_IRQHandler+0x1ba>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_UART_IRQHandler+0x70>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a5 	beq.w	800436e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_UART_IRQHandler+0x90>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_UART_IRQHandler+0xb0>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	f043 0202 	orr.w	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_UART_IRQHandler+0xd0>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	f043 0204 	orr.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00f      	beq.n	80042ae <HAL_UART_IRQHandler+0xfa>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_UART_IRQHandler+0xee>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d078      	beq.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f97a 	bl	80045c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_UART_IRQHandler+0x144>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d031      	beq.n	800435c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8c3 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d123      	bne.n	8004354 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_UART_IRQHandler+0x1fc>)
 800432a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fbdc 	bl	8002aee <HAL_DMA_Abort_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004346:	4610      	mov	r0, r2
 8004348:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	e00e      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f845 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	e00a      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f841 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435a:	e006      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f83d 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004368:	e01e      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436a:	bf00      	nop
    return;
 800436c:	e01c      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_UART_IRQHandler+0x1d6>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8b0 	bl	80044e8 <UART_Transmit_IT>
    return;
 8004388:	e00f      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_UART_IRQHandler+0x1f6>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8f8 	bl	8004594 <UART_EndTransmit_IT>
    return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
    return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	080044c1 	.word	0x080044c1

080043b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004400:	e02c      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d028      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x30>
 8004410:	f7fe fa2e 	bl	8002870 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	429a      	cmp	r2, r3
 800441e:	d21d      	bcs.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e00f      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	d0c3      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800449a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ff7e 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d144      	bne.n	8004586 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d11a      	bne.n	800453c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]
 800452e:	e00e      	b.n	800454e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]
 800453a:	e008      	b.n	800454e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6211      	str	r1, [r2, #32]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fefd 	bl	80043b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b22      	cmp	r3, #34	; 0x22
 80045d6:	d171      	bne.n	80046bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d123      	bne.n	800462a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10e      	bne.n	800460e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
 800460c:	e029      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	b29b      	uxth	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e01b      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6858      	ldr	r0, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6291      	str	r1, [r2, #40]	; 0x28
 8004642:	b2c2      	uxtb	r2, r0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e00c      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	1c58      	adds	r0, r3, #1
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	6288      	str	r0, [r1, #40]	; 0x28
 800465a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004672:	2b00      	cmp	r3, #0
 8004674:	d120      	bne.n	80046b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0220 	bic.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe8a 	bl	80043c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e002      	b.n	80046be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800470a:	f023 030c 	bic.w	r3, r3, #12
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	430b      	orrs	r3, r1
 8004716:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004736:	f040 818b 	bne.w	8004a50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4ac1      	ldr	r2, [pc, #772]	; (8004a44 <UART_SetConfig+0x37c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d005      	beq.n	8004750 <UART_SetConfig+0x88>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4abf      	ldr	r2, [pc, #764]	; (8004a48 <UART_SetConfig+0x380>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f040 80bd 	bne.w	80048ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe ffb4 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004754:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	461d      	mov	r5, r3
 800475a:	f04f 0600 	mov.w	r6, #0
 800475e:	46a8      	mov	r8, r5
 8004760:	46b1      	mov	r9, r6
 8004762:	eb18 0308 	adds.w	r3, r8, r8
 8004766:	eb49 0409 	adc.w	r4, r9, r9
 800476a:	4698      	mov	r8, r3
 800476c:	46a1      	mov	r9, r4
 800476e:	eb18 0805 	adds.w	r8, r8, r5
 8004772:	eb49 0906 	adc.w	r9, r9, r6
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004782:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004786:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800478a:	4688      	mov	r8, r1
 800478c:	4691      	mov	r9, r2
 800478e:	eb18 0005 	adds.w	r0, r8, r5
 8004792:	eb49 0106 	adc.w	r1, r9, r6
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	461d      	mov	r5, r3
 800479c:	f04f 0600 	mov.w	r6, #0
 80047a0:	196b      	adds	r3, r5, r5
 80047a2:	eb46 0406 	adc.w	r4, r6, r6
 80047a6:	461a      	mov	r2, r3
 80047a8:	4623      	mov	r3, r4
 80047aa:	f7fc fa75 	bl	8000c98 <__aeabi_uldivmod>
 80047ae:	4603      	mov	r3, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	461a      	mov	r2, r3
 80047b4:	4ba5      	ldr	r3, [pc, #660]	; (8004a4c <UART_SetConfig+0x384>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	461d      	mov	r5, r3
 80047c4:	f04f 0600 	mov.w	r6, #0
 80047c8:	46a9      	mov	r9, r5
 80047ca:	46b2      	mov	sl, r6
 80047cc:	eb19 0309 	adds.w	r3, r9, r9
 80047d0:	eb4a 040a 	adc.w	r4, sl, sl
 80047d4:	4699      	mov	r9, r3
 80047d6:	46a2      	mov	sl, r4
 80047d8:	eb19 0905 	adds.w	r9, r9, r5
 80047dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f4:	4689      	mov	r9, r1
 80047f6:	4692      	mov	sl, r2
 80047f8:	eb19 0005 	adds.w	r0, r9, r5
 80047fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461d      	mov	r5, r3
 8004806:	f04f 0600 	mov.w	r6, #0
 800480a:	196b      	adds	r3, r5, r5
 800480c:	eb46 0406 	adc.w	r4, r6, r6
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	f7fc fa40 	bl	8000c98 <__aeabi_uldivmod>
 8004818:	4603      	mov	r3, r0
 800481a:	460c      	mov	r4, r1
 800481c:	461a      	mov	r2, r3
 800481e:	4b8b      	ldr	r3, [pc, #556]	; (8004a4c <UART_SetConfig+0x384>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	2164      	movs	r1, #100	; 0x64
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3332      	adds	r3, #50	; 0x32
 8004832:	4a86      	ldr	r2, [pc, #536]	; (8004a4c <UART_SetConfig+0x384>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004840:	4498      	add	r8, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	461d      	mov	r5, r3
 8004846:	f04f 0600 	mov.w	r6, #0
 800484a:	46a9      	mov	r9, r5
 800484c:	46b2      	mov	sl, r6
 800484e:	eb19 0309 	adds.w	r3, r9, r9
 8004852:	eb4a 040a 	adc.w	r4, sl, sl
 8004856:	4699      	mov	r9, r3
 8004858:	46a2      	mov	sl, r4
 800485a:	eb19 0905 	adds.w	r9, r9, r5
 800485e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004876:	4689      	mov	r9, r1
 8004878:	4692      	mov	sl, r2
 800487a:	eb19 0005 	adds.w	r0, r9, r5
 800487e:	eb4a 0106 	adc.w	r1, sl, r6
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	461d      	mov	r5, r3
 8004888:	f04f 0600 	mov.w	r6, #0
 800488c:	196b      	adds	r3, r5, r5
 800488e:	eb46 0406 	adc.w	r4, r6, r6
 8004892:	461a      	mov	r2, r3
 8004894:	4623      	mov	r3, r4
 8004896:	f7fc f9ff 	bl	8000c98 <__aeabi_uldivmod>
 800489a:	4603      	mov	r3, r0
 800489c:	460c      	mov	r4, r1
 800489e:	461a      	mov	r2, r3
 80048a0:	4b6a      	ldr	r3, [pc, #424]	; (8004a4c <UART_SetConfig+0x384>)
 80048a2:	fba3 1302 	umull	r1, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2164      	movs	r1, #100	; 0x64
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <UART_SetConfig+0x384>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 0207 	and.w	r2, r3, #7
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4442      	add	r2, r8
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e26f      	b.n	8004daa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fe fee3 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 80048ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	461d      	mov	r5, r3
 80048d4:	f04f 0600 	mov.w	r6, #0
 80048d8:	46a8      	mov	r8, r5
 80048da:	46b1      	mov	r9, r6
 80048dc:	eb18 0308 	adds.w	r3, r8, r8
 80048e0:	eb49 0409 	adc.w	r4, r9, r9
 80048e4:	4698      	mov	r8, r3
 80048e6:	46a1      	mov	r9, r4
 80048e8:	eb18 0805 	adds.w	r8, r8, r5
 80048ec:	eb49 0906 	adc.w	r9, r9, r6
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004900:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004904:	4688      	mov	r8, r1
 8004906:	4691      	mov	r9, r2
 8004908:	eb18 0005 	adds.w	r0, r8, r5
 800490c:	eb49 0106 	adc.w	r1, r9, r6
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	461d      	mov	r5, r3
 8004916:	f04f 0600 	mov.w	r6, #0
 800491a:	196b      	adds	r3, r5, r5
 800491c:	eb46 0406 	adc.w	r4, r6, r6
 8004920:	461a      	mov	r2, r3
 8004922:	4623      	mov	r3, r4
 8004924:	f7fc f9b8 	bl	8000c98 <__aeabi_uldivmod>
 8004928:	4603      	mov	r3, r0
 800492a:	460c      	mov	r4, r1
 800492c:	461a      	mov	r2, r3
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <UART_SetConfig+0x384>)
 8004930:	fba3 2302 	umull	r2, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	461d      	mov	r5, r3
 800493e:	f04f 0600 	mov.w	r6, #0
 8004942:	46a9      	mov	r9, r5
 8004944:	46b2      	mov	sl, r6
 8004946:	eb19 0309 	adds.w	r3, r9, r9
 800494a:	eb4a 040a 	adc.w	r4, sl, sl
 800494e:	4699      	mov	r9, r3
 8004950:	46a2      	mov	sl, r4
 8004952:	eb19 0905 	adds.w	r9, r9, r5
 8004956:	eb4a 0a06 	adc.w	sl, sl, r6
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004966:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800496a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800496e:	4689      	mov	r9, r1
 8004970:	4692      	mov	sl, r2
 8004972:	eb19 0005 	adds.w	r0, r9, r5
 8004976:	eb4a 0106 	adc.w	r1, sl, r6
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	461d      	mov	r5, r3
 8004980:	f04f 0600 	mov.w	r6, #0
 8004984:	196b      	adds	r3, r5, r5
 8004986:	eb46 0406 	adc.w	r4, r6, r6
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fc f983 	bl	8000c98 <__aeabi_uldivmod>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	461a      	mov	r2, r3
 8004998:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <UART_SetConfig+0x384>)
 800499a:	fba3 1302 	umull	r1, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2164      	movs	r1, #100	; 0x64
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <UART_SetConfig+0x384>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ba:	4498      	add	r8, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	461d      	mov	r5, r3
 80049c0:	f04f 0600 	mov.w	r6, #0
 80049c4:	46a9      	mov	r9, r5
 80049c6:	46b2      	mov	sl, r6
 80049c8:	eb19 0309 	adds.w	r3, r9, r9
 80049cc:	eb4a 040a 	adc.w	r4, sl, sl
 80049d0:	4699      	mov	r9, r3
 80049d2:	46a2      	mov	sl, r4
 80049d4:	eb19 0905 	adds.w	r9, r9, r5
 80049d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049f0:	4689      	mov	r9, r1
 80049f2:	4692      	mov	sl, r2
 80049f4:	eb19 0005 	adds.w	r0, r9, r5
 80049f8:	eb4a 0106 	adc.w	r1, sl, r6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	461d      	mov	r5, r3
 8004a02:	f04f 0600 	mov.w	r6, #0
 8004a06:	196b      	adds	r3, r5, r5
 8004a08:	eb46 0406 	adc.w	r4, r6, r6
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	f7fc f942 	bl	8000c98 <__aeabi_uldivmod>
 8004a14:	4603      	mov	r3, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <UART_SetConfig+0x384>)
 8004a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	2164      	movs	r1, #100	; 0x64
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	3332      	adds	r3, #50	; 0x32
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <UART_SetConfig+0x384>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	f003 0207 	and.w	r2, r3, #7
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4442      	add	r2, r8
 8004a40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a42:	e1b2      	b.n	8004daa <UART_SetConfig+0x6e2>
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4ad7      	ldr	r2, [pc, #860]	; (8004db4 <UART_SetConfig+0x6ec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d005      	beq.n	8004a66 <UART_SetConfig+0x39e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4ad6      	ldr	r2, [pc, #856]	; (8004db8 <UART_SetConfig+0x6f0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f040 80d1 	bne.w	8004c08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a66:	f7fe fe29 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004a6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	469a      	mov	sl, r3
 8004a70:	f04f 0b00 	mov.w	fp, #0
 8004a74:	46d0      	mov	r8, sl
 8004a76:	46d9      	mov	r9, fp
 8004a78:	eb18 0308 	adds.w	r3, r8, r8
 8004a7c:	eb49 0409 	adc.w	r4, r9, r9
 8004a80:	4698      	mov	r8, r3
 8004a82:	46a1      	mov	r9, r4
 8004a84:	eb18 080a 	adds.w	r8, r8, sl
 8004a88:	eb49 090b 	adc.w	r9, r9, fp
 8004a8c:	f04f 0100 	mov.w	r1, #0
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aa0:	4688      	mov	r8, r1
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	eb1a 0508 	adds.w	r5, sl, r8
 8004aa8:	eb4b 0609 	adc.w	r6, fp, r9
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	0094      	lsls	r4, r2, #2
 8004ac0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac4:	008b      	lsls	r3, r1, #2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4623      	mov	r3, r4
 8004aca:	4628      	mov	r0, r5
 8004acc:	4631      	mov	r1, r6
 8004ace:	f7fc f8e3 	bl	8000c98 <__aeabi_uldivmod>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4bb8      	ldr	r3, [pc, #736]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	469b      	mov	fp, r3
 8004ae8:	f04f 0c00 	mov.w	ip, #0
 8004aec:	46d9      	mov	r9, fp
 8004aee:	46e2      	mov	sl, ip
 8004af0:	eb19 0309 	adds.w	r3, r9, r9
 8004af4:	eb4a 040a 	adc.w	r4, sl, sl
 8004af8:	4699      	mov	r9, r3
 8004afa:	46a2      	mov	sl, r4
 8004afc:	eb19 090b 	adds.w	r9, r9, fp
 8004b00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b18:	4689      	mov	r9, r1
 8004b1a:	4692      	mov	sl, r2
 8004b1c:	eb1b 0509 	adds.w	r5, fp, r9
 8004b20:	eb4c 060a 	adc.w	r6, ip, sl
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	0094      	lsls	r4, r2, #2
 8004b38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b3c:	008b      	lsls	r3, r1, #2
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4623      	mov	r3, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	4631      	mov	r1, r6
 8004b46:	f7fc f8a7 	bl	8000c98 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b9a      	ldr	r3, [pc, #616]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a95      	ldr	r2, [pc, #596]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	4498      	add	r8, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	469b      	mov	fp, r3
 8004b76:	f04f 0c00 	mov.w	ip, #0
 8004b7a:	46d9      	mov	r9, fp
 8004b7c:	46e2      	mov	sl, ip
 8004b7e:	eb19 0309 	adds.w	r3, r9, r9
 8004b82:	eb4a 040a 	adc.w	r4, sl, sl
 8004b86:	4699      	mov	r9, r3
 8004b88:	46a2      	mov	sl, r4
 8004b8a:	eb19 090b 	adds.w	r9, r9, fp
 8004b8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	4692      	mov	sl, r2
 8004baa:	eb1b 0509 	adds.w	r5, fp, r9
 8004bae:	eb4c 060a 	adc.w	r6, ip, sl
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	0094      	lsls	r4, r2, #2
 8004bc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bca:	008b      	lsls	r3, r1, #2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	f7fc f860 	bl	8000c98 <__aeabi_uldivmod>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a72      	ldr	r2, [pc, #456]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4442      	add	r2, r8
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	e0d0      	b.n	8004daa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fd44 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	469a      	mov	sl, r3
 8004c12:	f04f 0b00 	mov.w	fp, #0
 8004c16:	46d0      	mov	r8, sl
 8004c18:	46d9      	mov	r9, fp
 8004c1a:	eb18 0308 	adds.w	r3, r8, r8
 8004c1e:	eb49 0409 	adc.w	r4, r9, r9
 8004c22:	4698      	mov	r8, r3
 8004c24:	46a1      	mov	r9, r4
 8004c26:	eb18 080a 	adds.w	r8, r8, sl
 8004c2a:	eb49 090b 	adc.w	r9, r9, fp
 8004c2e:	f04f 0100 	mov.w	r1, #0
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c42:	4688      	mov	r8, r1
 8004c44:	4691      	mov	r9, r2
 8004c46:	eb1a 0508 	adds.w	r5, sl, r8
 8004c4a:	eb4b 0609 	adc.w	r6, fp, r9
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4619      	mov	r1, r3
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	0094      	lsls	r4, r2, #2
 8004c62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	4631      	mov	r1, r6
 8004c70:	f7fc f812 	bl	8000c98 <__aeabi_uldivmod>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b50      	ldr	r3, [pc, #320]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	469b      	mov	fp, r3
 8004c8a:	f04f 0c00 	mov.w	ip, #0
 8004c8e:	46d9      	mov	r9, fp
 8004c90:	46e2      	mov	sl, ip
 8004c92:	eb19 0309 	adds.w	r3, r9, r9
 8004c96:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	46a2      	mov	sl, r4
 8004c9e:	eb19 090b 	adds.w	r9, r9, fp
 8004ca2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cba:	4689      	mov	r9, r1
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004cc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f04f 0400 	mov.w	r4, #0
 8004cd8:	0094      	lsls	r4, r2, #2
 8004cda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cde:	008b      	lsls	r3, r1, #2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	f7fb ffd6 	bl	8000c98 <__aeabi_uldivmod>
 8004cec:	4603      	mov	r3, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	; 0x32
 8004d06:	4a2d      	ldr	r2, [pc, #180]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d12:	4498      	add	r8, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	469b      	mov	fp, r3
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	46d9      	mov	r9, fp
 8004d1e:	46e2      	mov	sl, ip
 8004d20:	eb19 0309 	adds.w	r3, r9, r9
 8004d24:	eb4a 040a 	adc.w	r4, sl, sl
 8004d28:	4699      	mov	r9, r3
 8004d2a:	46a2      	mov	sl, r4
 8004d2c:	eb19 090b 	adds.w	r9, r9, fp
 8004d30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d48:	4689      	mov	r9, r1
 8004d4a:	4692      	mov	sl, r2
 8004d4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d50:	eb4c 060a 	adc.w	r6, ip, sl
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	0094      	lsls	r4, r2, #2
 8004d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d6c:	008b      	lsls	r3, r1, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4623      	mov	r3, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	4631      	mov	r1, r6
 8004d76:	f7fb ff8f 	bl	8000c98 <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d82:	fba3 1302 	umull	r1, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2164      	movs	r1, #100	; 0x64
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	; 0x32
 8004d94:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4442      	add	r2, r8
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	e7ff      	b.n	8004daa <UART_SetConfig+0x6e2>
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	40011000 	.word	0x40011000
 8004db8:	40011400 	.word	0x40011400
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <pow>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	ed2d 8b04 	vpush	{d8-d9}
 8004dc8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800509c <pow+0x2dc>
 8004dcc:	b08d      	sub	sp, #52	; 0x34
 8004dce:	ec57 6b10 	vmov	r6, r7, d0
 8004dd2:	ec55 4b11 	vmov	r4, r5, d1
 8004dd6:	f000 f963 	bl	80050a0 <__ieee754_pow>
 8004dda:	f999 3000 	ldrsb.w	r3, [r9]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	eeb0 8a40 	vmov.f32	s16, s0
 8004de6:	eef0 8a60 	vmov.f32	s17, s1
 8004dea:	46c8      	mov	r8, r9
 8004dec:	d05f      	beq.n	8004eae <pow+0xee>
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fea1 	bl	8000b3c <__aeabi_dcmpun>
 8004dfa:	4683      	mov	fp, r0
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d156      	bne.n	8004eae <pow+0xee>
 8004e00:	4632      	mov	r2, r6
 8004e02:	463b      	mov	r3, r7
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fe98 	bl	8000b3c <__aeabi_dcmpun>
 8004e0c:	9001      	str	r0, [sp, #4]
 8004e0e:	b1e8      	cbz	r0, 8004e4c <pow+0x8c>
 8004e10:	2200      	movs	r2, #0
 8004e12:	2300      	movs	r3, #0
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d046      	beq.n	8004eae <pow+0xee>
 8004e20:	2301      	movs	r3, #1
 8004e22:	9302      	str	r3, [sp, #8]
 8004e24:	4b96      	ldr	r3, [pc, #600]	; (8005080 <pow+0x2c0>)
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	4b96      	ldr	r3, [pc, #600]	; (8005084 <pow+0x2c4>)
 8004e2a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004e2e:	2200      	movs	r2, #0
 8004e30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e34:	9b00      	ldr	r3, [sp, #0]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e40:	d033      	beq.n	8004eaa <pow+0xea>
 8004e42:	a802      	add	r0, sp, #8
 8004e44:	f000 fefb 	bl	8005c3e <matherr>
 8004e48:	bb48      	cbnz	r0, 8004e9e <pow+0xde>
 8004e4a:	e05d      	b.n	8004f08 <pow+0x148>
 8004e4c:	f04f 0a00 	mov.w	sl, #0
 8004e50:	f04f 0b00 	mov.w	fp, #0
 8004e54:	4652      	mov	r2, sl
 8004e56:	465b      	mov	r3, fp
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb fe3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e60:	ec4b ab19 	vmov	d9, sl, fp
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d054      	beq.n	8004f12 <pow+0x152>
 8004e68:	4652      	mov	r2, sl
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e74:	4680      	mov	r8, r0
 8004e76:	b318      	cbz	r0, 8004ec0 <pow+0x100>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	9302      	str	r3, [sp, #8]
 8004e7c:	4b80      	ldr	r3, [pc, #512]	; (8005080 <pow+0x2c0>)
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	9b01      	ldr	r3, [sp, #4]
 8004e82:	930a      	str	r3, [sp, #40]	; 0x28
 8004e84:	9b00      	ldr	r3, [sp, #0]
 8004e86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0d5      	beq.n	8004e42 <pow+0x82>
 8004e96:	4b7b      	ldr	r3, [pc, #492]	; (8005084 <pow+0x2c4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea0:	b11b      	cbz	r3, 8004eaa <pow+0xea>
 8004ea2:	f000 ffe5 	bl	8005e70 <__errno>
 8004ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004eae:	eeb0 0a48 	vmov.f32	s0, s16
 8004eb2:	eef0 0a68 	vmov.f32	s1, s17
 8004eb6:	b00d      	add	sp, #52	; 0x34
 8004eb8:	ecbd 8b04 	vpop	{d8-d9}
 8004ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec0:	ec45 4b10 	vmov	d0, r4, r5
 8004ec4:	f000 feb3 	bl	8005c2e <finite>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d0f0      	beq.n	8004eae <pow+0xee>
 8004ecc:	4652      	mov	r2, sl
 8004ece:	465b      	mov	r3, fp
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7fb fe0a 	bl	8000aec <__aeabi_dcmplt>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d0e8      	beq.n	8004eae <pow+0xee>
 8004edc:	2301      	movs	r3, #1
 8004ede:	9302      	str	r3, [sp, #8]
 8004ee0:	4b67      	ldr	r3, [pc, #412]	; (8005080 <pow+0x2c0>)
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	f999 3000 	ldrsb.w	r3, [r9]
 8004ee8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004eec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ef0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004ef4:	b913      	cbnz	r3, 8004efc <pow+0x13c>
 8004ef6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004efa:	e7a2      	b.n	8004e42 <pow+0x82>
 8004efc:	4962      	ldr	r1, [pc, #392]	; (8005088 <pow+0x2c8>)
 8004efe:	2000      	movs	r0, #0
 8004f00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d19c      	bne.n	8004e42 <pow+0x82>
 8004f08:	f000 ffb2 	bl	8005e70 <__errno>
 8004f0c:	2321      	movs	r3, #33	; 0x21
 8004f0e:	6003      	str	r3, [r0, #0]
 8004f10:	e7c5      	b.n	8004e9e <pow+0xde>
 8004f12:	eeb0 0a48 	vmov.f32	s0, s16
 8004f16:	eef0 0a68 	vmov.f32	s1, s17
 8004f1a:	f000 fe88 	bl	8005c2e <finite>
 8004f1e:	9000      	str	r0, [sp, #0]
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f040 8081 	bne.w	8005028 <pow+0x268>
 8004f26:	ec47 6b10 	vmov	d0, r6, r7
 8004f2a:	f000 fe80 	bl	8005c2e <finite>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d07a      	beq.n	8005028 <pow+0x268>
 8004f32:	ec45 4b10 	vmov	d0, r4, r5
 8004f36:	f000 fe7a 	bl	8005c2e <finite>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d074      	beq.n	8005028 <pow+0x268>
 8004f3e:	ec53 2b18 	vmov	r2, r3, d8
 8004f42:	ee18 0a10 	vmov	r0, s16
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fb fdf8 	bl	8000b3c <__aeabi_dcmpun>
 8004f4c:	f999 9000 	ldrsb.w	r9, [r9]
 8004f50:	4b4b      	ldr	r3, [pc, #300]	; (8005080 <pow+0x2c0>)
 8004f52:	b1b0      	cbz	r0, 8004f82 <pow+0x1c2>
 8004f54:	2201      	movs	r2, #1
 8004f56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f5a:	9b00      	ldr	r3, [sp, #0]
 8004f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004f66:	f1b9 0f00 	cmp.w	r9, #0
 8004f6a:	d0c4      	beq.n	8004ef6 <pow+0x136>
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	465b      	mov	r3, fp
 8004f70:	4650      	mov	r0, sl
 8004f72:	4659      	mov	r1, fp
 8004f74:	f7fb fc72 	bl	800085c <__aeabi_ddiv>
 8004f78:	f1b9 0f02 	cmp.w	r9, #2
 8004f7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f80:	e7c1      	b.n	8004f06 <pow+0x146>
 8004f82:	2203      	movs	r2, #3
 8004f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f88:	900a      	str	r0, [sp, #40]	; 0x28
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <pow+0x2cc>)
 8004f92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004f96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f9a:	f7fb fb35 	bl	8000608 <__aeabi_dmul>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	f1b9 0f00 	cmp.w	r9, #0
 8004fa6:	d124      	bne.n	8004ff2 <pow+0x232>
 8004fa8:	4b39      	ldr	r3, [pc, #228]	; (8005090 <pow+0x2d0>)
 8004faa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4652      	mov	r2, sl
 8004fb6:	465b      	mov	r3, fp
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb fd97 	bl	8000aec <__aeabi_dcmplt>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d056      	beq.n	8005070 <pow+0x2b0>
 8004fc2:	ec45 4b10 	vmov	d0, r4, r5
 8004fc6:	f000 fe47 	bl	8005c58 <rint>
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	ec51 0b10 	vmov	r0, r1, d0
 8004fd2:	f7fb fd81 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd6:	b920      	cbnz	r0, 8004fe2 <pow+0x222>
 8004fd8:	4b2e      	ldr	r3, [pc, #184]	; (8005094 <pow+0x2d4>)
 8004fda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004fde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004fe2:	f998 3000 	ldrsb.w	r3, [r8]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d142      	bne.n	8005070 <pow+0x2b0>
 8004fea:	f000 ff41 	bl	8005e70 <__errno>
 8004fee:	2322      	movs	r3, #34	; 0x22
 8004ff0:	e78d      	b.n	8004f0e <pow+0x14e>
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <pow+0x2d8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	465b      	mov	r3, fp
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fd73 	bl	8000aec <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d0eb      	beq.n	8004fe2 <pow+0x222>
 800500a:	ec45 4b10 	vmov	d0, r4, r5
 800500e:	f000 fe23 	bl	8005c58 <rint>
 8005012:	4622      	mov	r2, r4
 8005014:	462b      	mov	r3, r5
 8005016:	ec51 0b10 	vmov	r0, r1, d0
 800501a:	f7fb fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800501e:	2800      	cmp	r0, #0
 8005020:	d1df      	bne.n	8004fe2 <pow+0x222>
 8005022:	2200      	movs	r2, #0
 8005024:	4b18      	ldr	r3, [pc, #96]	; (8005088 <pow+0x2c8>)
 8005026:	e7da      	b.n	8004fde <pow+0x21e>
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	ec51 0b18 	vmov	r0, r1, d8
 8005030:	f7fb fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005034:	2800      	cmp	r0, #0
 8005036:	f43f af3a 	beq.w	8004eae <pow+0xee>
 800503a:	ec47 6b10 	vmov	d0, r6, r7
 800503e:	f000 fdf6 	bl	8005c2e <finite>
 8005042:	2800      	cmp	r0, #0
 8005044:	f43f af33 	beq.w	8004eae <pow+0xee>
 8005048:	ec45 4b10 	vmov	d0, r4, r5
 800504c:	f000 fdef 	bl	8005c2e <finite>
 8005050:	2800      	cmp	r0, #0
 8005052:	f43f af2c 	beq.w	8004eae <pow+0xee>
 8005056:	2304      	movs	r3, #4
 8005058:	9302      	str	r3, [sp, #8]
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <pow+0x2c0>)
 800505c:	9303      	str	r3, [sp, #12]
 800505e:	2300      	movs	r3, #0
 8005060:	930a      	str	r3, [sp, #40]	; 0x28
 8005062:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005066:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800506a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800506e:	e7b8      	b.n	8004fe2 <pow+0x222>
 8005070:	a802      	add	r0, sp, #8
 8005072:	f000 fde4 	bl	8005c3e <matherr>
 8005076:	2800      	cmp	r0, #0
 8005078:	f47f af11 	bne.w	8004e9e <pow+0xde>
 800507c:	e7b5      	b.n	8004fea <pow+0x22a>
 800507e:	bf00      	nop
 8005080:	0800a37c 	.word	0x0800a37c
 8005084:	3ff00000 	.word	0x3ff00000
 8005088:	fff00000 	.word	0xfff00000
 800508c:	3fe00000 	.word	0x3fe00000
 8005090:	47efffff 	.word	0x47efffff
 8005094:	c7efffff 	.word	0xc7efffff
 8005098:	7ff00000 	.word	0x7ff00000
 800509c:	2000000d 	.word	0x2000000d

080050a0 <__ieee754_pow>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b091      	sub	sp, #68	; 0x44
 80050a6:	ed8d 1b00 	vstr	d1, [sp]
 80050aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80050ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80050b2:	ea58 0302 	orrs.w	r3, r8, r2
 80050b6:	ec57 6b10 	vmov	r6, r7, d0
 80050ba:	f000 84be 	beq.w	8005a3a <__ieee754_pow+0x99a>
 80050be:	4b7a      	ldr	r3, [pc, #488]	; (80052a8 <__ieee754_pow+0x208>)
 80050c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80050c4:	429c      	cmp	r4, r3
 80050c6:	463d      	mov	r5, r7
 80050c8:	ee10 aa10 	vmov	sl, s0
 80050cc:	dc09      	bgt.n	80050e2 <__ieee754_pow+0x42>
 80050ce:	d103      	bne.n	80050d8 <__ieee754_pow+0x38>
 80050d0:	b93e      	cbnz	r6, 80050e2 <__ieee754_pow+0x42>
 80050d2:	45a0      	cmp	r8, r4
 80050d4:	dc0d      	bgt.n	80050f2 <__ieee754_pow+0x52>
 80050d6:	e001      	b.n	80050dc <__ieee754_pow+0x3c>
 80050d8:	4598      	cmp	r8, r3
 80050da:	dc02      	bgt.n	80050e2 <__ieee754_pow+0x42>
 80050dc:	4598      	cmp	r8, r3
 80050de:	d10e      	bne.n	80050fe <__ieee754_pow+0x5e>
 80050e0:	b16a      	cbz	r2, 80050fe <__ieee754_pow+0x5e>
 80050e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050ea:	ea54 030a 	orrs.w	r3, r4, sl
 80050ee:	f000 84a4 	beq.w	8005a3a <__ieee754_pow+0x99a>
 80050f2:	486e      	ldr	r0, [pc, #440]	; (80052ac <__ieee754_pow+0x20c>)
 80050f4:	b011      	add	sp, #68	; 0x44
 80050f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f000 bda5 	b.w	8005c48 <nan>
 80050fe:	2d00      	cmp	r5, #0
 8005100:	da53      	bge.n	80051aa <__ieee754_pow+0x10a>
 8005102:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <__ieee754_pow+0x210>)
 8005104:	4598      	cmp	r8, r3
 8005106:	dc4d      	bgt.n	80051a4 <__ieee754_pow+0x104>
 8005108:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800510c:	4598      	cmp	r8, r3
 800510e:	dd4c      	ble.n	80051aa <__ieee754_pow+0x10a>
 8005110:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005114:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005118:	2b14      	cmp	r3, #20
 800511a:	dd26      	ble.n	800516a <__ieee754_pow+0xca>
 800511c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005120:	fa22 f103 	lsr.w	r1, r2, r3
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	4293      	cmp	r3, r2
 800512a:	d13e      	bne.n	80051aa <__ieee754_pow+0x10a>
 800512c:	f001 0101 	and.w	r1, r1, #1
 8005130:	f1c1 0b02 	rsb	fp, r1, #2
 8005134:	2a00      	cmp	r2, #0
 8005136:	d15b      	bne.n	80051f0 <__ieee754_pow+0x150>
 8005138:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <__ieee754_pow+0x208>)
 800513a:	4598      	cmp	r8, r3
 800513c:	d124      	bne.n	8005188 <__ieee754_pow+0xe8>
 800513e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005142:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005146:	ea53 030a 	orrs.w	r3, r3, sl
 800514a:	f000 8476 	beq.w	8005a3a <__ieee754_pow+0x99a>
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <__ieee754_pow+0x214>)
 8005150:	429c      	cmp	r4, r3
 8005152:	dd2d      	ble.n	80051b0 <__ieee754_pow+0x110>
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	f280 8473 	bge.w	8005a42 <__ieee754_pow+0x9a2>
 800515c:	2000      	movs	r0, #0
 800515e:	2100      	movs	r1, #0
 8005160:	ec41 0b10 	vmov	d0, r0, r1
 8005164:	b011      	add	sp, #68	; 0x44
 8005166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516a:	2a00      	cmp	r2, #0
 800516c:	d13e      	bne.n	80051ec <__ieee754_pow+0x14c>
 800516e:	f1c3 0314 	rsb	r3, r3, #20
 8005172:	fa48 f103 	asr.w	r1, r8, r3
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	4543      	cmp	r3, r8
 800517c:	f040 8469 	bne.w	8005a52 <__ieee754_pow+0x9b2>
 8005180:	f001 0101 	and.w	r1, r1, #1
 8005184:	f1c1 0b02 	rsb	fp, r1, #2
 8005188:	4b4b      	ldr	r3, [pc, #300]	; (80052b8 <__ieee754_pow+0x218>)
 800518a:	4598      	cmp	r8, r3
 800518c:	d118      	bne.n	80051c0 <__ieee754_pow+0x120>
 800518e:	f1b9 0f00 	cmp.w	r9, #0
 8005192:	f280 845a 	bge.w	8005a4a <__ieee754_pow+0x9aa>
 8005196:	4948      	ldr	r1, [pc, #288]	; (80052b8 <__ieee754_pow+0x218>)
 8005198:	4632      	mov	r2, r6
 800519a:	463b      	mov	r3, r7
 800519c:	2000      	movs	r0, #0
 800519e:	f7fb fb5d 	bl	800085c <__aeabi_ddiv>
 80051a2:	e7dd      	b.n	8005160 <__ieee754_pow+0xc0>
 80051a4:	f04f 0b02 	mov.w	fp, #2
 80051a8:	e7c4      	b.n	8005134 <__ieee754_pow+0x94>
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	e7c1      	b.n	8005134 <__ieee754_pow+0x94>
 80051b0:	f1b9 0f00 	cmp.w	r9, #0
 80051b4:	dad2      	bge.n	800515c <__ieee754_pow+0xbc>
 80051b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80051ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051be:	e7cf      	b.n	8005160 <__ieee754_pow+0xc0>
 80051c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80051c4:	d106      	bne.n	80051d4 <__ieee754_pow+0x134>
 80051c6:	4632      	mov	r2, r6
 80051c8:	463b      	mov	r3, r7
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	f7fb fa1b 	bl	8000608 <__aeabi_dmul>
 80051d2:	e7c5      	b.n	8005160 <__ieee754_pow+0xc0>
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <__ieee754_pow+0x21c>)
 80051d6:	4599      	cmp	r9, r3
 80051d8:	d10a      	bne.n	80051f0 <__ieee754_pow+0x150>
 80051da:	2d00      	cmp	r5, #0
 80051dc:	db08      	blt.n	80051f0 <__ieee754_pow+0x150>
 80051de:	ec47 6b10 	vmov	d0, r6, r7
 80051e2:	b011      	add	sp, #68	; 0x44
 80051e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	f000 bc68 	b.w	8005abc <__ieee754_sqrt>
 80051ec:	f04f 0b00 	mov.w	fp, #0
 80051f0:	ec47 6b10 	vmov	d0, r6, r7
 80051f4:	f000 fd12 	bl	8005c1c <fabs>
 80051f8:	ec51 0b10 	vmov	r0, r1, d0
 80051fc:	f1ba 0f00 	cmp.w	sl, #0
 8005200:	d127      	bne.n	8005252 <__ieee754_pow+0x1b2>
 8005202:	b124      	cbz	r4, 800520e <__ieee754_pow+0x16e>
 8005204:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <__ieee754_pow+0x218>)
 8005206:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800520a:	429a      	cmp	r2, r3
 800520c:	d121      	bne.n	8005252 <__ieee754_pow+0x1b2>
 800520e:	f1b9 0f00 	cmp.w	r9, #0
 8005212:	da05      	bge.n	8005220 <__ieee754_pow+0x180>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	2000      	movs	r0, #0
 800521a:	4927      	ldr	r1, [pc, #156]	; (80052b8 <__ieee754_pow+0x218>)
 800521c:	f7fb fb1e 	bl	800085c <__aeabi_ddiv>
 8005220:	2d00      	cmp	r5, #0
 8005222:	da9d      	bge.n	8005160 <__ieee754_pow+0xc0>
 8005224:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005228:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800522c:	ea54 030b 	orrs.w	r3, r4, fp
 8005230:	d108      	bne.n	8005244 <__ieee754_pow+0x1a4>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	f7fb f82d 	bl	8000298 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e7ac      	b.n	800519e <__ieee754_pow+0xfe>
 8005244:	f1bb 0f01 	cmp.w	fp, #1
 8005248:	d18a      	bne.n	8005160 <__ieee754_pow+0xc0>
 800524a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800524e:	4619      	mov	r1, r3
 8005250:	e786      	b.n	8005160 <__ieee754_pow+0xc0>
 8005252:	0fed      	lsrs	r5, r5, #31
 8005254:	1e6b      	subs	r3, r5, #1
 8005256:	930d      	str	r3, [sp, #52]	; 0x34
 8005258:	ea5b 0303 	orrs.w	r3, fp, r3
 800525c:	d102      	bne.n	8005264 <__ieee754_pow+0x1c4>
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	e7e8      	b.n	8005236 <__ieee754_pow+0x196>
 8005264:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <__ieee754_pow+0x220>)
 8005266:	4598      	cmp	r8, r3
 8005268:	f340 80fe 	ble.w	8005468 <__ieee754_pow+0x3c8>
 800526c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005270:	4598      	cmp	r8, r3
 8005272:	dd0a      	ble.n	800528a <__ieee754_pow+0x1ea>
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <__ieee754_pow+0x214>)
 8005276:	429c      	cmp	r4, r3
 8005278:	dc0d      	bgt.n	8005296 <__ieee754_pow+0x1f6>
 800527a:	f1b9 0f00 	cmp.w	r9, #0
 800527e:	f6bf af6d 	bge.w	800515c <__ieee754_pow+0xbc>
 8005282:	a307      	add	r3, pc, #28	; (adr r3, 80052a0 <__ieee754_pow+0x200>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	e79f      	b.n	80051ca <__ieee754_pow+0x12a>
 800528a:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <__ieee754_pow+0x224>)
 800528c:	429c      	cmp	r4, r3
 800528e:	ddf4      	ble.n	800527a <__ieee754_pow+0x1da>
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <__ieee754_pow+0x218>)
 8005292:	429c      	cmp	r4, r3
 8005294:	dd18      	ble.n	80052c8 <__ieee754_pow+0x228>
 8005296:	f1b9 0f00 	cmp.w	r9, #0
 800529a:	dcf2      	bgt.n	8005282 <__ieee754_pow+0x1e2>
 800529c:	e75e      	b.n	800515c <__ieee754_pow+0xbc>
 800529e:	bf00      	nop
 80052a0:	8800759c 	.word	0x8800759c
 80052a4:	7e37e43c 	.word	0x7e37e43c
 80052a8:	7ff00000 	.word	0x7ff00000
 80052ac:	0800a5d1 	.word	0x0800a5d1
 80052b0:	433fffff 	.word	0x433fffff
 80052b4:	3fefffff 	.word	0x3fefffff
 80052b8:	3ff00000 	.word	0x3ff00000
 80052bc:	3fe00000 	.word	0x3fe00000
 80052c0:	41e00000 	.word	0x41e00000
 80052c4:	3feffffe 	.word	0x3feffffe
 80052c8:	2200      	movs	r2, #0
 80052ca:	4b63      	ldr	r3, [pc, #396]	; (8005458 <__ieee754_pow+0x3b8>)
 80052cc:	f7fa ffe4 	bl	8000298 <__aeabi_dsub>
 80052d0:	a355      	add	r3, pc, #340	; (adr r3, 8005428 <__ieee754_pow+0x388>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	4604      	mov	r4, r0
 80052d8:	460d      	mov	r5, r1
 80052da:	f7fb f995 	bl	8000608 <__aeabi_dmul>
 80052de:	a354      	add	r3, pc, #336	; (adr r3, 8005430 <__ieee754_pow+0x390>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fb f98c 	bl	8000608 <__aeabi_dmul>
 80052f0:	2200      	movs	r2, #0
 80052f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f6:	4b59      	ldr	r3, [pc, #356]	; (800545c <__ieee754_pow+0x3bc>)
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f7fb f984 	bl	8000608 <__aeabi_dmul>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	a14c      	add	r1, pc, #304	; (adr r1, 8005438 <__ieee754_pow+0x398>)
 8005306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530a:	f7fa ffc5 	bl	8000298 <__aeabi_dsub>
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	f7fb f979 	bl	8000608 <__aeabi_dmul>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	2000      	movs	r0, #0
 800531c:	4950      	ldr	r1, [pc, #320]	; (8005460 <__ieee754_pow+0x3c0>)
 800531e:	f7fa ffbb 	bl	8000298 <__aeabi_dsub>
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	4620      	mov	r0, r4
 800532c:	4629      	mov	r1, r5
 800532e:	f7fb f96b 	bl	8000608 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f7fb f965 	bl	8000608 <__aeabi_dmul>
 800533e:	a340      	add	r3, pc, #256	; (adr r3, 8005440 <__ieee754_pow+0x3a0>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fb f960 	bl	8000608 <__aeabi_dmul>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005350:	f7fa ffa2 	bl	8000298 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4604      	mov	r4, r0
 800535a:	460d      	mov	r5, r1
 800535c:	4630      	mov	r0, r6
 800535e:	4639      	mov	r1, r7
 8005360:	f7fa ff9c 	bl	800029c <__adddf3>
 8005364:	2000      	movs	r0, #0
 8005366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800536a:	4632      	mov	r2, r6
 800536c:	463b      	mov	r3, r7
 800536e:	f7fa ff93 	bl	8000298 <__aeabi_dsub>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4620      	mov	r0, r4
 8005378:	4629      	mov	r1, r5
 800537a:	f7fa ff8d 	bl	8000298 <__aeabi_dsub>
 800537e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005380:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005384:	4313      	orrs	r3, r2
 8005386:	4606      	mov	r6, r0
 8005388:	460f      	mov	r7, r1
 800538a:	f040 81eb 	bne.w	8005764 <__ieee754_pow+0x6c4>
 800538e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005448 <__ieee754_pow+0x3a8>
 8005392:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005396:	2400      	movs	r4, #0
 8005398:	4622      	mov	r2, r4
 800539a:	462b      	mov	r3, r5
 800539c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053a4:	f7fa ff78 	bl	8000298 <__aeabi_dsub>
 80053a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ac:	f7fb f92c 	bl	8000608 <__aeabi_dmul>
 80053b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053b4:	4680      	mov	r8, r0
 80053b6:	4689      	mov	r9, r1
 80053b8:	4630      	mov	r0, r6
 80053ba:	4639      	mov	r1, r7
 80053bc:	f7fb f924 	bl	8000608 <__aeabi_dmul>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fa ff68 	bl	800029c <__adddf3>
 80053cc:	4622      	mov	r2, r4
 80053ce:	462b      	mov	r3, r5
 80053d0:	4680      	mov	r8, r0
 80053d2:	4689      	mov	r9, r1
 80053d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d8:	f7fb f916 	bl	8000608 <__aeabi_dmul>
 80053dc:	460b      	mov	r3, r1
 80053de:	4604      	mov	r4, r0
 80053e0:	460d      	mov	r5, r1
 80053e2:	4602      	mov	r2, r0
 80053e4:	4649      	mov	r1, r9
 80053e6:	4640      	mov	r0, r8
 80053e8:	e9cd 4500 	strd	r4, r5, [sp]
 80053ec:	f7fa ff56 	bl	800029c <__adddf3>
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <__ieee754_pow+0x3c4>)
 80053f2:	4299      	cmp	r1, r3
 80053f4:	4606      	mov	r6, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	468b      	mov	fp, r1
 80053fa:	f340 82f7 	ble.w	80059ec <__ieee754_pow+0x94c>
 80053fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005402:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005406:	4303      	orrs	r3, r0
 8005408:	f000 81ea 	beq.w	80057e0 <__ieee754_pow+0x740>
 800540c:	a310      	add	r3, pc, #64	; (adr r3, 8005450 <__ieee754_pow+0x3b0>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005416:	f7fb f8f7 	bl	8000608 <__aeabi_dmul>
 800541a:	a30d      	add	r3, pc, #52	; (adr r3, 8005450 <__ieee754_pow+0x3b0>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	e6d5      	b.n	80051ce <__ieee754_pow+0x12e>
 8005422:	bf00      	nop
 8005424:	f3af 8000 	nop.w
 8005428:	60000000 	.word	0x60000000
 800542c:	3ff71547 	.word	0x3ff71547
 8005430:	f85ddf44 	.word	0xf85ddf44
 8005434:	3e54ae0b 	.word	0x3e54ae0b
 8005438:	55555555 	.word	0x55555555
 800543c:	3fd55555 	.word	0x3fd55555
 8005440:	652b82fe 	.word	0x652b82fe
 8005444:	3ff71547 	.word	0x3ff71547
 8005448:	00000000 	.word	0x00000000
 800544c:	bff00000 	.word	0xbff00000
 8005450:	8800759c 	.word	0x8800759c
 8005454:	7e37e43c 	.word	0x7e37e43c
 8005458:	3ff00000 	.word	0x3ff00000
 800545c:	3fd00000 	.word	0x3fd00000
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	408fffff 	.word	0x408fffff
 8005468:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	da05      	bge.n	800547e <__ieee754_pow+0x3de>
 8005472:	4bd3      	ldr	r3, [pc, #844]	; (80057c0 <__ieee754_pow+0x720>)
 8005474:	f7fb f8c8 	bl	8000608 <__aeabi_dmul>
 8005478:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800547c:	460c      	mov	r4, r1
 800547e:	1523      	asrs	r3, r4, #20
 8005480:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005484:	4413      	add	r3, r2
 8005486:	9309      	str	r3, [sp, #36]	; 0x24
 8005488:	4bce      	ldr	r3, [pc, #824]	; (80057c4 <__ieee754_pow+0x724>)
 800548a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800548e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005492:	429c      	cmp	r4, r3
 8005494:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005498:	dd08      	ble.n	80054ac <__ieee754_pow+0x40c>
 800549a:	4bcb      	ldr	r3, [pc, #812]	; (80057c8 <__ieee754_pow+0x728>)
 800549c:	429c      	cmp	r4, r3
 800549e:	f340 815e 	ble.w	800575e <__ieee754_pow+0x6be>
 80054a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a4:	3301      	adds	r3, #1
 80054a6:	9309      	str	r3, [sp, #36]	; 0x24
 80054a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054ac:	f04f 0a00 	mov.w	sl, #0
 80054b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80054b4:	930c      	str	r3, [sp, #48]	; 0x30
 80054b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054b8:	4bc4      	ldr	r3, [pc, #784]	; (80057cc <__ieee754_pow+0x72c>)
 80054ba:	4413      	add	r3, r2
 80054bc:	ed93 7b00 	vldr	d7, [r3]
 80054c0:	4629      	mov	r1, r5
 80054c2:	ec53 2b17 	vmov	r2, r3, d7
 80054c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80054ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054ce:	f7fa fee3 	bl	8000298 <__aeabi_dsub>
 80054d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054de:	f7fa fedd 	bl	800029c <__adddf3>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	2000      	movs	r0, #0
 80054e8:	49b9      	ldr	r1, [pc, #740]	; (80057d0 <__ieee754_pow+0x730>)
 80054ea:	f7fb f9b7 	bl	800085c <__aeabi_ddiv>
 80054ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	f7fb f885 	bl	8000608 <__aeabi_dmul>
 80054fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005502:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800550a:	2300      	movs	r3, #0
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005512:	106d      	asrs	r5, r5, #1
 8005514:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005518:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800551c:	2200      	movs	r2, #0
 800551e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	4614      	mov	r4, r2
 8005528:	461d      	mov	r5, r3
 800552a:	f7fb f86d 	bl	8000608 <__aeabi_dmul>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fa feaf 	bl	8000298 <__aeabi_dsub>
 800553a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800553e:	4606      	mov	r6, r0
 8005540:	460f      	mov	r7, r1
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fa fea7 	bl	8000298 <__aeabi_dsub>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005552:	f7fa fea1 	bl	8000298 <__aeabi_dsub>
 8005556:	4642      	mov	r2, r8
 8005558:	464b      	mov	r3, r9
 800555a:	f7fb f855 	bl	8000608 <__aeabi_dmul>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	f7fa fe97 	bl	8000298 <__aeabi_dsub>
 800556a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800556e:	f7fb f84b 	bl	8000608 <__aeabi_dmul>
 8005572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb f843 	bl	8000608 <__aeabi_dmul>
 8005582:	a37b      	add	r3, pc, #492	; (adr r3, 8005770 <__ieee754_pow+0x6d0>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	4604      	mov	r4, r0
 800558a:	460d      	mov	r5, r1
 800558c:	f7fb f83c 	bl	8000608 <__aeabi_dmul>
 8005590:	a379      	add	r3, pc, #484	; (adr r3, 8005778 <__ieee754_pow+0x6d8>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fa fe81 	bl	800029c <__adddf3>
 800559a:	4622      	mov	r2, r4
 800559c:	462b      	mov	r3, r5
 800559e:	f7fb f833 	bl	8000608 <__aeabi_dmul>
 80055a2:	a377      	add	r3, pc, #476	; (adr r3, 8005780 <__ieee754_pow+0x6e0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fa fe78 	bl	800029c <__adddf3>
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	f7fb f82a 	bl	8000608 <__aeabi_dmul>
 80055b4:	a374      	add	r3, pc, #464	; (adr r3, 8005788 <__ieee754_pow+0x6e8>)
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f7fa fe6f 	bl	800029c <__adddf3>
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f7fb f821 	bl	8000608 <__aeabi_dmul>
 80055c6:	a372      	add	r3, pc, #456	; (adr r3, 8005790 <__ieee754_pow+0x6f0>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fa fe66 	bl	800029c <__adddf3>
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	f7fb f818 	bl	8000608 <__aeabi_dmul>
 80055d8:	a36f      	add	r3, pc, #444	; (adr r3, 8005798 <__ieee754_pow+0x6f8>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa fe5d 	bl	800029c <__adddf3>
 80055e2:	4622      	mov	r2, r4
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	462b      	mov	r3, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7fb f80b 	bl	8000608 <__aeabi_dmul>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4630      	mov	r0, r6
 80055f8:	4639      	mov	r1, r7
 80055fa:	f7fb f805 	bl	8000608 <__aeabi_dmul>
 80055fe:	4642      	mov	r2, r8
 8005600:	4604      	mov	r4, r0
 8005602:	460d      	mov	r5, r1
 8005604:	464b      	mov	r3, r9
 8005606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560a:	f7fa fe47 	bl	800029c <__adddf3>
 800560e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005612:	f7fa fff9 	bl	8000608 <__aeabi_dmul>
 8005616:	4622      	mov	r2, r4
 8005618:	462b      	mov	r3, r5
 800561a:	f7fa fe3f 	bl	800029c <__adddf3>
 800561e:	4642      	mov	r2, r8
 8005620:	4606      	mov	r6, r0
 8005622:	460f      	mov	r7, r1
 8005624:	464b      	mov	r3, r9
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa ffed 	bl	8000608 <__aeabi_dmul>
 800562e:	2200      	movs	r2, #0
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <__ieee754_pow+0x734>)
 8005632:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005636:	f7fa fe31 	bl	800029c <__adddf3>
 800563a:	4632      	mov	r2, r6
 800563c:	463b      	mov	r3, r7
 800563e:	f7fa fe2d 	bl	800029c <__adddf3>
 8005642:	9802      	ldr	r0, [sp, #8]
 8005644:	460d      	mov	r5, r1
 8005646:	4604      	mov	r4, r0
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fa ffda 	bl	8000608 <__aeabi_dmul>
 8005654:	2200      	movs	r2, #0
 8005656:	4680      	mov	r8, r0
 8005658:	4689      	mov	r9, r1
 800565a:	4b5e      	ldr	r3, [pc, #376]	; (80057d4 <__ieee754_pow+0x734>)
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	f7fa fe1a 	bl	8000298 <__aeabi_dsub>
 8005664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005668:	f7fa fe16 	bl	8000298 <__aeabi_dsub>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fe10 	bl	8000298 <__aeabi_dsub>
 8005678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567c:	f7fa ffc4 	bl	8000608 <__aeabi_dmul>
 8005680:	4622      	mov	r2, r4
 8005682:	4606      	mov	r6, r0
 8005684:	460f      	mov	r7, r1
 8005686:	462b      	mov	r3, r5
 8005688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800568c:	f7fa ffbc 	bl	8000608 <__aeabi_dmul>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4630      	mov	r0, r6
 8005696:	4639      	mov	r1, r7
 8005698:	f7fa fe00 	bl	800029c <__adddf3>
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fdf8 	bl	800029c <__adddf3>
 80056ac:	9802      	ldr	r0, [sp, #8]
 80056ae:	a33c      	add	r3, pc, #240	; (adr r3, 80057a0 <__ieee754_pow+0x700>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f7fa ffa6 	bl	8000608 <__aeabi_dmul>
 80056bc:	4642      	mov	r2, r8
 80056be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056c2:	464b      	mov	r3, r9
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa fde6 	bl	8000298 <__aeabi_dsub>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fa fde0 	bl	8000298 <__aeabi_dsub>
 80056d8:	a333      	add	r3, pc, #204	; (adr r3, 80057a8 <__ieee754_pow+0x708>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fa ff93 	bl	8000608 <__aeabi_dmul>
 80056e2:	a333      	add	r3, pc, #204	; (adr r3, 80057b0 <__ieee754_pow+0x710>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	4606      	mov	r6, r0
 80056ea:	460f      	mov	r7, r1
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa ff8a 	bl	8000608 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fa fdce 	bl	800029c <__adddf3>
 8005700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005702:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <__ieee754_pow+0x738>)
 8005704:	4413      	add	r3, r2
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fdc7 	bl	800029c <__adddf3>
 800570e:	4604      	mov	r4, r0
 8005710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005712:	460d      	mov	r5, r1
 8005714:	f7fa ff0e 	bl	8000534 <__aeabi_i2d>
 8005718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800571a:	4b30      	ldr	r3, [pc, #192]	; (80057dc <__ieee754_pow+0x73c>)
 800571c:	4413      	add	r3, r2
 800571e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005722:	4606      	mov	r6, r0
 8005724:	460f      	mov	r7, r1
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800572e:	f7fa fdb5 	bl	800029c <__adddf3>
 8005732:	4642      	mov	r2, r8
 8005734:	464b      	mov	r3, r9
 8005736:	f7fa fdb1 	bl	800029c <__adddf3>
 800573a:	4632      	mov	r2, r6
 800573c:	463b      	mov	r3, r7
 800573e:	f7fa fdad 	bl	800029c <__adddf3>
 8005742:	9802      	ldr	r0, [sp, #8]
 8005744:	4632      	mov	r2, r6
 8005746:	463b      	mov	r3, r7
 8005748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574c:	f7fa fda4 	bl	8000298 <__aeabi_dsub>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	f7fa fda0 	bl	8000298 <__aeabi_dsub>
 8005758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575c:	e607      	b.n	800536e <__ieee754_pow+0x2ce>
 800575e:	f04f 0a01 	mov.w	sl, #1
 8005762:	e6a5      	b.n	80054b0 <__ieee754_pow+0x410>
 8005764:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80057b8 <__ieee754_pow+0x718>
 8005768:	e613      	b.n	8005392 <__ieee754_pow+0x2f2>
 800576a:	bf00      	nop
 800576c:	f3af 8000 	nop.w
 8005770:	4a454eef 	.word	0x4a454eef
 8005774:	3fca7e28 	.word	0x3fca7e28
 8005778:	93c9db65 	.word	0x93c9db65
 800577c:	3fcd864a 	.word	0x3fcd864a
 8005780:	a91d4101 	.word	0xa91d4101
 8005784:	3fd17460 	.word	0x3fd17460
 8005788:	518f264d 	.word	0x518f264d
 800578c:	3fd55555 	.word	0x3fd55555
 8005790:	db6fabff 	.word	0xdb6fabff
 8005794:	3fdb6db6 	.word	0x3fdb6db6
 8005798:	33333303 	.word	0x33333303
 800579c:	3fe33333 	.word	0x3fe33333
 80057a0:	e0000000 	.word	0xe0000000
 80057a4:	3feec709 	.word	0x3feec709
 80057a8:	dc3a03fd 	.word	0xdc3a03fd
 80057ac:	3feec709 	.word	0x3feec709
 80057b0:	145b01f5 	.word	0x145b01f5
 80057b4:	be3e2fe0 	.word	0xbe3e2fe0
 80057b8:	00000000 	.word	0x00000000
 80057bc:	3ff00000 	.word	0x3ff00000
 80057c0:	43400000 	.word	0x43400000
 80057c4:	0003988e 	.word	0x0003988e
 80057c8:	000bb679 	.word	0x000bb679
 80057cc:	0800a380 	.word	0x0800a380
 80057d0:	3ff00000 	.word	0x3ff00000
 80057d4:	40080000 	.word	0x40080000
 80057d8:	0800a3a0 	.word	0x0800a3a0
 80057dc:	0800a390 	.word	0x0800a390
 80057e0:	a3b4      	add	r3, pc, #720	; (adr r3, 8005ab4 <__ieee754_pow+0xa14>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fa fd57 	bl	800029c <__adddf3>
 80057ee:	4622      	mov	r2, r4
 80057f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f4:	462b      	mov	r3, r5
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fa fd4d 	bl	8000298 <__aeabi_dsub>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005806:	f7fb f98f 	bl	8000b28 <__aeabi_dcmpgt>
 800580a:	2800      	cmp	r0, #0
 800580c:	f47f adfe 	bne.w	800540c <__ieee754_pow+0x36c>
 8005810:	4aa3      	ldr	r2, [pc, #652]	; (8005aa0 <__ieee754_pow+0xa00>)
 8005812:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005816:	4293      	cmp	r3, r2
 8005818:	f340 810a 	ble.w	8005a30 <__ieee754_pow+0x990>
 800581c:	151b      	asrs	r3, r3, #20
 800581e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005822:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005826:	fa4a f303 	asr.w	r3, sl, r3
 800582a:	445b      	add	r3, fp
 800582c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005830:	4e9c      	ldr	r6, [pc, #624]	; (8005aa4 <__ieee754_pow+0xa04>)
 8005832:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005836:	4116      	asrs	r6, r2
 8005838:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800583c:	2000      	movs	r0, #0
 800583e:	ea23 0106 	bic.w	r1, r3, r6
 8005842:	f1c2 0214 	rsb	r2, r2, #20
 8005846:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800584a:	fa4a fa02 	asr.w	sl, sl, r2
 800584e:	f1bb 0f00 	cmp.w	fp, #0
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	bfb8      	it	lt
 800585c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005860:	f7fa fd1a 	bl	8000298 <__aeabi_dsub>
 8005864:	e9cd 0100 	strd	r0, r1, [sp]
 8005868:	4642      	mov	r2, r8
 800586a:	464b      	mov	r3, r9
 800586c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005870:	f7fa fd14 	bl	800029c <__adddf3>
 8005874:	2000      	movs	r0, #0
 8005876:	a378      	add	r3, pc, #480	; (adr r3, 8005a58 <__ieee754_pow+0x9b8>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	f7fa fec2 	bl	8000608 <__aeabi_dmul>
 8005884:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005888:	4606      	mov	r6, r0
 800588a:	460f      	mov	r7, r1
 800588c:	4620      	mov	r0, r4
 800588e:	4629      	mov	r1, r5
 8005890:	f7fa fd02 	bl	8000298 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fa fcfc 	bl	8000298 <__aeabi_dsub>
 80058a0:	a36f      	add	r3, pc, #444	; (adr r3, 8005a60 <__ieee754_pow+0x9c0>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa feaf 	bl	8000608 <__aeabi_dmul>
 80058aa:	a36f      	add	r3, pc, #444	; (adr r3, 8005a68 <__ieee754_pow+0x9c8>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	4680      	mov	r8, r0
 80058b2:	4689      	mov	r9, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fea6 	bl	8000608 <__aeabi_dmul>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	f7fa fcea 	bl	800029c <__adddf3>
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fa fce2 	bl	800029c <__adddf3>
 80058d8:	4632      	mov	r2, r6
 80058da:	463b      	mov	r3, r7
 80058dc:	4680      	mov	r8, r0
 80058de:	4689      	mov	r9, r1
 80058e0:	f7fa fcda 	bl	8000298 <__aeabi_dsub>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4620      	mov	r0, r4
 80058ea:	4629      	mov	r1, r5
 80058ec:	f7fa fcd4 	bl	8000298 <__aeabi_dsub>
 80058f0:	4642      	mov	r2, r8
 80058f2:	4606      	mov	r6, r0
 80058f4:	460f      	mov	r7, r1
 80058f6:	464b      	mov	r3, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	4649      	mov	r1, r9
 80058fc:	f7fa fe84 	bl	8000608 <__aeabi_dmul>
 8005900:	a35b      	add	r3, pc, #364	; (adr r3, 8005a70 <__ieee754_pow+0x9d0>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	4604      	mov	r4, r0
 8005908:	460d      	mov	r5, r1
 800590a:	f7fa fe7d 	bl	8000608 <__aeabi_dmul>
 800590e:	a35a      	add	r3, pc, #360	; (adr r3, 8005a78 <__ieee754_pow+0x9d8>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fcc0 	bl	8000298 <__aeabi_dsub>
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	f7fa fe74 	bl	8000608 <__aeabi_dmul>
 8005920:	a357      	add	r3, pc, #348	; (adr r3, 8005a80 <__ieee754_pow+0x9e0>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fa fcb9 	bl	800029c <__adddf3>
 800592a:	4622      	mov	r2, r4
 800592c:	462b      	mov	r3, r5
 800592e:	f7fa fe6b 	bl	8000608 <__aeabi_dmul>
 8005932:	a355      	add	r3, pc, #340	; (adr r3, 8005a88 <__ieee754_pow+0x9e8>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fcae 	bl	8000298 <__aeabi_dsub>
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	f7fa fe62 	bl	8000608 <__aeabi_dmul>
 8005944:	a352      	add	r3, pc, #328	; (adr r3, 8005a90 <__ieee754_pow+0x9f0>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fa fca7 	bl	800029c <__adddf3>
 800594e:	4622      	mov	r2, r4
 8005950:	462b      	mov	r3, r5
 8005952:	f7fa fe59 	bl	8000608 <__aeabi_dmul>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4640      	mov	r0, r8
 800595c:	4649      	mov	r1, r9
 800595e:	f7fa fc9b 	bl	8000298 <__aeabi_dsub>
 8005962:	4604      	mov	r4, r0
 8005964:	460d      	mov	r5, r1
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fa fe4b 	bl	8000608 <__aeabi_dmul>
 8005972:	2200      	movs	r2, #0
 8005974:	e9cd 0100 	strd	r0, r1, [sp]
 8005978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fc8a 	bl	8000298 <__aeabi_dsub>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800598c:	f7fa ff66 	bl	800085c <__aeabi_ddiv>
 8005990:	4632      	mov	r2, r6
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	463b      	mov	r3, r7
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	f7fa fe34 	bl	8000608 <__aeabi_dmul>
 80059a0:	4632      	mov	r2, r6
 80059a2:	463b      	mov	r3, r7
 80059a4:	f7fa fc7a 	bl	800029c <__adddf3>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fc72 	bl	8000298 <__aeabi_dsub>
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	f7fa fc6e 	bl	8000298 <__aeabi_dsub>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	2000      	movs	r0, #0
 80059c2:	4939      	ldr	r1, [pc, #228]	; (8005aa8 <__ieee754_pow+0xa08>)
 80059c4:	f7fa fc68 	bl	8000298 <__aeabi_dsub>
 80059c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80059cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	da2f      	bge.n	8005a36 <__ieee754_pow+0x996>
 80059d6:	4650      	mov	r0, sl
 80059d8:	ec43 2b10 	vmov	d0, r2, r3
 80059dc:	f000 f9c0 	bl	8005d60 <scalbn>
 80059e0:	ec51 0b10 	vmov	r0, r1, d0
 80059e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059e8:	f7ff bbf1 	b.w	80051ce <__ieee754_pow+0x12e>
 80059ec:	4b2f      	ldr	r3, [pc, #188]	; (8005aac <__ieee754_pow+0xa0c>)
 80059ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80059f2:	429e      	cmp	r6, r3
 80059f4:	f77f af0c 	ble.w	8005810 <__ieee754_pow+0x770>
 80059f8:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <__ieee754_pow+0xa10>)
 80059fa:	440b      	add	r3, r1
 80059fc:	4303      	orrs	r3, r0
 80059fe:	d00b      	beq.n	8005a18 <__ieee754_pow+0x978>
 8005a00:	a325      	add	r3, pc, #148	; (adr r3, 8005a98 <__ieee754_pow+0x9f8>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0a:	f7fa fdfd 	bl	8000608 <__aeabi_dmul>
 8005a0e:	a322      	add	r3, pc, #136	; (adr r3, 8005a98 <__ieee754_pow+0x9f8>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7ff bbdb 	b.w	80051ce <__ieee754_pow+0x12e>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	f7fa fc3c 	bl	8000298 <__aeabi_dsub>
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	f7fb f876 	bl	8000b14 <__aeabi_dcmpge>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	f43f aef1 	beq.w	8005810 <__ieee754_pow+0x770>
 8005a2e:	e7e7      	b.n	8005a00 <__ieee754_pow+0x960>
 8005a30:	f04f 0a00 	mov.w	sl, #0
 8005a34:	e718      	b.n	8005868 <__ieee754_pow+0x7c8>
 8005a36:	4621      	mov	r1, r4
 8005a38:	e7d4      	b.n	80059e4 <__ieee754_pow+0x944>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	491a      	ldr	r1, [pc, #104]	; (8005aa8 <__ieee754_pow+0xa08>)
 8005a3e:	f7ff bb8f 	b.w	8005160 <__ieee754_pow+0xc0>
 8005a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a46:	f7ff bb8b 	b.w	8005160 <__ieee754_pow+0xc0>
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7ff bb87 	b.w	8005160 <__ieee754_pow+0xc0>
 8005a52:	4693      	mov	fp, r2
 8005a54:	f7ff bb98 	b.w	8005188 <__ieee754_pow+0xe8>
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	3fe62e43 	.word	0x3fe62e43
 8005a60:	fefa39ef 	.word	0xfefa39ef
 8005a64:	3fe62e42 	.word	0x3fe62e42
 8005a68:	0ca86c39 	.word	0x0ca86c39
 8005a6c:	be205c61 	.word	0xbe205c61
 8005a70:	72bea4d0 	.word	0x72bea4d0
 8005a74:	3e663769 	.word	0x3e663769
 8005a78:	c5d26bf1 	.word	0xc5d26bf1
 8005a7c:	3ebbbd41 	.word	0x3ebbbd41
 8005a80:	af25de2c 	.word	0xaf25de2c
 8005a84:	3f11566a 	.word	0x3f11566a
 8005a88:	16bebd93 	.word	0x16bebd93
 8005a8c:	3f66c16c 	.word	0x3f66c16c
 8005a90:	5555553e 	.word	0x5555553e
 8005a94:	3fc55555 	.word	0x3fc55555
 8005a98:	c2f8f359 	.word	0xc2f8f359
 8005a9c:	01a56e1f 	.word	0x01a56e1f
 8005aa0:	3fe00000 	.word	0x3fe00000
 8005aa4:	000fffff 	.word	0x000fffff
 8005aa8:	3ff00000 	.word	0x3ff00000
 8005aac:	4090cbff 	.word	0x4090cbff
 8005ab0:	3f6f3400 	.word	0x3f6f3400
 8005ab4:	652b82fe 	.word	0x652b82fe
 8005ab8:	3c971547 	.word	0x3c971547

08005abc <__ieee754_sqrt>:
 8005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	4955      	ldr	r1, [pc, #340]	; (8005c18 <__ieee754_sqrt+0x15c>)
 8005ac2:	ec55 4b10 	vmov	r4, r5, d0
 8005ac6:	43a9      	bics	r1, r5
 8005ac8:	462b      	mov	r3, r5
 8005aca:	462a      	mov	r2, r5
 8005acc:	d112      	bne.n	8005af4 <__ieee754_sqrt+0x38>
 8005ace:	ee10 2a10 	vmov	r2, s0
 8005ad2:	ee10 0a10 	vmov	r0, s0
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fa fd96 	bl	8000608 <__aeabi_dmul>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7fa fbda 	bl	800029c <__adddf3>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	460d      	mov	r5, r1
 8005aec:	ec45 4b10 	vmov	d0, r4, r5
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	ee10 0a10 	vmov	r0, s0
 8005afa:	4621      	mov	r1, r4
 8005afc:	dc0f      	bgt.n	8005b1e <__ieee754_sqrt+0x62>
 8005afe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b02:	4330      	orrs	r0, r6
 8005b04:	d0f2      	beq.n	8005aec <__ieee754_sqrt+0x30>
 8005b06:	b155      	cbz	r5, 8005b1e <__ieee754_sqrt+0x62>
 8005b08:	ee10 2a10 	vmov	r2, s0
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f7fa fbc2 	bl	8000298 <__aeabi_dsub>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	f7fa fea0 	bl	800085c <__aeabi_ddiv>
 8005b1c:	e7e4      	b.n	8005ae8 <__ieee754_sqrt+0x2c>
 8005b1e:	151b      	asrs	r3, r3, #20
 8005b20:	d073      	beq.n	8005c0a <__ieee754_sqrt+0x14e>
 8005b22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b26:	07dd      	lsls	r5, r3, #31
 8005b28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005b2c:	bf48      	it	mi
 8005b2e:	0fc8      	lsrmi	r0, r1, #31
 8005b30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b34:	bf44      	itt	mi
 8005b36:	0049      	lslmi	r1, r1, #1
 8005b38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005b3c:	2500      	movs	r5, #0
 8005b3e:	1058      	asrs	r0, r3, #1
 8005b40:	0fcb      	lsrs	r3, r1, #31
 8005b42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005b46:	0049      	lsls	r1, r1, #1
 8005b48:	2316      	movs	r3, #22
 8005b4a:	462c      	mov	r4, r5
 8005b4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005b50:	19a7      	adds	r7, r4, r6
 8005b52:	4297      	cmp	r7, r2
 8005b54:	bfde      	ittt	le
 8005b56:	19bc      	addle	r4, r7, r6
 8005b58:	1bd2      	suble	r2, r2, r7
 8005b5a:	19ad      	addle	r5, r5, r6
 8005b5c:	0fcf      	lsrs	r7, r1, #31
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005b64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b6c:	d1f0      	bne.n	8005b50 <__ieee754_sqrt+0x94>
 8005b6e:	f04f 0c20 	mov.w	ip, #32
 8005b72:	469e      	mov	lr, r3
 8005b74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005b78:	42a2      	cmp	r2, r4
 8005b7a:	eb06 070e 	add.w	r7, r6, lr
 8005b7e:	dc02      	bgt.n	8005b86 <__ieee754_sqrt+0xca>
 8005b80:	d112      	bne.n	8005ba8 <__ieee754_sqrt+0xec>
 8005b82:	428f      	cmp	r7, r1
 8005b84:	d810      	bhi.n	8005ba8 <__ieee754_sqrt+0xec>
 8005b86:	2f00      	cmp	r7, #0
 8005b88:	eb07 0e06 	add.w	lr, r7, r6
 8005b8c:	da42      	bge.n	8005c14 <__ieee754_sqrt+0x158>
 8005b8e:	f1be 0f00 	cmp.w	lr, #0
 8005b92:	db3f      	blt.n	8005c14 <__ieee754_sqrt+0x158>
 8005b94:	f104 0801 	add.w	r8, r4, #1
 8005b98:	1b12      	subs	r2, r2, r4
 8005b9a:	428f      	cmp	r7, r1
 8005b9c:	bf88      	it	hi
 8005b9e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005ba2:	1bc9      	subs	r1, r1, r7
 8005ba4:	4433      	add	r3, r6
 8005ba6:	4644      	mov	r4, r8
 8005ba8:	0052      	lsls	r2, r2, #1
 8005baa:	f1bc 0c01 	subs.w	ip, ip, #1
 8005bae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005bb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005bb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005bba:	d1dd      	bne.n	8005b78 <__ieee754_sqrt+0xbc>
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	d006      	beq.n	8005bce <__ieee754_sqrt+0x112>
 8005bc0:	1c5c      	adds	r4, r3, #1
 8005bc2:	bf13      	iteet	ne
 8005bc4:	3301      	addne	r3, #1
 8005bc6:	3501      	addeq	r5, #1
 8005bc8:	4663      	moveq	r3, ip
 8005bca:	f023 0301 	bicne.w	r3, r3, #1
 8005bce:	106a      	asrs	r2, r5, #1
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	07e9      	lsls	r1, r5, #31
 8005bd4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005bd8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005bdc:	bf48      	it	mi
 8005bde:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005be6:	461c      	mov	r4, r3
 8005be8:	e780      	b.n	8005aec <__ieee754_sqrt+0x30>
 8005bea:	0aca      	lsrs	r2, r1, #11
 8005bec:	3815      	subs	r0, #21
 8005bee:	0549      	lsls	r1, r1, #21
 8005bf0:	2a00      	cmp	r2, #0
 8005bf2:	d0fa      	beq.n	8005bea <__ieee754_sqrt+0x12e>
 8005bf4:	02d6      	lsls	r6, r2, #11
 8005bf6:	d50a      	bpl.n	8005c0e <__ieee754_sqrt+0x152>
 8005bf8:	f1c3 0420 	rsb	r4, r3, #32
 8005bfc:	fa21 f404 	lsr.w	r4, r1, r4
 8005c00:	1e5d      	subs	r5, r3, #1
 8005c02:	4099      	lsls	r1, r3
 8005c04:	4322      	orrs	r2, r4
 8005c06:	1b43      	subs	r3, r0, r5
 8005c08:	e78b      	b.n	8005b22 <__ieee754_sqrt+0x66>
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	e7f0      	b.n	8005bf0 <__ieee754_sqrt+0x134>
 8005c0e:	0052      	lsls	r2, r2, #1
 8005c10:	3301      	adds	r3, #1
 8005c12:	e7ef      	b.n	8005bf4 <__ieee754_sqrt+0x138>
 8005c14:	46a0      	mov	r8, r4
 8005c16:	e7bf      	b.n	8005b98 <__ieee754_sqrt+0xdc>
 8005c18:	7ff00000 	.word	0x7ff00000

08005c1c <fabs>:
 8005c1c:	ec51 0b10 	vmov	r0, r1, d0
 8005c20:	ee10 2a10 	vmov	r2, s0
 8005c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c28:	ec43 2b10 	vmov	d0, r2, r3
 8005c2c:	4770      	bx	lr

08005c2e <finite>:
 8005c2e:	ee10 3a90 	vmov	r3, s1
 8005c32:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005c36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005c3a:	0fc0      	lsrs	r0, r0, #31
 8005c3c:	4770      	bx	lr

08005c3e <matherr>:
 8005c3e:	2000      	movs	r0, #0
 8005c40:	4770      	bx	lr
 8005c42:	0000      	movs	r0, r0
 8005c44:	0000      	movs	r0, r0
	...

08005c48 <nan>:
 8005c48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005c50 <nan+0x8>
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	00000000 	.word	0x00000000
 8005c54:	7ff80000 	.word	0x7ff80000

08005c58 <rint>:
 8005c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5a:	ec51 0b10 	vmov	r0, r1, d0
 8005c5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c62:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005c66:	2e13      	cmp	r6, #19
 8005c68:	460b      	mov	r3, r1
 8005c6a:	ee10 4a10 	vmov	r4, s0
 8005c6e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005c72:	dc56      	bgt.n	8005d22 <rint+0xca>
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	da2b      	bge.n	8005cd0 <rint+0x78>
 8005c78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005c7c:	4302      	orrs	r2, r0
 8005c7e:	d023      	beq.n	8005cc8 <rint+0x70>
 8005c80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005c84:	4302      	orrs	r2, r0
 8005c86:	4254      	negs	r4, r2
 8005c88:	4314      	orrs	r4, r2
 8005c8a:	0c4b      	lsrs	r3, r1, #17
 8005c8c:	0b24      	lsrs	r4, r4, #12
 8005c8e:	045b      	lsls	r3, r3, #17
 8005c90:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005c94:	ea44 0103 	orr.w	r1, r4, r3
 8005c98:	460b      	mov	r3, r1
 8005c9a:	492f      	ldr	r1, [pc, #188]	; (8005d58 <rint+0x100>)
 8005c9c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005ca0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7fa faf7 	bl	800029c <__adddf3>
 8005cae:	e9cd 0100 	strd	r0, r1, [sp]
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cba:	f7fa faed 	bl	8000298 <__aeabi_dsub>
 8005cbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cc2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	ec41 0b10 	vmov	d0, r0, r1
 8005ccc:	b003      	add	sp, #12
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <rint+0x104>)
 8005cd2:	4132      	asrs	r2, r6
 8005cd4:	ea01 0702 	and.w	r7, r1, r2
 8005cd8:	4307      	orrs	r7, r0
 8005cda:	d0f5      	beq.n	8005cc8 <rint+0x70>
 8005cdc:	0852      	lsrs	r2, r2, #1
 8005cde:	4011      	ands	r1, r2
 8005ce0:	430c      	orrs	r4, r1
 8005ce2:	d00b      	beq.n	8005cfc <rint+0xa4>
 8005ce4:	ea23 0202 	bic.w	r2, r3, r2
 8005ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cec:	2e13      	cmp	r6, #19
 8005cee:	fa43 f306 	asr.w	r3, r3, r6
 8005cf2:	bf0c      	ite	eq
 8005cf4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005cf8:	2400      	movne	r4, #0
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	4916      	ldr	r1, [pc, #88]	; (8005d58 <rint+0x100>)
 8005cfe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005d02:	4622      	mov	r2, r4
 8005d04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7fa fac6 	bl	800029c <__adddf3>
 8005d10:	e9cd 0100 	strd	r0, r1, [sp]
 8005d14:	4622      	mov	r2, r4
 8005d16:	462b      	mov	r3, r5
 8005d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d1c:	f7fa fabc 	bl	8000298 <__aeabi_dsub>
 8005d20:	e7d2      	b.n	8005cc8 <rint+0x70>
 8005d22:	2e33      	cmp	r6, #51	; 0x33
 8005d24:	dd07      	ble.n	8005d36 <rint+0xde>
 8005d26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d2a:	d1cd      	bne.n	8005cc8 <rint+0x70>
 8005d2c:	ee10 2a10 	vmov	r2, s0
 8005d30:	f7fa fab4 	bl	800029c <__adddf3>
 8005d34:	e7c8      	b.n	8005cc8 <rint+0x70>
 8005d36:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	40f2      	lsrs	r2, r6
 8005d40:	4210      	tst	r0, r2
 8005d42:	d0c1      	beq.n	8005cc8 <rint+0x70>
 8005d44:	0852      	lsrs	r2, r2, #1
 8005d46:	4210      	tst	r0, r2
 8005d48:	bf1f      	itttt	ne
 8005d4a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005d4e:	ea20 0202 	bicne.w	r2, r0, r2
 8005d52:	4134      	asrne	r4, r6
 8005d54:	4314      	orrne	r4, r2
 8005d56:	e7d1      	b.n	8005cfc <rint+0xa4>
 8005d58:	0800a3b0 	.word	0x0800a3b0
 8005d5c:	000fffff 	.word	0x000fffff

08005d60 <scalbn>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	ec55 4b10 	vmov	r4, r5, d0
 8005d66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	b9aa      	cbnz	r2, 8005d9c <scalbn+0x3c>
 8005d70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d74:	4323      	orrs	r3, r4
 8005d76:	d03b      	beq.n	8005df0 <scalbn+0x90>
 8005d78:	4b31      	ldr	r3, [pc, #196]	; (8005e40 <scalbn+0xe0>)
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	ee10 0a10 	vmov	r0, s0
 8005d82:	f7fa fc41 	bl	8000608 <__aeabi_dmul>
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <scalbn+0xe4>)
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	da12      	bge.n	8005db6 <scalbn+0x56>
 8005d90:	a327      	add	r3, pc, #156	; (adr r3, 8005e30 <scalbn+0xd0>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fc37 	bl	8000608 <__aeabi_dmul>
 8005d9a:	e009      	b.n	8005db0 <scalbn+0x50>
 8005d9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005da0:	428a      	cmp	r2, r1
 8005da2:	d10c      	bne.n	8005dbe <scalbn+0x5e>
 8005da4:	ee10 2a10 	vmov	r2, s0
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fa76 	bl	800029c <__adddf3>
 8005db0:	4604      	mov	r4, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	e01c      	b.n	8005df0 <scalbn+0x90>
 8005db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dba:	460b      	mov	r3, r1
 8005dbc:	3a36      	subs	r2, #54	; 0x36
 8005dbe:	4432      	add	r2, r6
 8005dc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005dc4:	428a      	cmp	r2, r1
 8005dc6:	dd0b      	ble.n	8005de0 <scalbn+0x80>
 8005dc8:	ec45 4b11 	vmov	d1, r4, r5
 8005dcc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005e38 <scalbn+0xd8>
 8005dd0:	f000 f83c 	bl	8005e4c <copysign>
 8005dd4:	a318      	add	r3, pc, #96	; (adr r3, 8005e38 <scalbn+0xd8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	ec51 0b10 	vmov	r0, r1, d0
 8005dde:	e7da      	b.n	8005d96 <scalbn+0x36>
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	dd08      	ble.n	8005df6 <scalbn+0x96>
 8005de4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005df0:	ec45 4b10 	vmov	d0, r4, r5
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005dfa:	da0d      	bge.n	8005e18 <scalbn+0xb8>
 8005dfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e00:	429e      	cmp	r6, r3
 8005e02:	ec45 4b11 	vmov	d1, r4, r5
 8005e06:	dce1      	bgt.n	8005dcc <scalbn+0x6c>
 8005e08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005e30 <scalbn+0xd0>
 8005e0c:	f000 f81e 	bl	8005e4c <copysign>
 8005e10:	a307      	add	r3, pc, #28	; (adr r3, 8005e30 <scalbn+0xd0>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	e7e0      	b.n	8005dda <scalbn+0x7a>
 8005e18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e1c:	3236      	adds	r2, #54	; 0x36
 8005e1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <scalbn+0xe8>)
 8005e2e:	e7b2      	b.n	8005d96 <scalbn+0x36>
 8005e30:	c2f8f359 	.word	0xc2f8f359
 8005e34:	01a56e1f 	.word	0x01a56e1f
 8005e38:	8800759c 	.word	0x8800759c
 8005e3c:	7e37e43c 	.word	0x7e37e43c
 8005e40:	43500000 	.word	0x43500000
 8005e44:	ffff3cb0 	.word	0xffff3cb0
 8005e48:	3c900000 	.word	0x3c900000

08005e4c <copysign>:
 8005e4c:	ec51 0b10 	vmov	r0, r1, d0
 8005e50:	ee11 0a90 	vmov	r0, s3
 8005e54:	ee10 2a10 	vmov	r2, s0
 8005e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005e60:	ea41 0300 	orr.w	r3, r1, r0
 8005e64:	ec43 2b10 	vmov	d0, r2, r3
 8005e68:	4770      	bx	lr

08005e6a <atof>:
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f001 bcdc 	b.w	8007828 <strtod>

08005e70 <__errno>:
 8005e70:	4b01      	ldr	r3, [pc, #4]	; (8005e78 <__errno+0x8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000010 	.word	0x20000010

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0d      	ldr	r6, [pc, #52]	; (8005eb4 <__libc_init_array+0x38>)
 8005e80:	4c0d      	ldr	r4, [pc, #52]	; (8005eb8 <__libc_init_array+0x3c>)
 8005e82:	1ba4      	subs	r4, r4, r6
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	2500      	movs	r5, #0
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	4e0b      	ldr	r6, [pc, #44]	; (8005ebc <__libc_init_array+0x40>)
 8005e8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ec0 <__libc_init_array+0x44>)
 8005e90:	f004 fa3e 	bl	800a310 <_init>
 8005e94:	1ba4      	subs	r4, r4, r6
 8005e96:	10a4      	asrs	r4, r4, #2
 8005e98:	2500      	movs	r5, #0
 8005e9a:	42a5      	cmp	r5, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ea4:	4798      	blx	r3
 8005ea6:	3501      	adds	r5, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eae:	4798      	blx	r3
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	0800a6e8 	.word	0x0800a6e8
 8005eb8:	0800a6e8 	.word	0x0800a6e8
 8005ebc:	0800a6e8 	.word	0x0800a6e8
 8005ec0:	0800a6ec 	.word	0x0800a6ec

08005ec4 <memcpy>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	1e43      	subs	r3, r0, #1
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	d100      	bne.n	8005ed0 <memcpy+0xc>
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed8:	e7f7      	b.n	8005eca <memcpy+0x6>

08005eda <memset>:
 8005eda:	4402      	add	r2, r0
 8005edc:	4603      	mov	r3, r0
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d100      	bne.n	8005ee4 <memset+0xa>
 8005ee2:	4770      	bx	lr
 8005ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee8:	e7f9      	b.n	8005ede <memset+0x4>

08005eea <__cvt>:
 8005eea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eee:	ec55 4b10 	vmov	r4, r5, d0
 8005ef2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	460e      	mov	r6, r1
 8005efc:	4691      	mov	r9, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	bfb8      	it	lt
 8005f02:	4622      	movlt	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	f027 0720 	bic.w	r7, r7, #32
 8005f0a:	bfbb      	ittet	lt
 8005f0c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f10:	461d      	movlt	r5, r3
 8005f12:	2300      	movge	r3, #0
 8005f14:	232d      	movlt	r3, #45	; 0x2d
 8005f16:	bfb8      	it	lt
 8005f18:	4614      	movlt	r4, r2
 8005f1a:	2f46      	cmp	r7, #70	; 0x46
 8005f1c:	700b      	strb	r3, [r1, #0]
 8005f1e:	d004      	beq.n	8005f2a <__cvt+0x40>
 8005f20:	2f45      	cmp	r7, #69	; 0x45
 8005f22:	d100      	bne.n	8005f26 <__cvt+0x3c>
 8005f24:	3601      	adds	r6, #1
 8005f26:	2102      	movs	r1, #2
 8005f28:	e000      	b.n	8005f2c <__cvt+0x42>
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	ab02      	add	r3, sp, #8
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4632      	mov	r2, r6
 8005f36:	4653      	mov	r3, sl
 8005f38:	ec45 4b10 	vmov	d0, r4, r5
 8005f3c:	f001 fdd0 	bl	8007ae0 <_dtoa_r>
 8005f40:	2f47      	cmp	r7, #71	; 0x47
 8005f42:	4680      	mov	r8, r0
 8005f44:	d102      	bne.n	8005f4c <__cvt+0x62>
 8005f46:	f019 0f01 	tst.w	r9, #1
 8005f4a:	d026      	beq.n	8005f9a <__cvt+0xb0>
 8005f4c:	2f46      	cmp	r7, #70	; 0x46
 8005f4e:	eb08 0906 	add.w	r9, r8, r6
 8005f52:	d111      	bne.n	8005f78 <__cvt+0x8e>
 8005f54:	f898 3000 	ldrb.w	r3, [r8]
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d10a      	bne.n	8005f72 <__cvt+0x88>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa fdb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f68:	b918      	cbnz	r0, 8005f72 <__cvt+0x88>
 8005f6a:	f1c6 0601 	rsb	r6, r6, #1
 8005f6e:	f8ca 6000 	str.w	r6, [sl]
 8005f72:	f8da 3000 	ldr.w	r3, [sl]
 8005f76:	4499      	add	r9, r3
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f84:	b938      	cbnz	r0, 8005f96 <__cvt+0xac>
 8005f86:	2230      	movs	r2, #48	; 0x30
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	454b      	cmp	r3, r9
 8005f8c:	d205      	bcs.n	8005f9a <__cvt+0xb0>
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	9103      	str	r1, [sp, #12]
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e7f8      	b.n	8005f88 <__cvt+0x9e>
 8005f96:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f9e:	eba3 0308 	sub.w	r3, r3, r8
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	b004      	add	sp, #16
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005fac <__exponent>:
 8005fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	bfba      	itte	lt
 8005fb4:	4249      	neglt	r1, r1
 8005fb6:	232d      	movlt	r3, #45	; 0x2d
 8005fb8:	232b      	movge	r3, #43	; 0x2b
 8005fba:	2909      	cmp	r1, #9
 8005fbc:	f804 2b02 	strb.w	r2, [r4], #2
 8005fc0:	7043      	strb	r3, [r0, #1]
 8005fc2:	dd20      	ble.n	8006006 <__exponent+0x5a>
 8005fc4:	f10d 0307 	add.w	r3, sp, #7
 8005fc8:	461f      	mov	r7, r3
 8005fca:	260a      	movs	r6, #10
 8005fcc:	fb91 f5f6 	sdiv	r5, r1, r6
 8005fd0:	fb06 1115 	mls	r1, r6, r5, r1
 8005fd4:	3130      	adds	r1, #48	; 0x30
 8005fd6:	2d09      	cmp	r5, #9
 8005fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fdc:	f103 32ff 	add.w	r2, r3, #4294967295
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	dc09      	bgt.n	8005ff8 <__exponent+0x4c>
 8005fe4:	3130      	adds	r1, #48	; 0x30
 8005fe6:	3b02      	subs	r3, #2
 8005fe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005fec:	42bb      	cmp	r3, r7
 8005fee:	4622      	mov	r2, r4
 8005ff0:	d304      	bcc.n	8005ffc <__exponent+0x50>
 8005ff2:	1a10      	subs	r0, r2, r0
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	e7e7      	b.n	8005fcc <__exponent+0x20>
 8005ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006000:	f804 2b01 	strb.w	r2, [r4], #1
 8006004:	e7f2      	b.n	8005fec <__exponent+0x40>
 8006006:	2330      	movs	r3, #48	; 0x30
 8006008:	4419      	add	r1, r3
 800600a:	7083      	strb	r3, [r0, #2]
 800600c:	1d02      	adds	r2, r0, #4
 800600e:	70c1      	strb	r1, [r0, #3]
 8006010:	e7ef      	b.n	8005ff2 <__exponent+0x46>
	...

08006014 <_printf_float>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	b08d      	sub	sp, #52	; 0x34
 800601a:	460c      	mov	r4, r1
 800601c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006020:	4616      	mov	r6, r2
 8006022:	461f      	mov	r7, r3
 8006024:	4605      	mov	r5, r0
 8006026:	f002 ff09 	bl	8008e3c <_localeconv_r>
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fa f8d6 	bl	80001e0 <strlen>
 8006034:	2300      	movs	r3, #0
 8006036:	930a      	str	r3, [sp, #40]	; 0x28
 8006038:	f8d8 3000 	ldr.w	r3, [r8]
 800603c:	9005      	str	r0, [sp, #20]
 800603e:	3307      	adds	r3, #7
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	f103 0208 	add.w	r2, r3, #8
 8006048:	f894 a018 	ldrb.w	sl, [r4, #24]
 800604c:	f8d4 b000 	ldr.w	fp, [r4]
 8006050:	f8c8 2000 	str.w	r2, [r8]
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800605c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006060:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006064:	9307      	str	r3, [sp, #28]
 8006066:	f8cd 8018 	str.w	r8, [sp, #24]
 800606a:	f04f 32ff 	mov.w	r2, #4294967295
 800606e:	4ba7      	ldr	r3, [pc, #668]	; (800630c <_printf_float+0x2f8>)
 8006070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006074:	f7fa fd62 	bl	8000b3c <__aeabi_dcmpun>
 8006078:	bb70      	cbnz	r0, 80060d8 <_printf_float+0xc4>
 800607a:	f04f 32ff 	mov.w	r2, #4294967295
 800607e:	4ba3      	ldr	r3, [pc, #652]	; (800630c <_printf_float+0x2f8>)
 8006080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006084:	f7fa fd3c 	bl	8000b00 <__aeabi_dcmple>
 8006088:	bb30      	cbnz	r0, 80060d8 <_printf_float+0xc4>
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa fd2b 	bl	8000aec <__aeabi_dcmplt>
 8006096:	b110      	cbz	r0, 800609e <_printf_float+0x8a>
 8006098:	232d      	movs	r3, #45	; 0x2d
 800609a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609e:	4a9c      	ldr	r2, [pc, #624]	; (8006310 <_printf_float+0x2fc>)
 80060a0:	4b9c      	ldr	r3, [pc, #624]	; (8006314 <_printf_float+0x300>)
 80060a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80060a6:	bf8c      	ite	hi
 80060a8:	4690      	movhi	r8, r2
 80060aa:	4698      	movls	r8, r3
 80060ac:	2303      	movs	r3, #3
 80060ae:	f02b 0204 	bic.w	r2, fp, #4
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	9700      	str	r7, [sp, #0]
 80060bc:	4633      	mov	r3, r6
 80060be:	aa0b      	add	r2, sp, #44	; 0x2c
 80060c0:	4621      	mov	r1, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f9e6 	bl	8006494 <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	f040 808d 	bne.w	80061e8 <_printf_float+0x1d4>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b00d      	add	sp, #52	; 0x34
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	4640      	mov	r0, r8
 80060de:	4649      	mov	r1, r9
 80060e0:	f7fa fd2c 	bl	8000b3c <__aeabi_dcmpun>
 80060e4:	b110      	cbz	r0, 80060ec <_printf_float+0xd8>
 80060e6:	4a8c      	ldr	r2, [pc, #560]	; (8006318 <_printf_float+0x304>)
 80060e8:	4b8c      	ldr	r3, [pc, #560]	; (800631c <_printf_float+0x308>)
 80060ea:	e7da      	b.n	80060a2 <_printf_float+0x8e>
 80060ec:	6861      	ldr	r1, [r4, #4]
 80060ee:	1c4b      	adds	r3, r1, #1
 80060f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80060f4:	a80a      	add	r0, sp, #40	; 0x28
 80060f6:	d13e      	bne.n	8006176 <_printf_float+0x162>
 80060f8:	2306      	movs	r3, #6
 80060fa:	6063      	str	r3, [r4, #4]
 80060fc:	2300      	movs	r3, #0
 80060fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006102:	ab09      	add	r3, sp, #36	; 0x24
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	ec49 8b10 	vmov	d0, r8, r9
 800610a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800610e:	6022      	str	r2, [r4, #0]
 8006110:	f8cd a004 	str.w	sl, [sp, #4]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	4628      	mov	r0, r5
 8006118:	f7ff fee7 	bl	8005eea <__cvt>
 800611c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006120:	2b47      	cmp	r3, #71	; 0x47
 8006122:	4680      	mov	r8, r0
 8006124:	d109      	bne.n	800613a <_printf_float+0x126>
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	1cd8      	adds	r0, r3, #3
 800612a:	db02      	blt.n	8006132 <_printf_float+0x11e>
 800612c:	6862      	ldr	r2, [r4, #4]
 800612e:	4293      	cmp	r3, r2
 8006130:	dd47      	ble.n	80061c2 <_printf_float+0x1ae>
 8006132:	f1aa 0a02 	sub.w	sl, sl, #2
 8006136:	fa5f fa8a 	uxtb.w	sl, sl
 800613a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800613e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006140:	d824      	bhi.n	800618c <_printf_float+0x178>
 8006142:	3901      	subs	r1, #1
 8006144:	4652      	mov	r2, sl
 8006146:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800614a:	9109      	str	r1, [sp, #36]	; 0x24
 800614c:	f7ff ff2e 	bl	8005fac <__exponent>
 8006150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006152:	1813      	adds	r3, r2, r0
 8006154:	2a01      	cmp	r2, #1
 8006156:	4681      	mov	r9, r0
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	dc02      	bgt.n	8006162 <_printf_float+0x14e>
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	07d1      	lsls	r1, r2, #31
 8006160:	d501      	bpl.n	8006166 <_printf_float+0x152>
 8006162:	3301      	adds	r3, #1
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0a5      	beq.n	80060ba <_printf_float+0xa6>
 800616e:	232d      	movs	r3, #45	; 0x2d
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006174:	e7a1      	b.n	80060ba <_printf_float+0xa6>
 8006176:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800617a:	f000 8177 	beq.w	800646c <_printf_float+0x458>
 800617e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006182:	d1bb      	bne.n	80060fc <_printf_float+0xe8>
 8006184:	2900      	cmp	r1, #0
 8006186:	d1b9      	bne.n	80060fc <_printf_float+0xe8>
 8006188:	2301      	movs	r3, #1
 800618a:	e7b6      	b.n	80060fa <_printf_float+0xe6>
 800618c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006190:	d119      	bne.n	80061c6 <_printf_float+0x1b2>
 8006192:	2900      	cmp	r1, #0
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	dd0c      	ble.n	80061b2 <_printf_float+0x19e>
 8006198:	6121      	str	r1, [r4, #16]
 800619a:	b913      	cbnz	r3, 80061a2 <_printf_float+0x18e>
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	07d2      	lsls	r2, r2, #31
 80061a0:	d502      	bpl.n	80061a8 <_printf_float+0x194>
 80061a2:	3301      	adds	r3, #1
 80061a4:	440b      	add	r3, r1
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80061ac:	f04f 0900 	mov.w	r9, #0
 80061b0:	e7d9      	b.n	8006166 <_printf_float+0x152>
 80061b2:	b913      	cbnz	r3, 80061ba <_printf_float+0x1a6>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	07d0      	lsls	r0, r2, #31
 80061b8:	d501      	bpl.n	80061be <_printf_float+0x1aa>
 80061ba:	3302      	adds	r3, #2
 80061bc:	e7f3      	b.n	80061a6 <_printf_float+0x192>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7f1      	b.n	80061a6 <_printf_float+0x192>
 80061c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80061c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061ca:	4293      	cmp	r3, r2
 80061cc:	db05      	blt.n	80061da <_printf_float+0x1c6>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	6123      	str	r3, [r4, #16]
 80061d2:	07d1      	lsls	r1, r2, #31
 80061d4:	d5e8      	bpl.n	80061a8 <_printf_float+0x194>
 80061d6:	3301      	adds	r3, #1
 80061d8:	e7e5      	b.n	80061a6 <_printf_float+0x192>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfd4      	ite	le
 80061de:	f1c3 0302 	rsble	r3, r3, #2
 80061e2:	2301      	movgt	r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	e7de      	b.n	80061a6 <_printf_float+0x192>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	055a      	lsls	r2, r3, #21
 80061ec:	d407      	bmi.n	80061fe <_printf_float+0x1ea>
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	4642      	mov	r2, r8
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	d12b      	bne.n	8006254 <_printf_float+0x240>
 80061fc:	e767      	b.n	80060ce <_printf_float+0xba>
 80061fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006202:	f240 80dc 	bls.w	80063be <_printf_float+0x3aa>
 8006206:	2200      	movs	r2, #0
 8006208:	2300      	movs	r3, #0
 800620a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800620e:	f7fa fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 8006212:	2800      	cmp	r0, #0
 8006214:	d033      	beq.n	800627e <_printf_float+0x26a>
 8006216:	2301      	movs	r3, #1
 8006218:	4a41      	ldr	r2, [pc, #260]	; (8006320 <_printf_float+0x30c>)
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f af54 	beq.w	80060ce <_printf_float+0xba>
 8006226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800622a:	429a      	cmp	r2, r3
 800622c:	db02      	blt.n	8006234 <_printf_float+0x220>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07d8      	lsls	r0, r3, #31
 8006232:	d50f      	bpl.n	8006254 <_printf_float+0x240>
 8006234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	f43f af45 	beq.w	80060ce <_printf_float+0xba>
 8006244:	f04f 0800 	mov.w	r8, #0
 8006248:	f104 091a 	add.w	r9, r4, #26
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	4543      	cmp	r3, r8
 8006252:	dc09      	bgt.n	8006268 <_printf_float+0x254>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	079b      	lsls	r3, r3, #30
 8006258:	f100 8103 	bmi.w	8006462 <_printf_float+0x44e>
 800625c:	68e0      	ldr	r0, [r4, #12]
 800625e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006260:	4298      	cmp	r0, r3
 8006262:	bfb8      	it	lt
 8006264:	4618      	movlt	r0, r3
 8006266:	e734      	b.n	80060d2 <_printf_float+0xbe>
 8006268:	2301      	movs	r3, #1
 800626a:	464a      	mov	r2, r9
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f af2b 	beq.w	80060ce <_printf_float+0xba>
 8006278:	f108 0801 	add.w	r8, r8, #1
 800627c:	e7e6      	b.n	800624c <_printf_float+0x238>
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	dc2b      	bgt.n	80062dc <_printf_float+0x2c8>
 8006284:	2301      	movs	r3, #1
 8006286:	4a26      	ldr	r2, [pc, #152]	; (8006320 <_printf_float+0x30c>)
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af1d 	beq.w	80060ce <_printf_float+0xba>
 8006294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006296:	b923      	cbnz	r3, 80062a2 <_printf_float+0x28e>
 8006298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629a:	b913      	cbnz	r3, 80062a2 <_printf_float+0x28e>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d5d8      	bpl.n	8006254 <_printf_float+0x240>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f af0e 	beq.w	80060ce <_printf_float+0xba>
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	f104 0a1a 	add.w	sl, r4, #26
 80062ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062bc:	425b      	negs	r3, r3
 80062be:	454b      	cmp	r3, r9
 80062c0:	dc01      	bgt.n	80062c6 <_printf_float+0x2b2>
 80062c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c4:	e794      	b.n	80061f0 <_printf_float+0x1dc>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f aefc 	beq.w	80060ce <_printf_float+0xba>
 80062d6:	f109 0901 	add.w	r9, r9, #1
 80062da:	e7ee      	b.n	80062ba <_printf_float+0x2a6>
 80062dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062e0:	429a      	cmp	r2, r3
 80062e2:	bfa8      	it	ge
 80062e4:	461a      	movge	r2, r3
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	4691      	mov	r9, r2
 80062ea:	dd07      	ble.n	80062fc <_printf_float+0x2e8>
 80062ec:	4613      	mov	r3, r2
 80062ee:	4631      	mov	r1, r6
 80062f0:	4642      	mov	r2, r8
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f aee9 	beq.w	80060ce <_printf_float+0xba>
 80062fc:	f104 031a 	add.w	r3, r4, #26
 8006300:	f04f 0b00 	mov.w	fp, #0
 8006304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006308:	9306      	str	r3, [sp, #24]
 800630a:	e015      	b.n	8006338 <_printf_float+0x324>
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	0800a3c8 	.word	0x0800a3c8
 8006314:	0800a3c4 	.word	0x0800a3c4
 8006318:	0800a3d0 	.word	0x0800a3d0
 800631c:	0800a3cc 	.word	0x0800a3cc
 8006320:	0800a3d4 	.word	0x0800a3d4
 8006324:	2301      	movs	r3, #1
 8006326:	9a06      	ldr	r2, [sp, #24]
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f aecd 	beq.w	80060ce <_printf_float+0xba>
 8006334:	f10b 0b01 	add.w	fp, fp, #1
 8006338:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800633c:	ebaa 0309 	sub.w	r3, sl, r9
 8006340:	455b      	cmp	r3, fp
 8006342:	dcef      	bgt.n	8006324 <_printf_float+0x310>
 8006344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006348:	429a      	cmp	r2, r3
 800634a:	44d0      	add	r8, sl
 800634c:	db15      	blt.n	800637a <_printf_float+0x366>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	07da      	lsls	r2, r3, #31
 8006352:	d412      	bmi.n	800637a <_printf_float+0x366>
 8006354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006358:	eba3 020a 	sub.w	r2, r3, sl
 800635c:	eba3 0a01 	sub.w	sl, r3, r1
 8006360:	4592      	cmp	sl, r2
 8006362:	bfa8      	it	ge
 8006364:	4692      	movge	sl, r2
 8006366:	f1ba 0f00 	cmp.w	sl, #0
 800636a:	dc0e      	bgt.n	800638a <_printf_float+0x376>
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006374:	f104 091a 	add.w	r9, r4, #26
 8006378:	e019      	b.n	80063ae <_printf_float+0x39a>
 800637a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	d1e5      	bne.n	8006354 <_printf_float+0x340>
 8006388:	e6a1      	b.n	80060ce <_printf_float+0xba>
 800638a:	4653      	mov	r3, sl
 800638c:	4642      	mov	r2, r8
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	d1e9      	bne.n	800636c <_printf_float+0x358>
 8006398:	e699      	b.n	80060ce <_printf_float+0xba>
 800639a:	2301      	movs	r3, #1
 800639c:	464a      	mov	r2, r9
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	f43f ae92 	beq.w	80060ce <_printf_float+0xba>
 80063aa:	f108 0801 	add.w	r8, r8, #1
 80063ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	eba3 030a 	sub.w	r3, r3, sl
 80063b8:	4543      	cmp	r3, r8
 80063ba:	dcee      	bgt.n	800639a <_printf_float+0x386>
 80063bc:	e74a      	b.n	8006254 <_printf_float+0x240>
 80063be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c0:	2a01      	cmp	r2, #1
 80063c2:	dc01      	bgt.n	80063c8 <_printf_float+0x3b4>
 80063c4:	07db      	lsls	r3, r3, #31
 80063c6:	d53a      	bpl.n	800643e <_printf_float+0x42a>
 80063c8:	2301      	movs	r3, #1
 80063ca:	4642      	mov	r2, r8
 80063cc:	4631      	mov	r1, r6
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	f43f ae7b 	beq.w	80060ce <_printf_float+0xba>
 80063d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	f108 0801 	add.w	r8, r8, #1
 80063e8:	f43f ae71 	beq.w	80060ce <_printf_float+0xba>
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	2200      	movs	r2, #0
 80063f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80063f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063f8:	2300      	movs	r3, #0
 80063fa:	f7fa fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80063fe:	b9c8      	cbnz	r0, 8006434 <_printf_float+0x420>
 8006400:	4653      	mov	r3, sl
 8006402:	4642      	mov	r2, r8
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	d10e      	bne.n	800642c <_printf_float+0x418>
 800640e:	e65e      	b.n	80060ce <_printf_float+0xba>
 8006410:	2301      	movs	r3, #1
 8006412:	4652      	mov	r2, sl
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f ae57 	beq.w	80060ce <_printf_float+0xba>
 8006420:	f108 0801 	add.w	r8, r8, #1
 8006424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	4543      	cmp	r3, r8
 800642a:	dcf1      	bgt.n	8006410 <_printf_float+0x3fc>
 800642c:	464b      	mov	r3, r9
 800642e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006432:	e6de      	b.n	80061f2 <_printf_float+0x1de>
 8006434:	f04f 0800 	mov.w	r8, #0
 8006438:	f104 0a1a 	add.w	sl, r4, #26
 800643c:	e7f2      	b.n	8006424 <_printf_float+0x410>
 800643e:	2301      	movs	r3, #1
 8006440:	e7df      	b.n	8006402 <_printf_float+0x3ee>
 8006442:	2301      	movs	r3, #1
 8006444:	464a      	mov	r2, r9
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae3e 	beq.w	80060ce <_printf_float+0xba>
 8006452:	f108 0801 	add.w	r8, r8, #1
 8006456:	68e3      	ldr	r3, [r4, #12]
 8006458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800645a:	1a9b      	subs	r3, r3, r2
 800645c:	4543      	cmp	r3, r8
 800645e:	dcf0      	bgt.n	8006442 <_printf_float+0x42e>
 8006460:	e6fc      	b.n	800625c <_printf_float+0x248>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	f104 0919 	add.w	r9, r4, #25
 800646a:	e7f4      	b.n	8006456 <_printf_float+0x442>
 800646c:	2900      	cmp	r1, #0
 800646e:	f43f ae8b 	beq.w	8006188 <_printf_float+0x174>
 8006472:	2300      	movs	r3, #0
 8006474:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006478:	ab09      	add	r3, sp, #36	; 0x24
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	ec49 8b10 	vmov	d0, r8, r9
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	f8cd a004 	str.w	sl, [sp, #4]
 8006486:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800648a:	4628      	mov	r0, r5
 800648c:	f7ff fd2d 	bl	8005eea <__cvt>
 8006490:	4680      	mov	r8, r0
 8006492:	e648      	b.n	8006126 <_printf_float+0x112>

08006494 <_printf_common>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	4691      	mov	r9, r2
 800649a:	461f      	mov	r7, r3
 800649c:	688a      	ldr	r2, [r1, #8]
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	bfb8      	it	lt
 80064a8:	4613      	movlt	r3, r2
 80064aa:	f8c9 3000 	str.w	r3, [r9]
 80064ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b2:	4606      	mov	r6, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	b112      	cbz	r2, 80064be <_printf_common+0x2a>
 80064b8:	3301      	adds	r3, #1
 80064ba:	f8c9 3000 	str.w	r3, [r9]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	0699      	lsls	r1, r3, #26
 80064c2:	bf42      	ittt	mi
 80064c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064c8:	3302      	addmi	r3, #2
 80064ca:	f8c9 3000 	strmi.w	r3, [r9]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d107      	bne.n	80064e6 <_printf_common+0x52>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	f8d9 2000 	ldr.w	r2, [r9]
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	42ab      	cmp	r3, r5
 80064e4:	dc28      	bgt.n	8006538 <_printf_common+0xa4>
 80064e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	3300      	adds	r3, #0
 80064ee:	bf18      	it	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	0692      	lsls	r2, r2, #26
 80064f4:	d42d      	bmi.n	8006552 <_printf_common+0xbe>
 80064f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064fa:	4639      	mov	r1, r7
 80064fc:	4630      	mov	r0, r6
 80064fe:	47c0      	blx	r8
 8006500:	3001      	adds	r0, #1
 8006502:	d020      	beq.n	8006546 <_printf_common+0xb2>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	68e5      	ldr	r5, [r4, #12]
 8006508:	f8d9 2000 	ldr.w	r2, [r9]
 800650c:	f003 0306 	and.w	r3, r3, #6
 8006510:	2b04      	cmp	r3, #4
 8006512:	bf08      	it	eq
 8006514:	1aad      	subeq	r5, r5, r2
 8006516:	68a3      	ldr	r3, [r4, #8]
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	bf0c      	ite	eq
 800651c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006520:	2500      	movne	r5, #0
 8006522:	4293      	cmp	r3, r2
 8006524:	bfc4      	itt	gt
 8006526:	1a9b      	subgt	r3, r3, r2
 8006528:	18ed      	addgt	r5, r5, r3
 800652a:	f04f 0900 	mov.w	r9, #0
 800652e:	341a      	adds	r4, #26
 8006530:	454d      	cmp	r5, r9
 8006532:	d11a      	bne.n	800656a <_printf_common+0xd6>
 8006534:	2000      	movs	r0, #0
 8006536:	e008      	b.n	800654a <_printf_common+0xb6>
 8006538:	2301      	movs	r3, #1
 800653a:	4652      	mov	r2, sl
 800653c:	4639      	mov	r1, r7
 800653e:	4630      	mov	r0, r6
 8006540:	47c0      	blx	r8
 8006542:	3001      	adds	r0, #1
 8006544:	d103      	bne.n	800654e <_printf_common+0xba>
 8006546:	f04f 30ff 	mov.w	r0, #4294967295
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	3501      	adds	r5, #1
 8006550:	e7c3      	b.n	80064da <_printf_common+0x46>
 8006552:	18e1      	adds	r1, r4, r3
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	2030      	movs	r0, #48	; 0x30
 8006558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800655c:	4422      	add	r2, r4
 800655e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006566:	3302      	adds	r3, #2
 8006568:	e7c5      	b.n	80064f6 <_printf_common+0x62>
 800656a:	2301      	movs	r3, #1
 800656c:	4622      	mov	r2, r4
 800656e:	4639      	mov	r1, r7
 8006570:	4630      	mov	r0, r6
 8006572:	47c0      	blx	r8
 8006574:	3001      	adds	r0, #1
 8006576:	d0e6      	beq.n	8006546 <_printf_common+0xb2>
 8006578:	f109 0901 	add.w	r9, r9, #1
 800657c:	e7d8      	b.n	8006530 <_printf_common+0x9c>
	...

08006580 <_printf_i>:
 8006580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006584:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006588:	460c      	mov	r4, r1
 800658a:	7e09      	ldrb	r1, [r1, #24]
 800658c:	b085      	sub	sp, #20
 800658e:	296e      	cmp	r1, #110	; 0x6e
 8006590:	4617      	mov	r7, r2
 8006592:	4606      	mov	r6, r0
 8006594:	4698      	mov	r8, r3
 8006596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006598:	f000 80b3 	beq.w	8006702 <_printf_i+0x182>
 800659c:	d822      	bhi.n	80065e4 <_printf_i+0x64>
 800659e:	2963      	cmp	r1, #99	; 0x63
 80065a0:	d036      	beq.n	8006610 <_printf_i+0x90>
 80065a2:	d80a      	bhi.n	80065ba <_printf_i+0x3a>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	f000 80b9 	beq.w	800671c <_printf_i+0x19c>
 80065aa:	2958      	cmp	r1, #88	; 0x58
 80065ac:	f000 8083 	beq.w	80066b6 <_printf_i+0x136>
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065b8:	e032      	b.n	8006620 <_printf_i+0xa0>
 80065ba:	2964      	cmp	r1, #100	; 0x64
 80065bc:	d001      	beq.n	80065c2 <_printf_i+0x42>
 80065be:	2969      	cmp	r1, #105	; 0x69
 80065c0:	d1f6      	bne.n	80065b0 <_printf_i+0x30>
 80065c2:	6820      	ldr	r0, [r4, #0]
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	0605      	lsls	r5, r0, #24
 80065c8:	f103 0104 	add.w	r1, r3, #4
 80065cc:	d52a      	bpl.n	8006624 <_printf_i+0xa4>
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da03      	bge.n	80065de <_printf_i+0x5e>
 80065d6:	222d      	movs	r2, #45	; 0x2d
 80065d8:	425b      	negs	r3, r3
 80065da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065de:	486f      	ldr	r0, [pc, #444]	; (800679c <_printf_i+0x21c>)
 80065e0:	220a      	movs	r2, #10
 80065e2:	e039      	b.n	8006658 <_printf_i+0xd8>
 80065e4:	2973      	cmp	r1, #115	; 0x73
 80065e6:	f000 809d 	beq.w	8006724 <_printf_i+0x1a4>
 80065ea:	d808      	bhi.n	80065fe <_printf_i+0x7e>
 80065ec:	296f      	cmp	r1, #111	; 0x6f
 80065ee:	d020      	beq.n	8006632 <_printf_i+0xb2>
 80065f0:	2970      	cmp	r1, #112	; 0x70
 80065f2:	d1dd      	bne.n	80065b0 <_printf_i+0x30>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	f043 0320 	orr.w	r3, r3, #32
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	e003      	b.n	8006606 <_printf_i+0x86>
 80065fe:	2975      	cmp	r1, #117	; 0x75
 8006600:	d017      	beq.n	8006632 <_printf_i+0xb2>
 8006602:	2978      	cmp	r1, #120	; 0x78
 8006604:	d1d4      	bne.n	80065b0 <_printf_i+0x30>
 8006606:	2378      	movs	r3, #120	; 0x78
 8006608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800660c:	4864      	ldr	r0, [pc, #400]	; (80067a0 <_printf_i+0x220>)
 800660e:	e055      	b.n	80066bc <_printf_i+0x13c>
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	1d19      	adds	r1, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6011      	str	r1, [r2, #0]
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e08c      	b.n	800673e <_printf_i+0x1be>
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6011      	str	r1, [r2, #0]
 8006628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800662c:	bf18      	it	ne
 800662e:	b21b      	sxthne	r3, r3
 8006630:	e7cf      	b.n	80065d2 <_printf_i+0x52>
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	1d18      	adds	r0, r3, #4
 8006638:	6010      	str	r0, [r2, #0]
 800663a:	0628      	lsls	r0, r5, #24
 800663c:	d501      	bpl.n	8006642 <_printf_i+0xc2>
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	e002      	b.n	8006648 <_printf_i+0xc8>
 8006642:	0668      	lsls	r0, r5, #25
 8006644:	d5fb      	bpl.n	800663e <_printf_i+0xbe>
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	4854      	ldr	r0, [pc, #336]	; (800679c <_printf_i+0x21c>)
 800664a:	296f      	cmp	r1, #111	; 0x6f
 800664c:	bf14      	ite	ne
 800664e:	220a      	movne	r2, #10
 8006650:	2208      	moveq	r2, #8
 8006652:	2100      	movs	r1, #0
 8006654:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006658:	6865      	ldr	r5, [r4, #4]
 800665a:	60a5      	str	r5, [r4, #8]
 800665c:	2d00      	cmp	r5, #0
 800665e:	f2c0 8095 	blt.w	800678c <_printf_i+0x20c>
 8006662:	6821      	ldr	r1, [r4, #0]
 8006664:	f021 0104 	bic.w	r1, r1, #4
 8006668:	6021      	str	r1, [r4, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d13d      	bne.n	80066ea <_printf_i+0x16a>
 800666e:	2d00      	cmp	r5, #0
 8006670:	f040 808e 	bne.w	8006790 <_printf_i+0x210>
 8006674:	4665      	mov	r5, ip
 8006676:	2a08      	cmp	r2, #8
 8006678:	d10b      	bne.n	8006692 <_printf_i+0x112>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	07db      	lsls	r3, r3, #31
 800667e:	d508      	bpl.n	8006692 <_printf_i+0x112>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	6862      	ldr	r2, [r4, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	bfde      	ittt	le
 8006688:	2330      	movle	r3, #48	; 0x30
 800668a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800668e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006692:	ebac 0305 	sub.w	r3, ip, r5
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	f8cd 8000 	str.w	r8, [sp]
 800669c:	463b      	mov	r3, r7
 800669e:	aa03      	add	r2, sp, #12
 80066a0:	4621      	mov	r1, r4
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff fef6 	bl	8006494 <_printf_common>
 80066a8:	3001      	adds	r0, #1
 80066aa:	d14d      	bne.n	8006748 <_printf_i+0x1c8>
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	b005      	add	sp, #20
 80066b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b6:	4839      	ldr	r0, [pc, #228]	; (800679c <_printf_i+0x21c>)
 80066b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066bc:	6813      	ldr	r3, [r2, #0]
 80066be:	6821      	ldr	r1, [r4, #0]
 80066c0:	1d1d      	adds	r5, r3, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6015      	str	r5, [r2, #0]
 80066c6:	060a      	lsls	r2, r1, #24
 80066c8:	d50b      	bpl.n	80066e2 <_printf_i+0x162>
 80066ca:	07ca      	lsls	r2, r1, #31
 80066cc:	bf44      	itt	mi
 80066ce:	f041 0120 	orrmi.w	r1, r1, #32
 80066d2:	6021      	strmi	r1, [r4, #0]
 80066d4:	b91b      	cbnz	r3, 80066de <_printf_i+0x15e>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	f022 0220 	bic.w	r2, r2, #32
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	2210      	movs	r2, #16
 80066e0:	e7b7      	b.n	8006652 <_printf_i+0xd2>
 80066e2:	064d      	lsls	r5, r1, #25
 80066e4:	bf48      	it	mi
 80066e6:	b29b      	uxthmi	r3, r3
 80066e8:	e7ef      	b.n	80066ca <_printf_i+0x14a>
 80066ea:	4665      	mov	r5, ip
 80066ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f0:	fb02 3311 	mls	r3, r2, r1, r3
 80066f4:	5cc3      	ldrb	r3, [r0, r3]
 80066f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066fa:	460b      	mov	r3, r1
 80066fc:	2900      	cmp	r1, #0
 80066fe:	d1f5      	bne.n	80066ec <_printf_i+0x16c>
 8006700:	e7b9      	b.n	8006676 <_printf_i+0xf6>
 8006702:	6813      	ldr	r3, [r2, #0]
 8006704:	6825      	ldr	r5, [r4, #0]
 8006706:	6961      	ldr	r1, [r4, #20]
 8006708:	1d18      	adds	r0, r3, #4
 800670a:	6010      	str	r0, [r2, #0]
 800670c:	0628      	lsls	r0, r5, #24
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	d501      	bpl.n	8006716 <_printf_i+0x196>
 8006712:	6019      	str	r1, [r3, #0]
 8006714:	e002      	b.n	800671c <_printf_i+0x19c>
 8006716:	066a      	lsls	r2, r5, #25
 8006718:	d5fb      	bpl.n	8006712 <_printf_i+0x192>
 800671a:	8019      	strh	r1, [r3, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	4665      	mov	r5, ip
 8006722:	e7b9      	b.n	8006698 <_printf_i+0x118>
 8006724:	6813      	ldr	r3, [r2, #0]
 8006726:	1d19      	adds	r1, r3, #4
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	681d      	ldr	r5, [r3, #0]
 800672c:	6862      	ldr	r2, [r4, #4]
 800672e:	2100      	movs	r1, #0
 8006730:	4628      	mov	r0, r5
 8006732:	f7f9 fd5d 	bl	80001f0 <memchr>
 8006736:	b108      	cbz	r0, 800673c <_printf_i+0x1bc>
 8006738:	1b40      	subs	r0, r0, r5
 800673a:	6060      	str	r0, [r4, #4]
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	2300      	movs	r3, #0
 8006742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006746:	e7a7      	b.n	8006698 <_printf_i+0x118>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	462a      	mov	r2, r5
 800674c:	4639      	mov	r1, r7
 800674e:	4630      	mov	r0, r6
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d0aa      	beq.n	80066ac <_printf_i+0x12c>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	079b      	lsls	r3, r3, #30
 800675a:	d413      	bmi.n	8006784 <_printf_i+0x204>
 800675c:	68e0      	ldr	r0, [r4, #12]
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	4298      	cmp	r0, r3
 8006762:	bfb8      	it	lt
 8006764:	4618      	movlt	r0, r3
 8006766:	e7a3      	b.n	80066b0 <_printf_i+0x130>
 8006768:	2301      	movs	r3, #1
 800676a:	464a      	mov	r2, r9
 800676c:	4639      	mov	r1, r7
 800676e:	4630      	mov	r0, r6
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d09a      	beq.n	80066ac <_printf_i+0x12c>
 8006776:	3501      	adds	r5, #1
 8006778:	68e3      	ldr	r3, [r4, #12]
 800677a:	9a03      	ldr	r2, [sp, #12]
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	42ab      	cmp	r3, r5
 8006780:	dcf2      	bgt.n	8006768 <_printf_i+0x1e8>
 8006782:	e7eb      	b.n	800675c <_printf_i+0x1dc>
 8006784:	2500      	movs	r5, #0
 8006786:	f104 0919 	add.w	r9, r4, #25
 800678a:	e7f5      	b.n	8006778 <_printf_i+0x1f8>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1ac      	bne.n	80066ea <_printf_i+0x16a>
 8006790:	7803      	ldrb	r3, [r0, #0]
 8006792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679a:	e76c      	b.n	8006676 <_printf_i+0xf6>
 800679c:	0800a3d6 	.word	0x0800a3d6
 80067a0:	0800a3e7 	.word	0x0800a3e7

080067a4 <_scanf_float>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	469a      	mov	sl, r3
 80067aa:	688b      	ldr	r3, [r1, #8]
 80067ac:	4616      	mov	r6, r2
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067b4:	b087      	sub	sp, #28
 80067b6:	bf83      	ittte	hi
 80067b8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80067bc:	189b      	addhi	r3, r3, r2
 80067be:	9301      	strhi	r3, [sp, #4]
 80067c0:	2300      	movls	r3, #0
 80067c2:	bf86      	itte	hi
 80067c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067c8:	608b      	strhi	r3, [r1, #8]
 80067ca:	9301      	strls	r3, [sp, #4]
 80067cc:	680b      	ldr	r3, [r1, #0]
 80067ce:	4688      	mov	r8, r1
 80067d0:	f04f 0b00 	mov.w	fp, #0
 80067d4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067d8:	f848 3b1c 	str.w	r3, [r8], #28
 80067dc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80067e0:	4607      	mov	r7, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4645      	mov	r5, r8
 80067e6:	465a      	mov	r2, fp
 80067e8:	46d9      	mov	r9, fp
 80067ea:	f8cd b008 	str.w	fp, [sp, #8]
 80067ee:	68a1      	ldr	r1, [r4, #8]
 80067f0:	b181      	cbz	r1, 8006814 <_scanf_float+0x70>
 80067f2:	6833      	ldr	r3, [r6, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b49      	cmp	r3, #73	; 0x49
 80067f8:	d071      	beq.n	80068de <_scanf_float+0x13a>
 80067fa:	d84d      	bhi.n	8006898 <_scanf_float+0xf4>
 80067fc:	2b39      	cmp	r3, #57	; 0x39
 80067fe:	d840      	bhi.n	8006882 <_scanf_float+0xde>
 8006800:	2b31      	cmp	r3, #49	; 0x31
 8006802:	f080 8088 	bcs.w	8006916 <_scanf_float+0x172>
 8006806:	2b2d      	cmp	r3, #45	; 0x2d
 8006808:	f000 8090 	beq.w	800692c <_scanf_float+0x188>
 800680c:	d815      	bhi.n	800683a <_scanf_float+0x96>
 800680e:	2b2b      	cmp	r3, #43	; 0x2b
 8006810:	f000 808c 	beq.w	800692c <_scanf_float+0x188>
 8006814:	f1b9 0f00 	cmp.w	r9, #0
 8006818:	d003      	beq.n	8006822 <_scanf_float+0x7e>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	3a01      	subs	r2, #1
 8006824:	2a01      	cmp	r2, #1
 8006826:	f200 80ea 	bhi.w	80069fe <_scanf_float+0x25a>
 800682a:	4545      	cmp	r5, r8
 800682c:	f200 80dc 	bhi.w	80069e8 <_scanf_float+0x244>
 8006830:	2601      	movs	r6, #1
 8006832:	4630      	mov	r0, r6
 8006834:	b007      	add	sp, #28
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	2b2e      	cmp	r3, #46	; 0x2e
 800683c:	f000 809f 	beq.w	800697e <_scanf_float+0x1da>
 8006840:	2b30      	cmp	r3, #48	; 0x30
 8006842:	d1e7      	bne.n	8006814 <_scanf_float+0x70>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	f410 7f80 	tst.w	r0, #256	; 0x100
 800684a:	d064      	beq.n	8006916 <_scanf_float+0x172>
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006852:	6020      	str	r0, [r4, #0]
 8006854:	f109 0901 	add.w	r9, r9, #1
 8006858:	b11b      	cbz	r3, 8006862 <_scanf_float+0xbe>
 800685a:	3b01      	subs	r3, #1
 800685c:	3101      	adds	r1, #1
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	60a1      	str	r1, [r4, #8]
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	3b01      	subs	r3, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	3301      	adds	r3, #1
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	6873      	ldr	r3, [r6, #4]
 8006870:	3b01      	subs	r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	6073      	str	r3, [r6, #4]
 8006876:	f340 80ac 	ble.w	80069d2 <_scanf_float+0x22e>
 800687a:	6833      	ldr	r3, [r6, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	e7b5      	b.n	80067ee <_scanf_float+0x4a>
 8006882:	2b45      	cmp	r3, #69	; 0x45
 8006884:	f000 8085 	beq.w	8006992 <_scanf_float+0x1ee>
 8006888:	2b46      	cmp	r3, #70	; 0x46
 800688a:	d06a      	beq.n	8006962 <_scanf_float+0x1be>
 800688c:	2b41      	cmp	r3, #65	; 0x41
 800688e:	d1c1      	bne.n	8006814 <_scanf_float+0x70>
 8006890:	2a01      	cmp	r2, #1
 8006892:	d1bf      	bne.n	8006814 <_scanf_float+0x70>
 8006894:	2202      	movs	r2, #2
 8006896:	e046      	b.n	8006926 <_scanf_float+0x182>
 8006898:	2b65      	cmp	r3, #101	; 0x65
 800689a:	d07a      	beq.n	8006992 <_scanf_float+0x1ee>
 800689c:	d818      	bhi.n	80068d0 <_scanf_float+0x12c>
 800689e:	2b54      	cmp	r3, #84	; 0x54
 80068a0:	d066      	beq.n	8006970 <_scanf_float+0x1cc>
 80068a2:	d811      	bhi.n	80068c8 <_scanf_float+0x124>
 80068a4:	2b4e      	cmp	r3, #78	; 0x4e
 80068a6:	d1b5      	bne.n	8006814 <_scanf_float+0x70>
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d146      	bne.n	800693a <_scanf_float+0x196>
 80068ac:	f1b9 0f00 	cmp.w	r9, #0
 80068b0:	d145      	bne.n	800693e <_scanf_float+0x19a>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80068b8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80068bc:	d13f      	bne.n	800693e <_scanf_float+0x19a>
 80068be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80068c2:	6021      	str	r1, [r4, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	e02e      	b.n	8006926 <_scanf_float+0x182>
 80068c8:	2b59      	cmp	r3, #89	; 0x59
 80068ca:	d01e      	beq.n	800690a <_scanf_float+0x166>
 80068cc:	2b61      	cmp	r3, #97	; 0x61
 80068ce:	e7de      	b.n	800688e <_scanf_float+0xea>
 80068d0:	2b6e      	cmp	r3, #110	; 0x6e
 80068d2:	d0e9      	beq.n	80068a8 <_scanf_float+0x104>
 80068d4:	d815      	bhi.n	8006902 <_scanf_float+0x15e>
 80068d6:	2b66      	cmp	r3, #102	; 0x66
 80068d8:	d043      	beq.n	8006962 <_scanf_float+0x1be>
 80068da:	2b69      	cmp	r3, #105	; 0x69
 80068dc:	d19a      	bne.n	8006814 <_scanf_float+0x70>
 80068de:	f1bb 0f00 	cmp.w	fp, #0
 80068e2:	d138      	bne.n	8006956 <_scanf_float+0x1b2>
 80068e4:	f1b9 0f00 	cmp.w	r9, #0
 80068e8:	d197      	bne.n	800681a <_scanf_float+0x76>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80068f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80068f4:	d195      	bne.n	8006822 <_scanf_float+0x7e>
 80068f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80068fa:	6021      	str	r1, [r4, #0]
 80068fc:	f04f 0b01 	mov.w	fp, #1
 8006900:	e011      	b.n	8006926 <_scanf_float+0x182>
 8006902:	2b74      	cmp	r3, #116	; 0x74
 8006904:	d034      	beq.n	8006970 <_scanf_float+0x1cc>
 8006906:	2b79      	cmp	r3, #121	; 0x79
 8006908:	d184      	bne.n	8006814 <_scanf_float+0x70>
 800690a:	f1bb 0f07 	cmp.w	fp, #7
 800690e:	d181      	bne.n	8006814 <_scanf_float+0x70>
 8006910:	f04f 0b08 	mov.w	fp, #8
 8006914:	e007      	b.n	8006926 <_scanf_float+0x182>
 8006916:	eb12 0f0b 	cmn.w	r2, fp
 800691a:	f47f af7b 	bne.w	8006814 <_scanf_float+0x70>
 800691e:	6821      	ldr	r1, [r4, #0]
 8006920:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006924:	6021      	str	r1, [r4, #0]
 8006926:	702b      	strb	r3, [r5, #0]
 8006928:	3501      	adds	r5, #1
 800692a:	e79a      	b.n	8006862 <_scanf_float+0xbe>
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	0608      	lsls	r0, r1, #24
 8006930:	f57f af70 	bpl.w	8006814 <_scanf_float+0x70>
 8006934:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006938:	e7f4      	b.n	8006924 <_scanf_float+0x180>
 800693a:	2a02      	cmp	r2, #2
 800693c:	d047      	beq.n	80069ce <_scanf_float+0x22a>
 800693e:	f1bb 0f01 	cmp.w	fp, #1
 8006942:	d003      	beq.n	800694c <_scanf_float+0x1a8>
 8006944:	f1bb 0f04 	cmp.w	fp, #4
 8006948:	f47f af64 	bne.w	8006814 <_scanf_float+0x70>
 800694c:	f10b 0b01 	add.w	fp, fp, #1
 8006950:	fa5f fb8b 	uxtb.w	fp, fp
 8006954:	e7e7      	b.n	8006926 <_scanf_float+0x182>
 8006956:	f1bb 0f03 	cmp.w	fp, #3
 800695a:	d0f7      	beq.n	800694c <_scanf_float+0x1a8>
 800695c:	f1bb 0f05 	cmp.w	fp, #5
 8006960:	e7f2      	b.n	8006948 <_scanf_float+0x1a4>
 8006962:	f1bb 0f02 	cmp.w	fp, #2
 8006966:	f47f af55 	bne.w	8006814 <_scanf_float+0x70>
 800696a:	f04f 0b03 	mov.w	fp, #3
 800696e:	e7da      	b.n	8006926 <_scanf_float+0x182>
 8006970:	f1bb 0f06 	cmp.w	fp, #6
 8006974:	f47f af4e 	bne.w	8006814 <_scanf_float+0x70>
 8006978:	f04f 0b07 	mov.w	fp, #7
 800697c:	e7d3      	b.n	8006926 <_scanf_float+0x182>
 800697e:	6821      	ldr	r1, [r4, #0]
 8006980:	0588      	lsls	r0, r1, #22
 8006982:	f57f af47 	bpl.w	8006814 <_scanf_float+0x70>
 8006986:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800698a:	6021      	str	r1, [r4, #0]
 800698c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006990:	e7c9      	b.n	8006926 <_scanf_float+0x182>
 8006992:	6821      	ldr	r1, [r4, #0]
 8006994:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006998:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800699c:	d006      	beq.n	80069ac <_scanf_float+0x208>
 800699e:	0548      	lsls	r0, r1, #21
 80069a0:	f57f af38 	bpl.w	8006814 <_scanf_float+0x70>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	f43f af3b 	beq.w	8006822 <_scanf_float+0x7e>
 80069ac:	0588      	lsls	r0, r1, #22
 80069ae:	bf58      	it	pl
 80069b0:	9802      	ldrpl	r0, [sp, #8]
 80069b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80069b6:	bf58      	it	pl
 80069b8:	eba9 0000 	subpl.w	r0, r9, r0
 80069bc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80069c0:	bf58      	it	pl
 80069c2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80069c6:	6021      	str	r1, [r4, #0]
 80069c8:	f04f 0900 	mov.w	r9, #0
 80069cc:	e7ab      	b.n	8006926 <_scanf_float+0x182>
 80069ce:	2203      	movs	r2, #3
 80069d0:	e7a9      	b.n	8006926 <_scanf_float+0x182>
 80069d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069d6:	9205      	str	r2, [sp, #20]
 80069d8:	4631      	mov	r1, r6
 80069da:	4638      	mov	r0, r7
 80069dc:	4798      	blx	r3
 80069de:	9a05      	ldr	r2, [sp, #20]
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f43f af04 	beq.w	80067ee <_scanf_float+0x4a>
 80069e6:	e715      	b.n	8006814 <_scanf_float+0x70>
 80069e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80069f0:	4632      	mov	r2, r6
 80069f2:	4638      	mov	r0, r7
 80069f4:	4798      	blx	r3
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	e715      	b.n	800682a <_scanf_float+0x86>
 80069fe:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006a02:	2b06      	cmp	r3, #6
 8006a04:	d80a      	bhi.n	8006a1c <_scanf_float+0x278>
 8006a06:	f1bb 0f02 	cmp.w	fp, #2
 8006a0a:	d968      	bls.n	8006ade <_scanf_float+0x33a>
 8006a0c:	f1ab 0b03 	sub.w	fp, fp, #3
 8006a10:	fa5f fb8b 	uxtb.w	fp, fp
 8006a14:	eba5 0b0b 	sub.w	fp, r5, fp
 8006a18:	455d      	cmp	r5, fp
 8006a1a:	d14b      	bne.n	8006ab4 <_scanf_float+0x310>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	05da      	lsls	r2, r3, #23
 8006a20:	d51f      	bpl.n	8006a62 <_scanf_float+0x2be>
 8006a22:	055b      	lsls	r3, r3, #21
 8006a24:	d468      	bmi.n	8006af8 <_scanf_float+0x354>
 8006a26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	2965      	cmp	r1, #101	; 0x65
 8006a2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a32:	f105 3bff 	add.w	fp, r5, #4294967295
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	d00d      	beq.n	8006a56 <_scanf_float+0x2b2>
 8006a3a:	2945      	cmp	r1, #69	; 0x45
 8006a3c:	d00b      	beq.n	8006a56 <_scanf_float+0x2b2>
 8006a3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a42:	4632      	mov	r2, r6
 8006a44:	4638      	mov	r0, r7
 8006a46:	4798      	blx	r3
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f1a5 0b02 	sub.w	fp, r5, #2
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a5a:	4632      	mov	r2, r6
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	4798      	blx	r3
 8006a60:	465d      	mov	r5, fp
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	f016 0610 	ands.w	r6, r6, #16
 8006a68:	d17a      	bne.n	8006b60 <_scanf_float+0x3bc>
 8006a6a:	702e      	strb	r6, [r5, #0]
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a76:	d142      	bne.n	8006afe <_scanf_float+0x35a>
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	eba9 0303 	sub.w	r3, r9, r3
 8006a7e:	425a      	negs	r2, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d149      	bne.n	8006b18 <_scanf_float+0x374>
 8006a84:	2200      	movs	r2, #0
 8006a86:	4641      	mov	r1, r8
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f000 febd 	bl	8007808 <_strtod_r>
 8006a8e:	6825      	ldr	r5, [r4, #0]
 8006a90:	f8da 3000 	ldr.w	r3, [sl]
 8006a94:	f015 0f02 	tst.w	r5, #2
 8006a98:	f103 0204 	add.w	r2, r3, #4
 8006a9c:	ec59 8b10 	vmov	r8, r9, d0
 8006aa0:	f8ca 2000 	str.w	r2, [sl]
 8006aa4:	d043      	beq.n	8006b2e <_scanf_float+0x38a>
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	e9c3 8900 	strd	r8, r9, [r3]
 8006aac:	68e3      	ldr	r3, [r4, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60e3      	str	r3, [r4, #12]
 8006ab2:	e6be      	b.n	8006832 <_scanf_float+0x8e>
 8006ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006abc:	4632      	mov	r2, r6
 8006abe:	4638      	mov	r0, r7
 8006ac0:	4798      	blx	r3
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	e7a6      	b.n	8006a18 <_scanf_float+0x274>
 8006aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ace:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	4798      	blx	r3
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	4545      	cmp	r5, r8
 8006ae0:	d8f3      	bhi.n	8006aca <_scanf_float+0x326>
 8006ae2:	e6a5      	b.n	8006830 <_scanf_float+0x8c>
 8006ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006aec:	4632      	mov	r2, r6
 8006aee:	4638      	mov	r0, r7
 8006af0:	4798      	blx	r3
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	4545      	cmp	r5, r8
 8006afa:	d8f3      	bhi.n	8006ae4 <_scanf_float+0x340>
 8006afc:	e698      	b.n	8006830 <_scanf_float+0x8c>
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0bf      	beq.n	8006a84 <_scanf_float+0x2e0>
 8006b04:	9904      	ldr	r1, [sp, #16]
 8006b06:	230a      	movs	r3, #10
 8006b08:	4632      	mov	r2, r6
 8006b0a:	3101      	adds	r1, #1
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f000 ff47 	bl	80079a0 <_strtol_r>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	9d04      	ldr	r5, [sp, #16]
 8006b16:	1ac2      	subs	r2, r0, r3
 8006b18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	bf28      	it	cs
 8006b20:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006b24:	490f      	ldr	r1, [pc, #60]	; (8006b64 <_scanf_float+0x3c0>)
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 f83c 	bl	8006ba4 <siprintf>
 8006b2c:	e7aa      	b.n	8006a84 <_scanf_float+0x2e0>
 8006b2e:	f015 0504 	ands.w	r5, r5, #4
 8006b32:	d1b8      	bne.n	8006aa6 <_scanf_float+0x302>
 8006b34:	681f      	ldr	r7, [r3, #0]
 8006b36:	ee10 2a10 	vmov	r2, s0
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	ee10 0a10 	vmov	r0, s0
 8006b40:	4649      	mov	r1, r9
 8006b42:	f7f9 fffb 	bl	8000b3c <__aeabi_dcmpun>
 8006b46:	b128      	cbz	r0, 8006b54 <_scanf_float+0x3b0>
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 f825 	bl	8006b98 <nanf>
 8006b4e:	ed87 0a00 	vstr	s0, [r7]
 8006b52:	e7ab      	b.n	8006aac <_scanf_float+0x308>
 8006b54:	4640      	mov	r0, r8
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7fa f84e 	bl	8000bf8 <__aeabi_d2f>
 8006b5c:	6038      	str	r0, [r7, #0]
 8006b5e:	e7a5      	b.n	8006aac <_scanf_float+0x308>
 8006b60:	2600      	movs	r6, #0
 8006b62:	e666      	b.n	8006832 <_scanf_float+0x8e>
 8006b64:	0800a3f8 	.word	0x0800a3f8

08006b68 <iprintf>:
 8006b68:	b40f      	push	{r0, r1, r2, r3}
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <iprintf+0x2c>)
 8006b6c:	b513      	push	{r0, r1, r4, lr}
 8006b6e:	681c      	ldr	r4, [r3, #0]
 8006b70:	b124      	cbz	r4, 8006b7c <iprintf+0x14>
 8006b72:	69a3      	ldr	r3, [r4, #24]
 8006b74:	b913      	cbnz	r3, 8006b7c <iprintf+0x14>
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 fdaa 	bl	80086d0 <__sinit>
 8006b7c:	ab05      	add	r3, sp, #20
 8006b7e:	9a04      	ldr	r2, [sp, #16]
 8006b80:	68a1      	ldr	r1, [r4, #8]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	4620      	mov	r0, r4
 8006b86:	f002 ffb3 	bl	8009af0 <_vfiprintf_r>
 8006b8a:	b002      	add	sp, #8
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	b004      	add	sp, #16
 8006b92:	4770      	bx	lr
 8006b94:	20000010 	.word	0x20000010

08006b98 <nanf>:
 8006b98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ba0 <nanf+0x8>
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	7fc00000 	.word	0x7fc00000

08006ba4 <siprintf>:
 8006ba4:	b40e      	push	{r1, r2, r3}
 8006ba6:	b500      	push	{lr}
 8006ba8:	b09c      	sub	sp, #112	; 0x70
 8006baa:	ab1d      	add	r3, sp, #116	; 0x74
 8006bac:	9002      	str	r0, [sp, #8]
 8006bae:	9006      	str	r0, [sp, #24]
 8006bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb4:	4809      	ldr	r0, [pc, #36]	; (8006bdc <siprintf+0x38>)
 8006bb6:	9107      	str	r1, [sp, #28]
 8006bb8:	9104      	str	r1, [sp, #16]
 8006bba:	4909      	ldr	r1, [pc, #36]	; (8006be0 <siprintf+0x3c>)
 8006bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	6800      	ldr	r0, [r0, #0]
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	a902      	add	r1, sp, #8
 8006bc8:	f002 fe70 	bl	80098ac <_svfiprintf_r>
 8006bcc:	9b02      	ldr	r3, [sp, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	b01c      	add	sp, #112	; 0x70
 8006bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd8:	b003      	add	sp, #12
 8006bda:	4770      	bx	lr
 8006bdc:	20000010 	.word	0x20000010
 8006be0:	ffff0208 	.word	0xffff0208

08006be4 <sulp>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4604      	mov	r4, r0
 8006be8:	460d      	mov	r5, r1
 8006bea:	ec45 4b10 	vmov	d0, r4, r5
 8006bee:	4616      	mov	r6, r2
 8006bf0:	f002 fc18 	bl	8009424 <__ulp>
 8006bf4:	ec51 0b10 	vmov	r0, r1, d0
 8006bf8:	b17e      	cbz	r6, 8006c1a <sulp+0x36>
 8006bfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006bfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd09      	ble.n	8006c1a <sulp+0x36>
 8006c06:	051b      	lsls	r3, r3, #20
 8006c08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c12:	4622      	mov	r2, r4
 8006c14:	462b      	mov	r3, r5
 8006c16:	f7f9 fcf7 	bl	8000608 <__aeabi_dmul>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	0000      	movs	r0, r0
	...

08006c20 <_strtod_l>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	461f      	mov	r7, r3
 8006c26:	b0a1      	sub	sp, #132	; 0x84
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4681      	mov	r9, r0
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	460e      	mov	r6, r1
 8006c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c32:	931c      	str	r3, [sp, #112]	; 0x70
 8006c34:	f002 f8ff 	bl	8008e36 <__localeconv_l>
 8006c38:	4680      	mov	r8, r0
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f7f9 fad0 	bl	80001e0 <strlen>
 8006c40:	f04f 0a00 	mov.w	sl, #0
 8006c44:	4604      	mov	r4, r0
 8006c46:	f04f 0b00 	mov.w	fp, #0
 8006c4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c4e:	781a      	ldrb	r2, [r3, #0]
 8006c50:	2a0d      	cmp	r2, #13
 8006c52:	d832      	bhi.n	8006cba <_strtod_l+0x9a>
 8006c54:	2a09      	cmp	r2, #9
 8006c56:	d236      	bcs.n	8006cc6 <_strtod_l+0xa6>
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d03e      	beq.n	8006cda <_strtod_l+0xba>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006c62:	782b      	ldrb	r3, [r5, #0]
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	f040 80ac 	bne.w	8006dc2 <_strtod_l+0x1a2>
 8006c6a:	786b      	ldrb	r3, [r5, #1]
 8006c6c:	2b58      	cmp	r3, #88	; 0x58
 8006c6e:	d001      	beq.n	8006c74 <_strtod_l+0x54>
 8006c70:	2b78      	cmp	r3, #120	; 0x78
 8006c72:	d167      	bne.n	8006d44 <_strtod_l+0x124>
 8006c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	ab1c      	add	r3, sp, #112	; 0x70
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	9702      	str	r7, [sp, #8]
 8006c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c80:	4a88      	ldr	r2, [pc, #544]	; (8006ea4 <_strtod_l+0x284>)
 8006c82:	a91b      	add	r1, sp, #108	; 0x6c
 8006c84:	4648      	mov	r0, r9
 8006c86:	f001 fdfc 	bl	8008882 <__gethex>
 8006c8a:	f010 0407 	ands.w	r4, r0, #7
 8006c8e:	4606      	mov	r6, r0
 8006c90:	d005      	beq.n	8006c9e <_strtod_l+0x7e>
 8006c92:	2c06      	cmp	r4, #6
 8006c94:	d12b      	bne.n	8006cee <_strtod_l+0xce>
 8006c96:	3501      	adds	r5, #1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8006c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 859a 	bne.w	80077da <_strtod_l+0xbba>
 8006ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca8:	b1e3      	cbz	r3, 8006ce4 <_strtod_l+0xc4>
 8006caa:	4652      	mov	r2, sl
 8006cac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cb0:	ec43 2b10 	vmov	d0, r2, r3
 8006cb4:	b021      	add	sp, #132	; 0x84
 8006cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cba:	2a2b      	cmp	r2, #43	; 0x2b
 8006cbc:	d015      	beq.n	8006cea <_strtod_l+0xca>
 8006cbe:	2a2d      	cmp	r2, #45	; 0x2d
 8006cc0:	d004      	beq.n	8006ccc <_strtod_l+0xac>
 8006cc2:	2a20      	cmp	r2, #32
 8006cc4:	d1ca      	bne.n	8006c5c <_strtod_l+0x3c>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cca:	e7bf      	b.n	8006c4c <_strtod_l+0x2c>
 8006ccc:	2201      	movs	r2, #1
 8006cce:	920d      	str	r2, [sp, #52]	; 0x34
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1c2      	bne.n	8006c60 <_strtod_l+0x40>
 8006cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cdc:	961b      	str	r6, [sp, #108]	; 0x6c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8579 	bne.w	80077d6 <_strtod_l+0xbb6>
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	465b      	mov	r3, fp
 8006ce8:	e7e2      	b.n	8006cb0 <_strtod_l+0x90>
 8006cea:	2200      	movs	r2, #0
 8006cec:	e7ef      	b.n	8006cce <_strtod_l+0xae>
 8006cee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006cf0:	b13a      	cbz	r2, 8006d02 <_strtod_l+0xe2>
 8006cf2:	2135      	movs	r1, #53	; 0x35
 8006cf4:	a81e      	add	r0, sp, #120	; 0x78
 8006cf6:	f002 fc8d 	bl	8009614 <__copybits>
 8006cfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f002 f8f9 	bl	8008ef4 <_Bfree>
 8006d02:	3c01      	subs	r4, #1
 8006d04:	2c04      	cmp	r4, #4
 8006d06:	d806      	bhi.n	8006d16 <_strtod_l+0xf6>
 8006d08:	e8df f004 	tbb	[pc, r4]
 8006d0c:	1714030a 	.word	0x1714030a
 8006d10:	0a          	.byte	0x0a
 8006d11:	00          	.byte	0x00
 8006d12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006d16:	0730      	lsls	r0, r6, #28
 8006d18:	d5c1      	bpl.n	8006c9e <_strtod_l+0x7e>
 8006d1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d1e:	e7be      	b.n	8006c9e <_strtod_l+0x7e>
 8006d20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006d24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d32:	e7f0      	b.n	8006d16 <_strtod_l+0xf6>
 8006d34:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006ea8 <_strtod_l+0x288>
 8006d38:	e7ed      	b.n	8006d16 <_strtod_l+0xf6>
 8006d3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006d42:	e7e8      	b.n	8006d16 <_strtod_l+0xf6>
 8006d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b30      	cmp	r3, #48	; 0x30
 8006d4e:	d0f9      	beq.n	8006d44 <_strtod_l+0x124>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0a4      	beq.n	8006c9e <_strtod_l+0x7e>
 8006d54:	2301      	movs	r3, #1
 8006d56:	2500      	movs	r5, #0
 8006d58:	9306      	str	r3, [sp, #24]
 8006d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d5c:	9308      	str	r3, [sp, #32]
 8006d5e:	9507      	str	r5, [sp, #28]
 8006d60:	9505      	str	r5, [sp, #20]
 8006d62:	220a      	movs	r2, #10
 8006d64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006d66:	7807      	ldrb	r7, [r0, #0]
 8006d68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006d6c:	b2d9      	uxtb	r1, r3
 8006d6e:	2909      	cmp	r1, #9
 8006d70:	d929      	bls.n	8006dc6 <_strtod_l+0x1a6>
 8006d72:	4622      	mov	r2, r4
 8006d74:	f8d8 1000 	ldr.w	r1, [r8]
 8006d78:	f003 f823 	bl	8009dc2 <strncmp>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d031      	beq.n	8006de4 <_strtod_l+0x1c4>
 8006d80:	2000      	movs	r0, #0
 8006d82:	9c05      	ldr	r4, [sp, #20]
 8006d84:	9004      	str	r0, [sp, #16]
 8006d86:	463b      	mov	r3, r7
 8006d88:	4602      	mov	r2, r0
 8006d8a:	2b65      	cmp	r3, #101	; 0x65
 8006d8c:	d001      	beq.n	8006d92 <_strtod_l+0x172>
 8006d8e:	2b45      	cmp	r3, #69	; 0x45
 8006d90:	d114      	bne.n	8006dbc <_strtod_l+0x19c>
 8006d92:	b924      	cbnz	r4, 8006d9e <_strtod_l+0x17e>
 8006d94:	b910      	cbnz	r0, 8006d9c <_strtod_l+0x17c>
 8006d96:	9b06      	ldr	r3, [sp, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d09e      	beq.n	8006cda <_strtod_l+0xba>
 8006d9c:	2400      	movs	r4, #0
 8006d9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006da0:	1c73      	adds	r3, r6, #1
 8006da2:	931b      	str	r3, [sp, #108]	; 0x6c
 8006da4:	7873      	ldrb	r3, [r6, #1]
 8006da6:	2b2b      	cmp	r3, #43	; 0x2b
 8006da8:	d078      	beq.n	8006e9c <_strtod_l+0x27c>
 8006daa:	2b2d      	cmp	r3, #45	; 0x2d
 8006dac:	d070      	beq.n	8006e90 <_strtod_l+0x270>
 8006dae:	f04f 0c00 	mov.w	ip, #0
 8006db2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006db6:	2f09      	cmp	r7, #9
 8006db8:	d97c      	bls.n	8006eb4 <_strtod_l+0x294>
 8006dba:	961b      	str	r6, [sp, #108]	; 0x6c
 8006dbc:	f04f 0e00 	mov.w	lr, #0
 8006dc0:	e09a      	b.n	8006ef8 <_strtod_l+0x2d8>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e7c7      	b.n	8006d56 <_strtod_l+0x136>
 8006dc6:	9905      	ldr	r1, [sp, #20]
 8006dc8:	2908      	cmp	r1, #8
 8006dca:	bfdd      	ittte	le
 8006dcc:	9907      	ldrle	r1, [sp, #28]
 8006dce:	fb02 3301 	mlale	r3, r2, r1, r3
 8006dd2:	9307      	strle	r3, [sp, #28]
 8006dd4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	3001      	adds	r0, #1
 8006ddc:	3301      	adds	r3, #1
 8006dde:	9305      	str	r3, [sp, #20]
 8006de0:	901b      	str	r0, [sp, #108]	; 0x6c
 8006de2:	e7bf      	b.n	8006d64 <_strtod_l+0x144>
 8006de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006de6:	191a      	adds	r2, r3, r4
 8006de8:	921b      	str	r2, [sp, #108]	; 0x6c
 8006dea:	9a05      	ldr	r2, [sp, #20]
 8006dec:	5d1b      	ldrb	r3, [r3, r4]
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d037      	beq.n	8006e62 <_strtod_l+0x242>
 8006df2:	9c05      	ldr	r4, [sp, #20]
 8006df4:	4602      	mov	r2, r0
 8006df6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006dfa:	2909      	cmp	r1, #9
 8006dfc:	d913      	bls.n	8006e26 <_strtod_l+0x206>
 8006dfe:	2101      	movs	r1, #1
 8006e00:	9104      	str	r1, [sp, #16]
 8006e02:	e7c2      	b.n	8006d8a <_strtod_l+0x16a>
 8006e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d0f8      	beq.n	8006e04 <_strtod_l+0x1e4>
 8006e12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e16:	2a08      	cmp	r2, #8
 8006e18:	f200 84e4 	bhi.w	80077e4 <_strtod_l+0xbc4>
 8006e1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e1e:	9208      	str	r2, [sp, #32]
 8006e20:	4602      	mov	r2, r0
 8006e22:	2000      	movs	r0, #0
 8006e24:	4604      	mov	r4, r0
 8006e26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006e2a:	f100 0101 	add.w	r1, r0, #1
 8006e2e:	d012      	beq.n	8006e56 <_strtod_l+0x236>
 8006e30:	440a      	add	r2, r1
 8006e32:	eb00 0c04 	add.w	ip, r0, r4
 8006e36:	4621      	mov	r1, r4
 8006e38:	270a      	movs	r7, #10
 8006e3a:	458c      	cmp	ip, r1
 8006e3c:	d113      	bne.n	8006e66 <_strtod_l+0x246>
 8006e3e:	1821      	adds	r1, r4, r0
 8006e40:	2908      	cmp	r1, #8
 8006e42:	f104 0401 	add.w	r4, r4, #1
 8006e46:	4404      	add	r4, r0
 8006e48:	dc19      	bgt.n	8006e7e <_strtod_l+0x25e>
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	210a      	movs	r1, #10
 8006e4e:	fb01 e303 	mla	r3, r1, r3, lr
 8006e52:	9307      	str	r3, [sp, #28]
 8006e54:	2100      	movs	r1, #0
 8006e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e58:	1c58      	adds	r0, r3, #1
 8006e5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	4608      	mov	r0, r1
 8006e60:	e7c9      	b.n	8006df6 <_strtod_l+0x1d6>
 8006e62:	9805      	ldr	r0, [sp, #20]
 8006e64:	e7d3      	b.n	8006e0e <_strtod_l+0x1ee>
 8006e66:	2908      	cmp	r1, #8
 8006e68:	f101 0101 	add.w	r1, r1, #1
 8006e6c:	dc03      	bgt.n	8006e76 <_strtod_l+0x256>
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	437b      	muls	r3, r7
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	e7e1      	b.n	8006e3a <_strtod_l+0x21a>
 8006e76:	2910      	cmp	r1, #16
 8006e78:	bfd8      	it	le
 8006e7a:	437d      	mulle	r5, r7
 8006e7c:	e7dd      	b.n	8006e3a <_strtod_l+0x21a>
 8006e7e:	2c10      	cmp	r4, #16
 8006e80:	bfdc      	itt	le
 8006e82:	210a      	movle	r1, #10
 8006e84:	fb01 e505 	mlale	r5, r1, r5, lr
 8006e88:	e7e4      	b.n	8006e54 <_strtod_l+0x234>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	e781      	b.n	8006d94 <_strtod_l+0x174>
 8006e90:	f04f 0c01 	mov.w	ip, #1
 8006e94:	1cb3      	adds	r3, r6, #2
 8006e96:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e98:	78b3      	ldrb	r3, [r6, #2]
 8006e9a:	e78a      	b.n	8006db2 <_strtod_l+0x192>
 8006e9c:	f04f 0c00 	mov.w	ip, #0
 8006ea0:	e7f8      	b.n	8006e94 <_strtod_l+0x274>
 8006ea2:	bf00      	nop
 8006ea4:	0800a400 	.word	0x0800a400
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eae:	1c5f      	adds	r7, r3, #1
 8006eb0:	971b      	str	r7, [sp, #108]	; 0x6c
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d0f9      	beq.n	8006eac <_strtod_l+0x28c>
 8006eb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006ebc:	2f08      	cmp	r7, #8
 8006ebe:	f63f af7d 	bhi.w	8006dbc <_strtod_l+0x19c>
 8006ec2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8006eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ecc:	1c5f      	adds	r7, r3, #1
 8006ece:	971b      	str	r7, [sp, #108]	; 0x6c
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006ed6:	f1b8 0f09 	cmp.w	r8, #9
 8006eda:	d937      	bls.n	8006f4c <_strtod_l+0x32c>
 8006edc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ede:	1a7f      	subs	r7, r7, r1
 8006ee0:	2f08      	cmp	r7, #8
 8006ee2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006ee6:	dc37      	bgt.n	8006f58 <_strtod_l+0x338>
 8006ee8:	45be      	cmp	lr, r7
 8006eea:	bfa8      	it	ge
 8006eec:	46be      	movge	lr, r7
 8006eee:	f1bc 0f00 	cmp.w	ip, #0
 8006ef2:	d001      	beq.n	8006ef8 <_strtod_l+0x2d8>
 8006ef4:	f1ce 0e00 	rsb	lr, lr, #0
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	d151      	bne.n	8006fa0 <_strtod_l+0x380>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f47f aece 	bne.w	8006c9e <_strtod_l+0x7e>
 8006f02:	9a06      	ldr	r2, [sp, #24]
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	f47f aeca 	bne.w	8006c9e <_strtod_l+0x7e>
 8006f0a:	9a04      	ldr	r2, [sp, #16]
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	f47f aee4 	bne.w	8006cda <_strtod_l+0xba>
 8006f12:	2b4e      	cmp	r3, #78	; 0x4e
 8006f14:	d027      	beq.n	8006f66 <_strtod_l+0x346>
 8006f16:	dc21      	bgt.n	8006f5c <_strtod_l+0x33c>
 8006f18:	2b49      	cmp	r3, #73	; 0x49
 8006f1a:	f47f aede 	bne.w	8006cda <_strtod_l+0xba>
 8006f1e:	49a0      	ldr	r1, [pc, #640]	; (80071a0 <_strtod_l+0x580>)
 8006f20:	a81b      	add	r0, sp, #108	; 0x6c
 8006f22:	f001 fee1 	bl	8008ce8 <__match>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f aed7 	beq.w	8006cda <_strtod_l+0xba>
 8006f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f2e:	499d      	ldr	r1, [pc, #628]	; (80071a4 <_strtod_l+0x584>)
 8006f30:	3b01      	subs	r3, #1
 8006f32:	a81b      	add	r0, sp, #108	; 0x6c
 8006f34:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f36:	f001 fed7 	bl	8008ce8 <__match>
 8006f3a:	b910      	cbnz	r0, 8006f42 <_strtod_l+0x322>
 8006f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f3e:	3301      	adds	r3, #1
 8006f40:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f42:	f8df b274 	ldr.w	fp, [pc, #628]	; 80071b8 <_strtod_l+0x598>
 8006f46:	f04f 0a00 	mov.w	sl, #0
 8006f4a:	e6a8      	b.n	8006c9e <_strtod_l+0x7e>
 8006f4c:	210a      	movs	r1, #10
 8006f4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006f52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f56:	e7b8      	b.n	8006eca <_strtod_l+0x2aa>
 8006f58:	46be      	mov	lr, r7
 8006f5a:	e7c8      	b.n	8006eee <_strtod_l+0x2ce>
 8006f5c:	2b69      	cmp	r3, #105	; 0x69
 8006f5e:	d0de      	beq.n	8006f1e <_strtod_l+0x2fe>
 8006f60:	2b6e      	cmp	r3, #110	; 0x6e
 8006f62:	f47f aeba 	bne.w	8006cda <_strtod_l+0xba>
 8006f66:	4990      	ldr	r1, [pc, #576]	; (80071a8 <_strtod_l+0x588>)
 8006f68:	a81b      	add	r0, sp, #108	; 0x6c
 8006f6a:	f001 febd 	bl	8008ce8 <__match>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f43f aeb3 	beq.w	8006cda <_strtod_l+0xba>
 8006f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b28      	cmp	r3, #40	; 0x28
 8006f7a:	d10e      	bne.n	8006f9a <_strtod_l+0x37a>
 8006f7c:	aa1e      	add	r2, sp, #120	; 0x78
 8006f7e:	498b      	ldr	r1, [pc, #556]	; (80071ac <_strtod_l+0x58c>)
 8006f80:	a81b      	add	r0, sp, #108	; 0x6c
 8006f82:	f001 fec5 	bl	8008d10 <__hexnan>
 8006f86:	2805      	cmp	r0, #5
 8006f88:	d107      	bne.n	8006f9a <_strtod_l+0x37a>
 8006f8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006f90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006f98:	e681      	b.n	8006c9e <_strtod_l+0x7e>
 8006f9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80071c0 <_strtod_l+0x5a0>
 8006f9e:	e7d2      	b.n	8006f46 <_strtod_l+0x326>
 8006fa0:	ebae 0302 	sub.w	r3, lr, r2
 8006fa4:	9306      	str	r3, [sp, #24]
 8006fa6:	9b05      	ldr	r3, [sp, #20]
 8006fa8:	9807      	ldr	r0, [sp, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf08      	it	eq
 8006fae:	4623      	moveq	r3, r4
 8006fb0:	2c10      	cmp	r4, #16
 8006fb2:	9305      	str	r3, [sp, #20]
 8006fb4:	46a0      	mov	r8, r4
 8006fb6:	bfa8      	it	ge
 8006fb8:	f04f 0810 	movge.w	r8, #16
 8006fbc:	f7f9 faaa 	bl	8000514 <__aeabi_ui2d>
 8006fc0:	2c09      	cmp	r4, #9
 8006fc2:	4682      	mov	sl, r0
 8006fc4:	468b      	mov	fp, r1
 8006fc6:	dc13      	bgt.n	8006ff0 <_strtod_l+0x3d0>
 8006fc8:	9b06      	ldr	r3, [sp, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f43f ae67 	beq.w	8006c9e <_strtod_l+0x7e>
 8006fd0:	9b06      	ldr	r3, [sp, #24]
 8006fd2:	dd7a      	ble.n	80070ca <_strtod_l+0x4aa>
 8006fd4:	2b16      	cmp	r3, #22
 8006fd6:	dc61      	bgt.n	800709c <_strtod_l+0x47c>
 8006fd8:	4a75      	ldr	r2, [pc, #468]	; (80071b0 <_strtod_l+0x590>)
 8006fda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006fde:	e9de 0100 	ldrd	r0, r1, [lr]
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	f7f9 fb0f 	bl	8000608 <__aeabi_dmul>
 8006fea:	4682      	mov	sl, r0
 8006fec:	468b      	mov	fp, r1
 8006fee:	e656      	b.n	8006c9e <_strtod_l+0x7e>
 8006ff0:	4b6f      	ldr	r3, [pc, #444]	; (80071b0 <_strtod_l+0x590>)
 8006ff2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ff6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ffa:	f7f9 fb05 	bl	8000608 <__aeabi_dmul>
 8006ffe:	4606      	mov	r6, r0
 8007000:	4628      	mov	r0, r5
 8007002:	460f      	mov	r7, r1
 8007004:	f7f9 fa86 	bl	8000514 <__aeabi_ui2d>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4630      	mov	r0, r6
 800700e:	4639      	mov	r1, r7
 8007010:	f7f9 f944 	bl	800029c <__adddf3>
 8007014:	2c0f      	cmp	r4, #15
 8007016:	4682      	mov	sl, r0
 8007018:	468b      	mov	fp, r1
 800701a:	ddd5      	ble.n	8006fc8 <_strtod_l+0x3a8>
 800701c:	9b06      	ldr	r3, [sp, #24]
 800701e:	eba4 0808 	sub.w	r8, r4, r8
 8007022:	4498      	add	r8, r3
 8007024:	f1b8 0f00 	cmp.w	r8, #0
 8007028:	f340 8096 	ble.w	8007158 <_strtod_l+0x538>
 800702c:	f018 030f 	ands.w	r3, r8, #15
 8007030:	d00a      	beq.n	8007048 <_strtod_l+0x428>
 8007032:	495f      	ldr	r1, [pc, #380]	; (80071b0 <_strtod_l+0x590>)
 8007034:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007038:	4652      	mov	r2, sl
 800703a:	465b      	mov	r3, fp
 800703c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007040:	f7f9 fae2 	bl	8000608 <__aeabi_dmul>
 8007044:	4682      	mov	sl, r0
 8007046:	468b      	mov	fp, r1
 8007048:	f038 080f 	bics.w	r8, r8, #15
 800704c:	d073      	beq.n	8007136 <_strtod_l+0x516>
 800704e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007052:	dd47      	ble.n	80070e4 <_strtod_l+0x4c4>
 8007054:	2400      	movs	r4, #0
 8007056:	46a0      	mov	r8, r4
 8007058:	9407      	str	r4, [sp, #28]
 800705a:	9405      	str	r4, [sp, #20]
 800705c:	2322      	movs	r3, #34	; 0x22
 800705e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80071b8 <_strtod_l+0x598>
 8007062:	f8c9 3000 	str.w	r3, [r9]
 8007066:	f04f 0a00 	mov.w	sl, #0
 800706a:	9b07      	ldr	r3, [sp, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f43f ae16 	beq.w	8006c9e <_strtod_l+0x7e>
 8007072:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007074:	4648      	mov	r0, r9
 8007076:	f001 ff3d 	bl	8008ef4 <_Bfree>
 800707a:	9905      	ldr	r1, [sp, #20]
 800707c:	4648      	mov	r0, r9
 800707e:	f001 ff39 	bl	8008ef4 <_Bfree>
 8007082:	4641      	mov	r1, r8
 8007084:	4648      	mov	r0, r9
 8007086:	f001 ff35 	bl	8008ef4 <_Bfree>
 800708a:	9907      	ldr	r1, [sp, #28]
 800708c:	4648      	mov	r0, r9
 800708e:	f001 ff31 	bl	8008ef4 <_Bfree>
 8007092:	4621      	mov	r1, r4
 8007094:	4648      	mov	r0, r9
 8007096:	f001 ff2d 	bl	8008ef4 <_Bfree>
 800709a:	e600      	b.n	8006c9e <_strtod_l+0x7e>
 800709c:	9a06      	ldr	r2, [sp, #24]
 800709e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070a2:	4293      	cmp	r3, r2
 80070a4:	dbba      	blt.n	800701c <_strtod_l+0x3fc>
 80070a6:	4d42      	ldr	r5, [pc, #264]	; (80071b0 <_strtod_l+0x590>)
 80070a8:	f1c4 040f 	rsb	r4, r4, #15
 80070ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80070b0:	4652      	mov	r2, sl
 80070b2:	465b      	mov	r3, fp
 80070b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b8:	f7f9 faa6 	bl	8000608 <__aeabi_dmul>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	1b1c      	subs	r4, r3, r4
 80070c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070c8:	e78d      	b.n	8006fe6 <_strtod_l+0x3c6>
 80070ca:	f113 0f16 	cmn.w	r3, #22
 80070ce:	dba5      	blt.n	800701c <_strtod_l+0x3fc>
 80070d0:	4a37      	ldr	r2, [pc, #220]	; (80071b0 <_strtod_l+0x590>)
 80070d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80070d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80070da:	4650      	mov	r0, sl
 80070dc:	4659      	mov	r1, fp
 80070de:	f7f9 fbbd 	bl	800085c <__aeabi_ddiv>
 80070e2:	e782      	b.n	8006fea <_strtod_l+0x3ca>
 80070e4:	2300      	movs	r3, #0
 80070e6:	4e33      	ldr	r6, [pc, #204]	; (80071b4 <_strtod_l+0x594>)
 80070e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80070ec:	4650      	mov	r0, sl
 80070ee:	4659      	mov	r1, fp
 80070f0:	461d      	mov	r5, r3
 80070f2:	f1b8 0f01 	cmp.w	r8, #1
 80070f6:	dc21      	bgt.n	800713c <_strtod_l+0x51c>
 80070f8:	b10b      	cbz	r3, 80070fe <_strtod_l+0x4de>
 80070fa:	4682      	mov	sl, r0
 80070fc:	468b      	mov	fp, r1
 80070fe:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <_strtod_l+0x594>)
 8007100:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007104:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007108:	4652      	mov	r2, sl
 800710a:	465b      	mov	r3, fp
 800710c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007110:	f7f9 fa7a 	bl	8000608 <__aeabi_dmul>
 8007114:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <_strtod_l+0x598>)
 8007116:	460a      	mov	r2, r1
 8007118:	400b      	ands	r3, r1
 800711a:	4928      	ldr	r1, [pc, #160]	; (80071bc <_strtod_l+0x59c>)
 800711c:	428b      	cmp	r3, r1
 800711e:	4682      	mov	sl, r0
 8007120:	d898      	bhi.n	8007054 <_strtod_l+0x434>
 8007122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007126:	428b      	cmp	r3, r1
 8007128:	bf86      	itte	hi
 800712a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80071c4 <_strtod_l+0x5a4>
 800712e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007132:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007136:	2300      	movs	r3, #0
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	e077      	b.n	800722c <_strtod_l+0x60c>
 800713c:	f018 0f01 	tst.w	r8, #1
 8007140:	d006      	beq.n	8007150 <_strtod_l+0x530>
 8007142:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 fa5d 	bl	8000608 <__aeabi_dmul>
 800714e:	2301      	movs	r3, #1
 8007150:	3501      	adds	r5, #1
 8007152:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007156:	e7cc      	b.n	80070f2 <_strtod_l+0x4d2>
 8007158:	d0ed      	beq.n	8007136 <_strtod_l+0x516>
 800715a:	f1c8 0800 	rsb	r8, r8, #0
 800715e:	f018 020f 	ands.w	r2, r8, #15
 8007162:	d00a      	beq.n	800717a <_strtod_l+0x55a>
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <_strtod_l+0x590>)
 8007166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800716a:	4650      	mov	r0, sl
 800716c:	4659      	mov	r1, fp
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 fb73 	bl	800085c <__aeabi_ddiv>
 8007176:	4682      	mov	sl, r0
 8007178:	468b      	mov	fp, r1
 800717a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800717e:	d0da      	beq.n	8007136 <_strtod_l+0x516>
 8007180:	f1b8 0f1f 	cmp.w	r8, #31
 8007184:	dd20      	ble.n	80071c8 <_strtod_l+0x5a8>
 8007186:	2400      	movs	r4, #0
 8007188:	46a0      	mov	r8, r4
 800718a:	9407      	str	r4, [sp, #28]
 800718c:	9405      	str	r4, [sp, #20]
 800718e:	2322      	movs	r3, #34	; 0x22
 8007190:	f04f 0a00 	mov.w	sl, #0
 8007194:	f04f 0b00 	mov.w	fp, #0
 8007198:	f8c9 3000 	str.w	r3, [r9]
 800719c:	e765      	b.n	800706a <_strtod_l+0x44a>
 800719e:	bf00      	nop
 80071a0:	0800a3c9 	.word	0x0800a3c9
 80071a4:	0800a453 	.word	0x0800a453
 80071a8:	0800a3d1 	.word	0x0800a3d1
 80071ac:	0800a414 	.word	0x0800a414
 80071b0:	0800a4f8 	.word	0x0800a4f8
 80071b4:	0800a4d0 	.word	0x0800a4d0
 80071b8:	7ff00000 	.word	0x7ff00000
 80071bc:	7ca00000 	.word	0x7ca00000
 80071c0:	fff80000 	.word	0xfff80000
 80071c4:	7fefffff 	.word	0x7fefffff
 80071c8:	f018 0310 	ands.w	r3, r8, #16
 80071cc:	bf18      	it	ne
 80071ce:	236a      	movne	r3, #106	; 0x6a
 80071d0:	4da0      	ldr	r5, [pc, #640]	; (8007454 <_strtod_l+0x834>)
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	4650      	mov	r0, sl
 80071d6:	4659      	mov	r1, fp
 80071d8:	2300      	movs	r3, #0
 80071da:	f1b8 0f00 	cmp.w	r8, #0
 80071de:	f300 810a 	bgt.w	80073f6 <_strtod_l+0x7d6>
 80071e2:	b10b      	cbz	r3, 80071e8 <_strtod_l+0x5c8>
 80071e4:	4682      	mov	sl, r0
 80071e6:	468b      	mov	fp, r1
 80071e8:	9b04      	ldr	r3, [sp, #16]
 80071ea:	b1bb      	cbz	r3, 800721c <_strtod_l+0x5fc>
 80071ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80071f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	4659      	mov	r1, fp
 80071f8:	dd10      	ble.n	800721c <_strtod_l+0x5fc>
 80071fa:	2b1f      	cmp	r3, #31
 80071fc:	f340 8107 	ble.w	800740e <_strtod_l+0x7ee>
 8007200:	2b34      	cmp	r3, #52	; 0x34
 8007202:	bfde      	ittt	le
 8007204:	3b20      	suble	r3, #32
 8007206:	f04f 32ff 	movle.w	r2, #4294967295
 800720a:	fa02 f303 	lslle.w	r3, r2, r3
 800720e:	f04f 0a00 	mov.w	sl, #0
 8007212:	bfcc      	ite	gt
 8007214:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007218:	ea03 0b01 	andle.w	fp, r3, r1
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	4650      	mov	r0, sl
 8007222:	4659      	mov	r1, fp
 8007224:	f7f9 fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007228:	2800      	cmp	r0, #0
 800722a:	d1ac      	bne.n	8007186 <_strtod_l+0x566>
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	9a05      	ldr	r2, [sp, #20]
 8007232:	9908      	ldr	r1, [sp, #32]
 8007234:	4623      	mov	r3, r4
 8007236:	4648      	mov	r0, r9
 8007238:	f001 feae 	bl	8008f98 <__s2b>
 800723c:	9007      	str	r0, [sp, #28]
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f af08 	beq.w	8007054 <_strtod_l+0x434>
 8007244:	9a06      	ldr	r2, [sp, #24]
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	2a00      	cmp	r2, #0
 800724a:	f1c3 0300 	rsb	r3, r3, #0
 800724e:	bfa8      	it	ge
 8007250:	2300      	movge	r3, #0
 8007252:	930e      	str	r3, [sp, #56]	; 0x38
 8007254:	2400      	movs	r4, #0
 8007256:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800725a:	9316      	str	r3, [sp, #88]	; 0x58
 800725c:	46a0      	mov	r8, r4
 800725e:	9b07      	ldr	r3, [sp, #28]
 8007260:	4648      	mov	r0, r9
 8007262:	6859      	ldr	r1, [r3, #4]
 8007264:	f001 fe12 	bl	8008e8c <_Balloc>
 8007268:	9005      	str	r0, [sp, #20]
 800726a:	2800      	cmp	r0, #0
 800726c:	f43f aef6 	beq.w	800705c <_strtod_l+0x43c>
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	3202      	adds	r2, #2
 8007276:	f103 010c 	add.w	r1, r3, #12
 800727a:	0092      	lsls	r2, r2, #2
 800727c:	300c      	adds	r0, #12
 800727e:	f7fe fe21 	bl	8005ec4 <memcpy>
 8007282:	aa1e      	add	r2, sp, #120	; 0x78
 8007284:	a91d      	add	r1, sp, #116	; 0x74
 8007286:	ec4b ab10 	vmov	d0, sl, fp
 800728a:	4648      	mov	r0, r9
 800728c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007290:	f002 f93e 	bl	8009510 <__d2b>
 8007294:	901c      	str	r0, [sp, #112]	; 0x70
 8007296:	2800      	cmp	r0, #0
 8007298:	f43f aee0 	beq.w	800705c <_strtod_l+0x43c>
 800729c:	2101      	movs	r1, #1
 800729e:	4648      	mov	r0, r9
 80072a0:	f001 ff06 	bl	80090b0 <__i2b>
 80072a4:	4680      	mov	r8, r0
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f aed8 	beq.w	800705c <_strtod_l+0x43c>
 80072ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80072ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	bfab      	itete	ge
 80072b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80072b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80072b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80072ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80072bc:	bfac      	ite	ge
 80072be:	18f7      	addge	r7, r6, r3
 80072c0:	1b9d      	sublt	r5, r3, r6
 80072c2:	9b04      	ldr	r3, [sp, #16]
 80072c4:	1af6      	subs	r6, r6, r3
 80072c6:	4416      	add	r6, r2
 80072c8:	4b63      	ldr	r3, [pc, #396]	; (8007458 <_strtod_l+0x838>)
 80072ca:	3e01      	subs	r6, #1
 80072cc:	429e      	cmp	r6, r3
 80072ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072d2:	f280 80af 	bge.w	8007434 <_strtod_l+0x814>
 80072d6:	1b9b      	subs	r3, r3, r6
 80072d8:	2b1f      	cmp	r3, #31
 80072da:	eba2 0203 	sub.w	r2, r2, r3
 80072de:	f04f 0101 	mov.w	r1, #1
 80072e2:	f300 809b 	bgt.w	800741c <_strtod_l+0x7fc>
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ec:	2300      	movs	r3, #0
 80072ee:	930a      	str	r3, [sp, #40]	; 0x28
 80072f0:	18be      	adds	r6, r7, r2
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	42b7      	cmp	r7, r6
 80072f6:	4415      	add	r5, r2
 80072f8:	441d      	add	r5, r3
 80072fa:	463b      	mov	r3, r7
 80072fc:	bfa8      	it	ge
 80072fe:	4633      	movge	r3, r6
 8007300:	42ab      	cmp	r3, r5
 8007302:	bfa8      	it	ge
 8007304:	462b      	movge	r3, r5
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfc2      	ittt	gt
 800730a:	1af6      	subgt	r6, r6, r3
 800730c:	1aed      	subgt	r5, r5, r3
 800730e:	1aff      	subgt	r7, r7, r3
 8007310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007312:	b1bb      	cbz	r3, 8007344 <_strtod_l+0x724>
 8007314:	4641      	mov	r1, r8
 8007316:	461a      	mov	r2, r3
 8007318:	4648      	mov	r0, r9
 800731a:	f001 ff69 	bl	80091f0 <__pow5mult>
 800731e:	4680      	mov	r8, r0
 8007320:	2800      	cmp	r0, #0
 8007322:	f43f ae9b 	beq.w	800705c <_strtod_l+0x43c>
 8007326:	4601      	mov	r1, r0
 8007328:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800732a:	4648      	mov	r0, r9
 800732c:	f001 fec9 	bl	80090c2 <__multiply>
 8007330:	900c      	str	r0, [sp, #48]	; 0x30
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f ae92 	beq.w	800705c <_strtod_l+0x43c>
 8007338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800733a:	4648      	mov	r0, r9
 800733c:	f001 fdda 	bl	8008ef4 <_Bfree>
 8007340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007342:	931c      	str	r3, [sp, #112]	; 0x70
 8007344:	2e00      	cmp	r6, #0
 8007346:	dc7a      	bgt.n	800743e <_strtod_l+0x81e>
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd08      	ble.n	8007360 <_strtod_l+0x740>
 800734e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007350:	9905      	ldr	r1, [sp, #20]
 8007352:	4648      	mov	r0, r9
 8007354:	f001 ff4c 	bl	80091f0 <__pow5mult>
 8007358:	9005      	str	r0, [sp, #20]
 800735a:	2800      	cmp	r0, #0
 800735c:	f43f ae7e 	beq.w	800705c <_strtod_l+0x43c>
 8007360:	2d00      	cmp	r5, #0
 8007362:	dd08      	ble.n	8007376 <_strtod_l+0x756>
 8007364:	462a      	mov	r2, r5
 8007366:	9905      	ldr	r1, [sp, #20]
 8007368:	4648      	mov	r0, r9
 800736a:	f001 ff8f 	bl	800928c <__lshift>
 800736e:	9005      	str	r0, [sp, #20]
 8007370:	2800      	cmp	r0, #0
 8007372:	f43f ae73 	beq.w	800705c <_strtod_l+0x43c>
 8007376:	2f00      	cmp	r7, #0
 8007378:	dd08      	ble.n	800738c <_strtod_l+0x76c>
 800737a:	4641      	mov	r1, r8
 800737c:	463a      	mov	r2, r7
 800737e:	4648      	mov	r0, r9
 8007380:	f001 ff84 	bl	800928c <__lshift>
 8007384:	4680      	mov	r8, r0
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f ae68 	beq.w	800705c <_strtod_l+0x43c>
 800738c:	9a05      	ldr	r2, [sp, #20]
 800738e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007390:	4648      	mov	r0, r9
 8007392:	f001 ffe9 	bl	8009368 <__mdiff>
 8007396:	4604      	mov	r4, r0
 8007398:	2800      	cmp	r0, #0
 800739a:	f43f ae5f 	beq.w	800705c <_strtod_l+0x43c>
 800739e:	68c3      	ldr	r3, [r0, #12]
 80073a0:	930c      	str	r3, [sp, #48]	; 0x30
 80073a2:	2300      	movs	r3, #0
 80073a4:	60c3      	str	r3, [r0, #12]
 80073a6:	4641      	mov	r1, r8
 80073a8:	f001 ffc4 	bl	8009334 <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	da55      	bge.n	800745c <_strtod_l+0x83c>
 80073b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073b2:	b9e3      	cbnz	r3, 80073ee <_strtod_l+0x7ce>
 80073b4:	f1ba 0f00 	cmp.w	sl, #0
 80073b8:	d119      	bne.n	80073ee <_strtod_l+0x7ce>
 80073ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073be:	b9b3      	cbnz	r3, 80073ee <_strtod_l+0x7ce>
 80073c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073c4:	0d1b      	lsrs	r3, r3, #20
 80073c6:	051b      	lsls	r3, r3, #20
 80073c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80073cc:	d90f      	bls.n	80073ee <_strtod_l+0x7ce>
 80073ce:	6963      	ldr	r3, [r4, #20]
 80073d0:	b913      	cbnz	r3, 80073d8 <_strtod_l+0x7b8>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	dd0a      	ble.n	80073ee <_strtod_l+0x7ce>
 80073d8:	4621      	mov	r1, r4
 80073da:	2201      	movs	r2, #1
 80073dc:	4648      	mov	r0, r9
 80073de:	f001 ff55 	bl	800928c <__lshift>
 80073e2:	4641      	mov	r1, r8
 80073e4:	4604      	mov	r4, r0
 80073e6:	f001 ffa5 	bl	8009334 <__mcmp>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	dc67      	bgt.n	80074be <_strtod_l+0x89e>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d171      	bne.n	80074d8 <_strtod_l+0x8b8>
 80073f4:	e63d      	b.n	8007072 <_strtod_l+0x452>
 80073f6:	f018 0f01 	tst.w	r8, #1
 80073fa:	d004      	beq.n	8007406 <_strtod_l+0x7e6>
 80073fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	2301      	movs	r3, #1
 8007406:	ea4f 0868 	mov.w	r8, r8, asr #1
 800740a:	3508      	adds	r5, #8
 800740c:	e6e5      	b.n	80071da <_strtod_l+0x5ba>
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	ea03 0a0a 	and.w	sl, r3, sl
 800741a:	e6ff      	b.n	800721c <_strtod_l+0x5fc>
 800741c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007420:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007424:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007428:	36e2      	adds	r6, #226	; 0xe2
 800742a:	fa01 f306 	lsl.w	r3, r1, r6
 800742e:	930a      	str	r3, [sp, #40]	; 0x28
 8007430:	910f      	str	r1, [sp, #60]	; 0x3c
 8007432:	e75d      	b.n	80072f0 <_strtod_l+0x6d0>
 8007434:	2300      	movs	r3, #0
 8007436:	930a      	str	r3, [sp, #40]	; 0x28
 8007438:	2301      	movs	r3, #1
 800743a:	930f      	str	r3, [sp, #60]	; 0x3c
 800743c:	e758      	b.n	80072f0 <_strtod_l+0x6d0>
 800743e:	4632      	mov	r2, r6
 8007440:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007442:	4648      	mov	r0, r9
 8007444:	f001 ff22 	bl	800928c <__lshift>
 8007448:	901c      	str	r0, [sp, #112]	; 0x70
 800744a:	2800      	cmp	r0, #0
 800744c:	f47f af7c 	bne.w	8007348 <_strtod_l+0x728>
 8007450:	e604      	b.n	800705c <_strtod_l+0x43c>
 8007452:	bf00      	nop
 8007454:	0800a428 	.word	0x0800a428
 8007458:	fffffc02 	.word	0xfffffc02
 800745c:	465d      	mov	r5, fp
 800745e:	f040 8086 	bne.w	800756e <_strtod_l+0x94e>
 8007462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007468:	b32a      	cbz	r2, 80074b6 <_strtod_l+0x896>
 800746a:	4aaf      	ldr	r2, [pc, #700]	; (8007728 <_strtod_l+0xb08>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d153      	bne.n	8007518 <_strtod_l+0x8f8>
 8007470:	9b04      	ldr	r3, [sp, #16]
 8007472:	4650      	mov	r0, sl
 8007474:	b1d3      	cbz	r3, 80074ac <_strtod_l+0x88c>
 8007476:	4aad      	ldr	r2, [pc, #692]	; (800772c <_strtod_l+0xb0c>)
 8007478:	402a      	ands	r2, r5
 800747a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800747e:	f04f 31ff 	mov.w	r1, #4294967295
 8007482:	d816      	bhi.n	80074b2 <_strtod_l+0x892>
 8007484:	0d12      	lsrs	r2, r2, #20
 8007486:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	4298      	cmp	r0, r3
 8007490:	d142      	bne.n	8007518 <_strtod_l+0x8f8>
 8007492:	4ba7      	ldr	r3, [pc, #668]	; (8007730 <_strtod_l+0xb10>)
 8007494:	429d      	cmp	r5, r3
 8007496:	d102      	bne.n	800749e <_strtod_l+0x87e>
 8007498:	3001      	adds	r0, #1
 800749a:	f43f addf 	beq.w	800705c <_strtod_l+0x43c>
 800749e:	4ba3      	ldr	r3, [pc, #652]	; (800772c <_strtod_l+0xb0c>)
 80074a0:	402b      	ands	r3, r5
 80074a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80074a6:	f04f 0a00 	mov.w	sl, #0
 80074aa:	e7a0      	b.n	80073ee <_strtod_l+0x7ce>
 80074ac:	f04f 33ff 	mov.w	r3, #4294967295
 80074b0:	e7ed      	b.n	800748e <_strtod_l+0x86e>
 80074b2:	460b      	mov	r3, r1
 80074b4:	e7eb      	b.n	800748e <_strtod_l+0x86e>
 80074b6:	bb7b      	cbnz	r3, 8007518 <_strtod_l+0x8f8>
 80074b8:	f1ba 0f00 	cmp.w	sl, #0
 80074bc:	d12c      	bne.n	8007518 <_strtod_l+0x8f8>
 80074be:	9904      	ldr	r1, [sp, #16]
 80074c0:	4a9a      	ldr	r2, [pc, #616]	; (800772c <_strtod_l+0xb0c>)
 80074c2:	465b      	mov	r3, fp
 80074c4:	b1f1      	cbz	r1, 8007504 <_strtod_l+0x8e4>
 80074c6:	ea02 010b 	and.w	r1, r2, fp
 80074ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074ce:	dc19      	bgt.n	8007504 <_strtod_l+0x8e4>
 80074d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074d4:	f77f ae5b 	ble.w	800718e <_strtod_l+0x56e>
 80074d8:	4a96      	ldr	r2, [pc, #600]	; (8007734 <_strtod_l+0xb14>)
 80074da:	2300      	movs	r3, #0
 80074dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80074e0:	4650      	mov	r0, sl
 80074e2:	4659      	mov	r1, fp
 80074e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074e8:	f7f9 f88e 	bl	8000608 <__aeabi_dmul>
 80074ec:	4682      	mov	sl, r0
 80074ee:	468b      	mov	fp, r1
 80074f0:	2900      	cmp	r1, #0
 80074f2:	f47f adbe 	bne.w	8007072 <_strtod_l+0x452>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f47f adbb 	bne.w	8007072 <_strtod_l+0x452>
 80074fc:	2322      	movs	r3, #34	; 0x22
 80074fe:	f8c9 3000 	str.w	r3, [r9]
 8007502:	e5b6      	b.n	8007072 <_strtod_l+0x452>
 8007504:	4013      	ands	r3, r2
 8007506:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800750a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800750e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007512:	f04f 3aff 	mov.w	sl, #4294967295
 8007516:	e76a      	b.n	80073ee <_strtod_l+0x7ce>
 8007518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800751a:	b193      	cbz	r3, 8007542 <_strtod_l+0x922>
 800751c:	422b      	tst	r3, r5
 800751e:	f43f af66 	beq.w	80073ee <_strtod_l+0x7ce>
 8007522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007524:	9a04      	ldr	r2, [sp, #16]
 8007526:	4650      	mov	r0, sl
 8007528:	4659      	mov	r1, fp
 800752a:	b173      	cbz	r3, 800754a <_strtod_l+0x92a>
 800752c:	f7ff fb5a 	bl	8006be4 <sulp>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007538:	f7f8 feb0 	bl	800029c <__adddf3>
 800753c:	4682      	mov	sl, r0
 800753e:	468b      	mov	fp, r1
 8007540:	e755      	b.n	80073ee <_strtod_l+0x7ce>
 8007542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007544:	ea13 0f0a 	tst.w	r3, sl
 8007548:	e7e9      	b.n	800751e <_strtod_l+0x8fe>
 800754a:	f7ff fb4b 	bl	8006be4 <sulp>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007556:	f7f8 fe9f 	bl	8000298 <__aeabi_dsub>
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	4682      	mov	sl, r0
 8007560:	468b      	mov	fp, r1
 8007562:	f7f9 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007566:	2800      	cmp	r0, #0
 8007568:	f47f ae11 	bne.w	800718e <_strtod_l+0x56e>
 800756c:	e73f      	b.n	80073ee <_strtod_l+0x7ce>
 800756e:	4641      	mov	r1, r8
 8007570:	4620      	mov	r0, r4
 8007572:	f002 f81c 	bl	80095ae <__ratio>
 8007576:	ec57 6b10 	vmov	r6, r7, d0
 800757a:	2200      	movs	r2, #0
 800757c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007580:	ee10 0a10 	vmov	r0, s0
 8007584:	4639      	mov	r1, r7
 8007586:	f7f9 fabb 	bl	8000b00 <__aeabi_dcmple>
 800758a:	2800      	cmp	r0, #0
 800758c:	d077      	beq.n	800767e <_strtod_l+0xa5e>
 800758e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d04a      	beq.n	800762a <_strtod_l+0xa0a>
 8007594:	4b68      	ldr	r3, [pc, #416]	; (8007738 <_strtod_l+0xb18>)
 8007596:	2200      	movs	r2, #0
 8007598:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800759c:	4f66      	ldr	r7, [pc, #408]	; (8007738 <_strtod_l+0xb18>)
 800759e:	2600      	movs	r6, #0
 80075a0:	4b62      	ldr	r3, [pc, #392]	; (800772c <_strtod_l+0xb0c>)
 80075a2:	402b      	ands	r3, r5
 80075a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80075a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075a8:	4b64      	ldr	r3, [pc, #400]	; (800773c <_strtod_l+0xb1c>)
 80075aa:	429a      	cmp	r2, r3
 80075ac:	f040 80ce 	bne.w	800774c <_strtod_l+0xb2c>
 80075b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80075bc:	ec4b ab10 	vmov	d0, sl, fp
 80075c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80075c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075c8:	f001 ff2c 	bl	8009424 <__ulp>
 80075cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075d0:	ec53 2b10 	vmov	r2, r3, d0
 80075d4:	f7f9 f818 	bl	8000608 <__aeabi_dmul>
 80075d8:	4652      	mov	r2, sl
 80075da:	465b      	mov	r3, fp
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	460b      	mov	r3, r1
 80075e2:	4952      	ldr	r1, [pc, #328]	; (800772c <_strtod_l+0xb0c>)
 80075e4:	4a56      	ldr	r2, [pc, #344]	; (8007740 <_strtod_l+0xb20>)
 80075e6:	4019      	ands	r1, r3
 80075e8:	4291      	cmp	r1, r2
 80075ea:	4682      	mov	sl, r0
 80075ec:	d95b      	bls.n	80076a6 <_strtod_l+0xa86>
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d103      	bne.n	8007600 <_strtod_l+0x9e0>
 80075f8:	9b08      	ldr	r3, [sp, #32]
 80075fa:	3301      	adds	r3, #1
 80075fc:	f43f ad2e 	beq.w	800705c <_strtod_l+0x43c>
 8007600:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007730 <_strtod_l+0xb10>
 8007604:	f04f 3aff 	mov.w	sl, #4294967295
 8007608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800760a:	4648      	mov	r0, r9
 800760c:	f001 fc72 	bl	8008ef4 <_Bfree>
 8007610:	9905      	ldr	r1, [sp, #20]
 8007612:	4648      	mov	r0, r9
 8007614:	f001 fc6e 	bl	8008ef4 <_Bfree>
 8007618:	4641      	mov	r1, r8
 800761a:	4648      	mov	r0, r9
 800761c:	f001 fc6a 	bl	8008ef4 <_Bfree>
 8007620:	4621      	mov	r1, r4
 8007622:	4648      	mov	r0, r9
 8007624:	f001 fc66 	bl	8008ef4 <_Bfree>
 8007628:	e619      	b.n	800725e <_strtod_l+0x63e>
 800762a:	f1ba 0f00 	cmp.w	sl, #0
 800762e:	d11a      	bne.n	8007666 <_strtod_l+0xa46>
 8007630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007634:	b9eb      	cbnz	r3, 8007672 <_strtod_l+0xa52>
 8007636:	2200      	movs	r2, #0
 8007638:	4b3f      	ldr	r3, [pc, #252]	; (8007738 <_strtod_l+0xb18>)
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	f7f9 fa55 	bl	8000aec <__aeabi_dcmplt>
 8007642:	b9c8      	cbnz	r0, 8007678 <_strtod_l+0xa58>
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	2200      	movs	r2, #0
 800764a:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <_strtod_l+0xb24>)
 800764c:	f7f8 ffdc 	bl	8000608 <__aeabi_dmul>
 8007650:	4606      	mov	r6, r0
 8007652:	460f      	mov	r7, r1
 8007654:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007658:	9618      	str	r6, [sp, #96]	; 0x60
 800765a:	9319      	str	r3, [sp, #100]	; 0x64
 800765c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007660:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007664:	e79c      	b.n	80075a0 <_strtod_l+0x980>
 8007666:	f1ba 0f01 	cmp.w	sl, #1
 800766a:	d102      	bne.n	8007672 <_strtod_l+0xa52>
 800766c:	2d00      	cmp	r5, #0
 800766e:	f43f ad8e 	beq.w	800718e <_strtod_l+0x56e>
 8007672:	2200      	movs	r2, #0
 8007674:	4b34      	ldr	r3, [pc, #208]	; (8007748 <_strtod_l+0xb28>)
 8007676:	e78f      	b.n	8007598 <_strtod_l+0x978>
 8007678:	2600      	movs	r6, #0
 800767a:	4f32      	ldr	r7, [pc, #200]	; (8007744 <_strtod_l+0xb24>)
 800767c:	e7ea      	b.n	8007654 <_strtod_l+0xa34>
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <_strtod_l+0xb24>)
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	2200      	movs	r2, #0
 8007686:	f7f8 ffbf 	bl	8000608 <__aeabi_dmul>
 800768a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	b933      	cbnz	r3, 80076a0 <_strtod_l+0xa80>
 8007692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007696:	9010      	str	r0, [sp, #64]	; 0x40
 8007698:	9311      	str	r3, [sp, #68]	; 0x44
 800769a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800769e:	e7df      	b.n	8007660 <_strtod_l+0xa40>
 80076a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80076a4:	e7f9      	b.n	800769a <_strtod_l+0xa7a>
 80076a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1ab      	bne.n	8007608 <_strtod_l+0x9e8>
 80076b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076b4:	0d1b      	lsrs	r3, r3, #20
 80076b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076b8:	051b      	lsls	r3, r3, #20
 80076ba:	429a      	cmp	r2, r3
 80076bc:	465d      	mov	r5, fp
 80076be:	d1a3      	bne.n	8007608 <_strtod_l+0x9e8>
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7f9 fa50 	bl	8000b68 <__aeabi_d2iz>
 80076c8:	f7f8 ff34 	bl	8000534 <__aeabi_i2d>
 80076cc:	460b      	mov	r3, r1
 80076ce:	4602      	mov	r2, r0
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 fde0 	bl	8000298 <__aeabi_dsub>
 80076d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	b933      	cbnz	r3, 80076ee <_strtod_l+0xace>
 80076e0:	f1ba 0f00 	cmp.w	sl, #0
 80076e4:	d103      	bne.n	80076ee <_strtod_l+0xace>
 80076e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d06d      	beq.n	80077ca <_strtod_l+0xbaa>
 80076ee:	a30a      	add	r3, pc, #40	; (adr r3, 8007718 <_strtod_l+0xaf8>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	4630      	mov	r0, r6
 80076f6:	4639      	mov	r1, r7
 80076f8:	f7f9 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f47f acb8 	bne.w	8007072 <_strtod_l+0x452>
 8007702:	a307      	add	r3, pc, #28	; (adr r3, 8007720 <_strtod_l+0xb00>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 fa0c 	bl	8000b28 <__aeabi_dcmpgt>
 8007710:	2800      	cmp	r0, #0
 8007712:	f43f af79 	beq.w	8007608 <_strtod_l+0x9e8>
 8007716:	e4ac      	b.n	8007072 <_strtod_l+0x452>
 8007718:	94a03595 	.word	0x94a03595
 800771c:	3fdfffff 	.word	0x3fdfffff
 8007720:	35afe535 	.word	0x35afe535
 8007724:	3fe00000 	.word	0x3fe00000
 8007728:	000fffff 	.word	0x000fffff
 800772c:	7ff00000 	.word	0x7ff00000
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	39500000 	.word	0x39500000
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	7fe00000 	.word	0x7fe00000
 8007740:	7c9fffff 	.word	0x7c9fffff
 8007744:	3fe00000 	.word	0x3fe00000
 8007748:	bff00000 	.word	0xbff00000
 800774c:	9b04      	ldr	r3, [sp, #16]
 800774e:	b333      	cbz	r3, 800779e <_strtod_l+0xb7e>
 8007750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007752:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007756:	d822      	bhi.n	800779e <_strtod_l+0xb7e>
 8007758:	a327      	add	r3, pc, #156	; (adr r3, 80077f8 <_strtod_l+0xbd8>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f9 f9cd 	bl	8000b00 <__aeabi_dcmple>
 8007766:	b1a0      	cbz	r0, 8007792 <_strtod_l+0xb72>
 8007768:	4639      	mov	r1, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f7f9 fa24 	bl	8000bb8 <__aeabi_d2uiz>
 8007770:	2800      	cmp	r0, #0
 8007772:	bf08      	it	eq
 8007774:	2001      	moveq	r0, #1
 8007776:	f7f8 fecd 	bl	8000514 <__aeabi_ui2d>
 800777a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777c:	4606      	mov	r6, r0
 800777e:	460f      	mov	r7, r1
 8007780:	bb03      	cbnz	r3, 80077c4 <_strtod_l+0xba4>
 8007782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007786:	9012      	str	r0, [sp, #72]	; 0x48
 8007788:	9313      	str	r3, [sp, #76]	; 0x4c
 800778a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800778e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007796:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	930b      	str	r3, [sp, #44]	; 0x2c
 800779e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80077a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80077a6:	f001 fe3d 	bl	8009424 <__ulp>
 80077aa:	4650      	mov	r0, sl
 80077ac:	ec53 2b10 	vmov	r2, r3, d0
 80077b0:	4659      	mov	r1, fp
 80077b2:	f7f8 ff29 	bl	8000608 <__aeabi_dmul>
 80077b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077ba:	f7f8 fd6f 	bl	800029c <__adddf3>
 80077be:	4682      	mov	sl, r0
 80077c0:	468b      	mov	fp, r1
 80077c2:	e772      	b.n	80076aa <_strtod_l+0xa8a>
 80077c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80077c8:	e7df      	b.n	800778a <_strtod_l+0xb6a>
 80077ca:	a30d      	add	r3, pc, #52	; (adr r3, 8007800 <_strtod_l+0xbe0>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f9 f98c 	bl	8000aec <__aeabi_dcmplt>
 80077d4:	e79c      	b.n	8007710 <_strtod_l+0xaf0>
 80077d6:	2300      	movs	r3, #0
 80077d8:	930d      	str	r3, [sp, #52]	; 0x34
 80077da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f7ff ba61 	b.w	8006ca6 <_strtod_l+0x86>
 80077e4:	2b65      	cmp	r3, #101	; 0x65
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	f43f ab4e 	beq.w	8006e8a <_strtod_l+0x26a>
 80077ee:	2101      	movs	r1, #1
 80077f0:	4614      	mov	r4, r2
 80077f2:	9104      	str	r1, [sp, #16]
 80077f4:	f7ff bacb 	b.w	8006d8e <_strtod_l+0x16e>
 80077f8:	ffc00000 	.word	0xffc00000
 80077fc:	41dfffff 	.word	0x41dfffff
 8007800:	94a03595 	.word	0x94a03595
 8007804:	3fcfffff 	.word	0x3fcfffff

08007808 <_strtod_r>:
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_strtod_r+0x18>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	b410      	push	{r4}
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	4c04      	ldr	r4, [pc, #16]	; (8007824 <_strtod_r+0x1c>)
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf08      	it	eq
 8007816:	4623      	moveq	r3, r4
 8007818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781c:	f7ff ba00 	b.w	8006c20 <_strtod_l>
 8007820:	20000010 	.word	0x20000010
 8007824:	20000074 	.word	0x20000074

08007828 <strtod>:
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <strtod+0x20>)
 800782a:	4a08      	ldr	r2, [pc, #32]	; (800784c <strtod+0x24>)
 800782c:	b410      	push	{r4}
 800782e:	681c      	ldr	r4, [r3, #0]
 8007830:	6a23      	ldr	r3, [r4, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bf08      	it	eq
 8007836:	4613      	moveq	r3, r2
 8007838:	460a      	mov	r2, r1
 800783a:	4601      	mov	r1, r0
 800783c:	4620      	mov	r0, r4
 800783e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007842:	f7ff b9ed 	b.w	8006c20 <_strtod_l>
 8007846:	bf00      	nop
 8007848:	20000010 	.word	0x20000010
 800784c:	20000074 	.word	0x20000074

08007850 <__strtok_r>:
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007852:	b918      	cbnz	r0, 800785c <__strtok_r+0xc>
 8007854:	6810      	ldr	r0, [r2, #0]
 8007856:	b908      	cbnz	r0, 800785c <__strtok_r+0xc>
 8007858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785a:	4620      	mov	r0, r4
 800785c:	4604      	mov	r4, r0
 800785e:	460f      	mov	r7, r1
 8007860:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007864:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007868:	b91e      	cbnz	r6, 8007872 <__strtok_r+0x22>
 800786a:	b96d      	cbnz	r5, 8007888 <__strtok_r+0x38>
 800786c:	6015      	str	r5, [r2, #0]
 800786e:	4628      	mov	r0, r5
 8007870:	e7f2      	b.n	8007858 <__strtok_r+0x8>
 8007872:	42b5      	cmp	r5, r6
 8007874:	d1f6      	bne.n	8007864 <__strtok_r+0x14>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1ef      	bne.n	800785a <__strtok_r+0xa>
 800787a:	6014      	str	r4, [r2, #0]
 800787c:	7003      	strb	r3, [r0, #0]
 800787e:	e7eb      	b.n	8007858 <__strtok_r+0x8>
 8007880:	462b      	mov	r3, r5
 8007882:	e00d      	b.n	80078a0 <__strtok_r+0x50>
 8007884:	b926      	cbnz	r6, 8007890 <__strtok_r+0x40>
 8007886:	461c      	mov	r4, r3
 8007888:	4623      	mov	r3, r4
 800788a:	460f      	mov	r7, r1
 800788c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007890:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007894:	42b5      	cmp	r5, r6
 8007896:	d1f5      	bne.n	8007884 <__strtok_r+0x34>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d0f1      	beq.n	8007880 <__strtok_r+0x30>
 800789c:	2100      	movs	r1, #0
 800789e:	7021      	strb	r1, [r4, #0]
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e7d9      	b.n	8007858 <__strtok_r+0x8>

080078a4 <strtok_r>:
 80078a4:	2301      	movs	r3, #1
 80078a6:	f7ff bfd3 	b.w	8007850 <__strtok_r>

080078aa <_strtol_l.isra.0>:
 80078aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ae:	4680      	mov	r8, r0
 80078b0:	4689      	mov	r9, r1
 80078b2:	4692      	mov	sl, r2
 80078b4:	461e      	mov	r6, r3
 80078b6:	460f      	mov	r7, r1
 80078b8:	463d      	mov	r5, r7
 80078ba:	9808      	ldr	r0, [sp, #32]
 80078bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078c0:	f001 fab6 	bl	8008e30 <__locale_ctype_ptr_l>
 80078c4:	4420      	add	r0, r4
 80078c6:	7843      	ldrb	r3, [r0, #1]
 80078c8:	f013 0308 	ands.w	r3, r3, #8
 80078cc:	d132      	bne.n	8007934 <_strtol_l.isra.0+0x8a>
 80078ce:	2c2d      	cmp	r4, #45	; 0x2d
 80078d0:	d132      	bne.n	8007938 <_strtol_l.isra.0+0x8e>
 80078d2:	787c      	ldrb	r4, [r7, #1]
 80078d4:	1cbd      	adds	r5, r7, #2
 80078d6:	2201      	movs	r2, #1
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d05d      	beq.n	8007998 <_strtol_l.isra.0+0xee>
 80078dc:	2e10      	cmp	r6, #16
 80078de:	d109      	bne.n	80078f4 <_strtol_l.isra.0+0x4a>
 80078e0:	2c30      	cmp	r4, #48	; 0x30
 80078e2:	d107      	bne.n	80078f4 <_strtol_l.isra.0+0x4a>
 80078e4:	782b      	ldrb	r3, [r5, #0]
 80078e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078ea:	2b58      	cmp	r3, #88	; 0x58
 80078ec:	d14f      	bne.n	800798e <_strtol_l.isra.0+0xe4>
 80078ee:	786c      	ldrb	r4, [r5, #1]
 80078f0:	2610      	movs	r6, #16
 80078f2:	3502      	adds	r5, #2
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	bf14      	ite	ne
 80078f8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80078fc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007900:	2700      	movs	r7, #0
 8007902:	fbb1 fcf6 	udiv	ip, r1, r6
 8007906:	4638      	mov	r0, r7
 8007908:	fb06 1e1c 	mls	lr, r6, ip, r1
 800790c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007910:	2b09      	cmp	r3, #9
 8007912:	d817      	bhi.n	8007944 <_strtol_l.isra.0+0x9a>
 8007914:	461c      	mov	r4, r3
 8007916:	42a6      	cmp	r6, r4
 8007918:	dd23      	ble.n	8007962 <_strtol_l.isra.0+0xb8>
 800791a:	1c7b      	adds	r3, r7, #1
 800791c:	d007      	beq.n	800792e <_strtol_l.isra.0+0x84>
 800791e:	4584      	cmp	ip, r0
 8007920:	d31c      	bcc.n	800795c <_strtol_l.isra.0+0xb2>
 8007922:	d101      	bne.n	8007928 <_strtol_l.isra.0+0x7e>
 8007924:	45a6      	cmp	lr, r4
 8007926:	db19      	blt.n	800795c <_strtol_l.isra.0+0xb2>
 8007928:	fb00 4006 	mla	r0, r0, r6, r4
 800792c:	2701      	movs	r7, #1
 800792e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007932:	e7eb      	b.n	800790c <_strtol_l.isra.0+0x62>
 8007934:	462f      	mov	r7, r5
 8007936:	e7bf      	b.n	80078b8 <_strtol_l.isra.0+0xe>
 8007938:	2c2b      	cmp	r4, #43	; 0x2b
 800793a:	bf04      	itt	eq
 800793c:	1cbd      	addeq	r5, r7, #2
 800793e:	787c      	ldrbeq	r4, [r7, #1]
 8007940:	461a      	mov	r2, r3
 8007942:	e7c9      	b.n	80078d8 <_strtol_l.isra.0+0x2e>
 8007944:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007948:	2b19      	cmp	r3, #25
 800794a:	d801      	bhi.n	8007950 <_strtol_l.isra.0+0xa6>
 800794c:	3c37      	subs	r4, #55	; 0x37
 800794e:	e7e2      	b.n	8007916 <_strtol_l.isra.0+0x6c>
 8007950:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007954:	2b19      	cmp	r3, #25
 8007956:	d804      	bhi.n	8007962 <_strtol_l.isra.0+0xb8>
 8007958:	3c57      	subs	r4, #87	; 0x57
 800795a:	e7dc      	b.n	8007916 <_strtol_l.isra.0+0x6c>
 800795c:	f04f 37ff 	mov.w	r7, #4294967295
 8007960:	e7e5      	b.n	800792e <_strtol_l.isra.0+0x84>
 8007962:	1c7b      	adds	r3, r7, #1
 8007964:	d108      	bne.n	8007978 <_strtol_l.isra.0+0xce>
 8007966:	2322      	movs	r3, #34	; 0x22
 8007968:	f8c8 3000 	str.w	r3, [r8]
 800796c:	4608      	mov	r0, r1
 800796e:	f1ba 0f00 	cmp.w	sl, #0
 8007972:	d107      	bne.n	8007984 <_strtol_l.isra.0+0xda>
 8007974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007978:	b102      	cbz	r2, 800797c <_strtol_l.isra.0+0xd2>
 800797a:	4240      	negs	r0, r0
 800797c:	f1ba 0f00 	cmp.w	sl, #0
 8007980:	d0f8      	beq.n	8007974 <_strtol_l.isra.0+0xca>
 8007982:	b10f      	cbz	r7, 8007988 <_strtol_l.isra.0+0xde>
 8007984:	f105 39ff 	add.w	r9, r5, #4294967295
 8007988:	f8ca 9000 	str.w	r9, [sl]
 800798c:	e7f2      	b.n	8007974 <_strtol_l.isra.0+0xca>
 800798e:	2430      	movs	r4, #48	; 0x30
 8007990:	2e00      	cmp	r6, #0
 8007992:	d1af      	bne.n	80078f4 <_strtol_l.isra.0+0x4a>
 8007994:	2608      	movs	r6, #8
 8007996:	e7ad      	b.n	80078f4 <_strtol_l.isra.0+0x4a>
 8007998:	2c30      	cmp	r4, #48	; 0x30
 800799a:	d0a3      	beq.n	80078e4 <_strtol_l.isra.0+0x3a>
 800799c:	260a      	movs	r6, #10
 800799e:	e7a9      	b.n	80078f4 <_strtol_l.isra.0+0x4a>

080079a0 <_strtol_r>:
 80079a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a2:	4c06      	ldr	r4, [pc, #24]	; (80079bc <_strtol_r+0x1c>)
 80079a4:	4d06      	ldr	r5, [pc, #24]	; (80079c0 <_strtol_r+0x20>)
 80079a6:	6824      	ldr	r4, [r4, #0]
 80079a8:	6a24      	ldr	r4, [r4, #32]
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	bf08      	it	eq
 80079ae:	462c      	moveq	r4, r5
 80079b0:	9400      	str	r4, [sp, #0]
 80079b2:	f7ff ff7a 	bl	80078aa <_strtol_l.isra.0>
 80079b6:	b003      	add	sp, #12
 80079b8:	bd30      	pop	{r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	20000010 	.word	0x20000010
 80079c0:	20000074 	.word	0x20000074

080079c4 <quorem>:
 80079c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	6903      	ldr	r3, [r0, #16]
 80079ca:	690c      	ldr	r4, [r1, #16]
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	4680      	mov	r8, r0
 80079d0:	f2c0 8082 	blt.w	8007ad8 <quorem+0x114>
 80079d4:	3c01      	subs	r4, #1
 80079d6:	f101 0714 	add.w	r7, r1, #20
 80079da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079de:	f100 0614 	add.w	r6, r0, #20
 80079e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079ea:	eb06 030c 	add.w	r3, r6, ip
 80079ee:	3501      	adds	r5, #1
 80079f0:	eb07 090c 	add.w	r9, r7, ip
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80079fa:	b395      	cbz	r5, 8007a62 <quorem+0x9e>
 80079fc:	f04f 0a00 	mov.w	sl, #0
 8007a00:	4638      	mov	r0, r7
 8007a02:	46b6      	mov	lr, r6
 8007a04:	46d3      	mov	fp, sl
 8007a06:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a0a:	b293      	uxth	r3, r2
 8007a0c:	fb05 a303 	mla	r3, r5, r3, sl
 8007a10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ebab 0303 	sub.w	r3, fp, r3
 8007a1a:	0c12      	lsrs	r2, r2, #16
 8007a1c:	f8de b000 	ldr.w	fp, [lr]
 8007a20:	fb05 a202 	mla	r2, r5, r2, sl
 8007a24:	fa13 f38b 	uxtah	r3, r3, fp
 8007a28:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a2c:	fa1f fb82 	uxth.w	fp, r2
 8007a30:	f8de 2000 	ldr.w	r2, [lr]
 8007a34:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a42:	4581      	cmp	r9, r0
 8007a44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a48:	f84e 3b04 	str.w	r3, [lr], #4
 8007a4c:	d2db      	bcs.n	8007a06 <quorem+0x42>
 8007a4e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a52:	b933      	cbnz	r3, 8007a62 <quorem+0x9e>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	3b04      	subs	r3, #4
 8007a58:	429e      	cmp	r6, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	d330      	bcc.n	8007ac0 <quorem+0xfc>
 8007a5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a62:	4640      	mov	r0, r8
 8007a64:	f001 fc66 	bl	8009334 <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	db25      	blt.n	8007ab8 <quorem+0xf4>
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f04f 0c00 	mov.w	ip, #0
 8007a74:	f857 2b04 	ldr.w	r2, [r7], #4
 8007a78:	f8d0 e000 	ldr.w	lr, [r0]
 8007a7c:	b293      	uxth	r3, r2
 8007a7e:	ebac 0303 	sub.w	r3, ip, r3
 8007a82:	0c12      	lsrs	r2, r2, #16
 8007a84:	fa13 f38e 	uxtah	r3, r3, lr
 8007a88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a96:	45b9      	cmp	r9, r7
 8007a98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a9c:	f840 3b04 	str.w	r3, [r0], #4
 8007aa0:	d2e8      	bcs.n	8007a74 <quorem+0xb0>
 8007aa2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007aa6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007aaa:	b92a      	cbnz	r2, 8007ab8 <quorem+0xf4>
 8007aac:	3b04      	subs	r3, #4
 8007aae:	429e      	cmp	r6, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	d30b      	bcc.n	8007acc <quorem+0x108>
 8007ab4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ab8:	4628      	mov	r0, r5
 8007aba:	b003      	add	sp, #12
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	3b04      	subs	r3, #4
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	d1ca      	bne.n	8007a5e <quorem+0x9a>
 8007ac8:	3c01      	subs	r4, #1
 8007aca:	e7c5      	b.n	8007a58 <quorem+0x94>
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	3b04      	subs	r3, #4
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	d1ef      	bne.n	8007ab4 <quorem+0xf0>
 8007ad4:	3c01      	subs	r4, #1
 8007ad6:	e7ea      	b.n	8007aae <quorem+0xea>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e7ee      	b.n	8007aba <quorem+0xf6>
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <_dtoa_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	ec57 6b10 	vmov	r6, r7, d0
 8007ae8:	b097      	sub	sp, #92	; 0x5c
 8007aea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aec:	9106      	str	r1, [sp, #24]
 8007aee:	4604      	mov	r4, r0
 8007af0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007af2:	9312      	str	r3, [sp, #72]	; 0x48
 8007af4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007af8:	e9cd 6700 	strd	r6, r7, [sp]
 8007afc:	b93d      	cbnz	r5, 8007b0e <_dtoa_r+0x2e>
 8007afe:	2010      	movs	r0, #16
 8007b00:	f001 f9aa 	bl	8008e58 <malloc>
 8007b04:	6260      	str	r0, [r4, #36]	; 0x24
 8007b06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b0a:	6005      	str	r5, [r0, #0]
 8007b0c:	60c5      	str	r5, [r0, #12]
 8007b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	b151      	cbz	r1, 8007b2a <_dtoa_r+0x4a>
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	604a      	str	r2, [r1, #4]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4093      	lsls	r3, r2
 8007b1c:	608b      	str	r3, [r1, #8]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f001 f9e8 	bl	8008ef4 <_Bfree>
 8007b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	1e3b      	subs	r3, r7, #0
 8007b2c:	bfbb      	ittet	lt
 8007b2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b32:	9301      	strlt	r3, [sp, #4]
 8007b34:	2300      	movge	r3, #0
 8007b36:	2201      	movlt	r2, #1
 8007b38:	bfac      	ite	ge
 8007b3a:	f8c8 3000 	strge.w	r3, [r8]
 8007b3e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b42:	4baf      	ldr	r3, [pc, #700]	; (8007e00 <_dtoa_r+0x320>)
 8007b44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b48:	ea33 0308 	bics.w	r3, r3, r8
 8007b4c:	d114      	bne.n	8007b78 <_dtoa_r+0x98>
 8007b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	b923      	cbnz	r3, 8007b64 <_dtoa_r+0x84>
 8007b5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f000 8542 	beq.w	80085e8 <_dtoa_r+0xb08>
 8007b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007e14 <_dtoa_r+0x334>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8544 	beq.w	80085f8 <_dtoa_r+0xb18>
 8007b70:	f10b 0303 	add.w	r3, fp, #3
 8007b74:	f000 bd3e 	b.w	80085f4 <_dtoa_r+0xb14>
 8007b78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b88:	4681      	mov	r9, r0
 8007b8a:	b168      	cbz	r0, 8007ba8 <_dtoa_r+0xc8>
 8007b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b8e:	2301      	movs	r3, #1
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8524 	beq.w	80085e2 <_dtoa_r+0xb02>
 8007b9a:	4b9a      	ldr	r3, [pc, #616]	; (8007e04 <_dtoa_r+0x324>)
 8007b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	f000 bd28 	b.w	80085f8 <_dtoa_r+0xb18>
 8007ba8:	aa14      	add	r2, sp, #80	; 0x50
 8007baa:	a915      	add	r1, sp, #84	; 0x54
 8007bac:	ec47 6b10 	vmov	d0, r6, r7
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f001 fcad 	bl	8009510 <__d2b>
 8007bb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007bba:	9004      	str	r0, [sp, #16]
 8007bbc:	2d00      	cmp	r5, #0
 8007bbe:	d07c      	beq.n	8007cba <_dtoa_r+0x1da>
 8007bc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007bc8:	46b2      	mov	sl, r6
 8007bca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b8b      	ldr	r3, [pc, #556]	; (8007e08 <_dtoa_r+0x328>)
 8007bda:	4650      	mov	r0, sl
 8007bdc:	4659      	mov	r1, fp
 8007bde:	f7f8 fb5b 	bl	8000298 <__aeabi_dsub>
 8007be2:	a381      	add	r3, pc, #516	; (adr r3, 8007de8 <_dtoa_r+0x308>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	a380      	add	r3, pc, #512	; (adr r3, 8007df0 <_dtoa_r+0x310>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fb53 	bl	800029c <__adddf3>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	f7f8 fc9a 	bl	8000534 <__aeabi_i2d>
 8007c00:	a37d      	add	r3, pc, #500	; (adr r3, 8007df8 <_dtoa_r+0x318>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 fb43 	bl	800029c <__adddf3>
 8007c16:	4606      	mov	r6, r0
 8007c18:	460f      	mov	r7, r1
 8007c1a:	f7f8 ffa5 	bl	8000b68 <__aeabi_d2iz>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4682      	mov	sl, r0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f7f8 ff60 	bl	8000aec <__aeabi_dcmplt>
 8007c2c:	b148      	cbz	r0, 8007c42 <_dtoa_r+0x162>
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f7f8 fc80 	bl	8000534 <__aeabi_i2d>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7f8 ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c3c:	b908      	cbnz	r0, 8007c42 <_dtoa_r+0x162>
 8007c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c42:	f1ba 0f16 	cmp.w	sl, #22
 8007c46:	d859      	bhi.n	8007cfc <_dtoa_r+0x21c>
 8007c48:	4970      	ldr	r1, [pc, #448]	; (8007e0c <_dtoa_r+0x32c>)
 8007c4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c56:	f7f8 ff67 	bl	8000b28 <__aeabi_dcmpgt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d050      	beq.n	8007d00 <_dtoa_r+0x220>
 8007c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c62:	2300      	movs	r3, #0
 8007c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c68:	1b5d      	subs	r5, r3, r5
 8007c6a:	f1b5 0801 	subs.w	r8, r5, #1
 8007c6e:	bf49      	itett	mi
 8007c70:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c74:	2300      	movpl	r3, #0
 8007c76:	9305      	strmi	r3, [sp, #20]
 8007c78:	f04f 0800 	movmi.w	r8, #0
 8007c7c:	bf58      	it	pl
 8007c7e:	9305      	strpl	r3, [sp, #20]
 8007c80:	f1ba 0f00 	cmp.w	sl, #0
 8007c84:	db3e      	blt.n	8007d04 <_dtoa_r+0x224>
 8007c86:	2300      	movs	r3, #0
 8007c88:	44d0      	add	r8, sl
 8007c8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	f200 8090 	bhi.w	8007db8 <_dtoa_r+0x2d8>
 8007c98:	2b05      	cmp	r3, #5
 8007c9a:	bfc4      	itt	gt
 8007c9c:	3b04      	subgt	r3, #4
 8007c9e:	9306      	strgt	r3, [sp, #24]
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca6:	bfcc      	ite	gt
 8007ca8:	2500      	movgt	r5, #0
 8007caa:	2501      	movle	r5, #1
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	f200 808f 	bhi.w	8007dd0 <_dtoa_r+0x2f0>
 8007cb2:	e8df f003 	tbb	[pc, r3]
 8007cb6:	7f7d      	.short	0x7f7d
 8007cb8:	7131      	.short	0x7131
 8007cba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007cbe:	441d      	add	r5, r3
 8007cc0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007cc4:	2820      	cmp	r0, #32
 8007cc6:	dd13      	ble.n	8007cf0 <_dtoa_r+0x210>
 8007cc8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ccc:	9b00      	ldr	r3, [sp, #0]
 8007cce:	fa08 f800 	lsl.w	r8, r8, r0
 8007cd2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007cd6:	fa23 f000 	lsr.w	r0, r3, r0
 8007cda:	ea48 0000 	orr.w	r0, r8, r0
 8007cde:	f7f8 fc19 	bl	8000514 <__aeabi_ui2d>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007cea:	3d01      	subs	r5, #1
 8007cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cee:	e772      	b.n	8007bd6 <_dtoa_r+0xf6>
 8007cf0:	9b00      	ldr	r3, [sp, #0]
 8007cf2:	f1c0 0020 	rsb	r0, r0, #32
 8007cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cfa:	e7f0      	b.n	8007cde <_dtoa_r+0x1fe>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e7b1      	b.n	8007c64 <_dtoa_r+0x184>
 8007d00:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d02:	e7b0      	b.n	8007c66 <_dtoa_r+0x186>
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	eba3 030a 	sub.w	r3, r3, sl
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	f1ca 0300 	rsb	r3, sl, #0
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	2300      	movs	r3, #0
 8007d14:	930e      	str	r3, [sp, #56]	; 0x38
 8007d16:	e7bb      	b.n	8007c90 <_dtoa_r+0x1b0>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd59      	ble.n	8007dd6 <_dtoa_r+0x2f6>
 8007d22:	9302      	str	r3, [sp, #8]
 8007d24:	4699      	mov	r9, r3
 8007d26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d28:	2200      	movs	r2, #0
 8007d2a:	6072      	str	r2, [r6, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	f102 0014 	add.w	r0, r2, #20
 8007d32:	4298      	cmp	r0, r3
 8007d34:	6871      	ldr	r1, [r6, #4]
 8007d36:	d953      	bls.n	8007de0 <_dtoa_r+0x300>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f001 f8a7 	bl	8008e8c <_Balloc>
 8007d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	f1b9 0f0e 	cmp.w	r9, #14
 8007d46:	f8d3 b000 	ldr.w	fp, [r3]
 8007d4a:	f200 80e6 	bhi.w	8007f1a <_dtoa_r+0x43a>
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	f000 80e3 	beq.w	8007f1a <_dtoa_r+0x43a>
 8007d54:	ed9d 7b00 	vldr	d7, [sp]
 8007d58:	f1ba 0f00 	cmp.w	sl, #0
 8007d5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007d60:	dd74      	ble.n	8007e4c <_dtoa_r+0x36c>
 8007d62:	4a2a      	ldr	r2, [pc, #168]	; (8007e0c <_dtoa_r+0x32c>)
 8007d64:	f00a 030f 	and.w	r3, sl, #15
 8007d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d6c:	ed93 7b00 	vldr	d7, [r3]
 8007d70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d74:	06f0      	lsls	r0, r6, #27
 8007d76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007d7a:	d565      	bpl.n	8007e48 <_dtoa_r+0x368>
 8007d7c:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <_dtoa_r+0x330>)
 8007d7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d86:	f7f8 fd69 	bl	800085c <__aeabi_ddiv>
 8007d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d8e:	f006 060f 	and.w	r6, r6, #15
 8007d92:	2503      	movs	r5, #3
 8007d94:	4f1e      	ldr	r7, [pc, #120]	; (8007e10 <_dtoa_r+0x330>)
 8007d96:	e04c      	b.n	8007e32 <_dtoa_r+0x352>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9e:	4453      	add	r3, sl
 8007da0:	f103 0901 	add.w	r9, r3, #1
 8007da4:	9302      	str	r3, [sp, #8]
 8007da6:	464b      	mov	r3, r9
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	bfb8      	it	lt
 8007dac:	2301      	movlt	r3, #1
 8007dae:	e7ba      	b.n	8007d26 <_dtoa_r+0x246>
 8007db0:	2300      	movs	r3, #0
 8007db2:	e7b2      	b.n	8007d1a <_dtoa_r+0x23a>
 8007db4:	2300      	movs	r3, #0
 8007db6:	e7f0      	b.n	8007d9a <_dtoa_r+0x2ba>
 8007db8:	2501      	movs	r5, #1
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	950a      	str	r5, [sp, #40]	; 0x28
 8007dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc4:	9302      	str	r3, [sp, #8]
 8007dc6:	4699      	mov	r9, r3
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2312      	movs	r3, #18
 8007dcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dce:	e7aa      	b.n	8007d26 <_dtoa_r+0x246>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd4:	e7f4      	b.n	8007dc0 <_dtoa_r+0x2e0>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	4699      	mov	r9, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	e7f5      	b.n	8007dcc <_dtoa_r+0x2ec>
 8007de0:	3101      	adds	r1, #1
 8007de2:	6071      	str	r1, [r6, #4]
 8007de4:	0052      	lsls	r2, r2, #1
 8007de6:	e7a2      	b.n	8007d2e <_dtoa_r+0x24e>
 8007de8:	636f4361 	.word	0x636f4361
 8007dec:	3fd287a7 	.word	0x3fd287a7
 8007df0:	8b60c8b3 	.word	0x8b60c8b3
 8007df4:	3fc68a28 	.word	0x3fc68a28
 8007df8:	509f79fb 	.word	0x509f79fb
 8007dfc:	3fd34413 	.word	0x3fd34413
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800a3d5 	.word	0x0800a3d5
 8007e08:	3ff80000 	.word	0x3ff80000
 8007e0c:	0800a4f8 	.word	0x0800a4f8
 8007e10:	0800a4d0 	.word	0x0800a4d0
 8007e14:	0800a459 	.word	0x0800a459
 8007e18:	07f1      	lsls	r1, r6, #31
 8007e1a:	d508      	bpl.n	8007e2e <_dtoa_r+0x34e>
 8007e1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	f7f8 fbf0 	bl	8000608 <__aeabi_dmul>
 8007e28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	1076      	asrs	r6, r6, #1
 8007e30:	3708      	adds	r7, #8
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	d1f0      	bne.n	8007e18 <_dtoa_r+0x338>
 8007e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e3e:	f7f8 fd0d 	bl	800085c <__aeabi_ddiv>
 8007e42:	e9cd 0100 	strd	r0, r1, [sp]
 8007e46:	e01a      	b.n	8007e7e <_dtoa_r+0x39e>
 8007e48:	2502      	movs	r5, #2
 8007e4a:	e7a3      	b.n	8007d94 <_dtoa_r+0x2b4>
 8007e4c:	f000 80a0 	beq.w	8007f90 <_dtoa_r+0x4b0>
 8007e50:	f1ca 0600 	rsb	r6, sl, #0
 8007e54:	4b9f      	ldr	r3, [pc, #636]	; (80080d4 <_dtoa_r+0x5f4>)
 8007e56:	4fa0      	ldr	r7, [pc, #640]	; (80080d8 <_dtoa_r+0x5f8>)
 8007e58:	f006 020f 	and.w	r2, r6, #15
 8007e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e68:	f7f8 fbce 	bl	8000608 <__aeabi_dmul>
 8007e6c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e70:	1136      	asrs	r6, r6, #4
 8007e72:	2300      	movs	r3, #0
 8007e74:	2502      	movs	r5, #2
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	d17f      	bne.n	8007f7a <_dtoa_r+0x49a>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e1      	bne.n	8007e42 <_dtoa_r+0x362>
 8007e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8087 	beq.w	8007f94 <_dtoa_r+0x4b4>
 8007e86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4b93      	ldr	r3, [pc, #588]	; (80080dc <_dtoa_r+0x5fc>)
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4639      	mov	r1, r7
 8007e92:	f7f8 fe2b 	bl	8000aec <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d07c      	beq.n	8007f94 <_dtoa_r+0x4b4>
 8007e9a:	f1b9 0f00 	cmp.w	r9, #0
 8007e9e:	d079      	beq.n	8007f94 <_dtoa_r+0x4b4>
 8007ea0:	9b02      	ldr	r3, [sp, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dd35      	ble.n	8007f12 <_dtoa_r+0x432>
 8007ea6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007eaa:	9308      	str	r3, [sp, #32]
 8007eac:	4639      	mov	r1, r7
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4b8b      	ldr	r3, [pc, #556]	; (80080e0 <_dtoa_r+0x600>)
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7f8 fba8 	bl	8000608 <__aeabi_dmul>
 8007eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8007ebc:	9f02      	ldr	r7, [sp, #8]
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7f8 fb37 	bl	8000534 <__aeabi_i2d>
 8007ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4b84      	ldr	r3, [pc, #528]	; (80080e4 <_dtoa_r+0x604>)
 8007ed2:	f7f8 f9e3 	bl	800029c <__adddf3>
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	d15d      	bne.n	8007f9c <_dtoa_r+0x4bc>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4b81      	ldr	r3, [pc, #516]	; (80080e8 <_dtoa_r+0x608>)
 8007ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ee8:	f7f8 f9d6 	bl	8000298 <__aeabi_dsub>
 8007eec:	462a      	mov	r2, r5
 8007eee:	4633      	mov	r3, r6
 8007ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ef4:	f7f8 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 8288 	bne.w	800840e <_dtoa_r+0x92e>
 8007efe:	462a      	mov	r2, r5
 8007f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 827c 	bne.w	800840a <_dtoa_r+0x92a>
 8007f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f16:	e9cd 2300 	strd	r2, r3, [sp]
 8007f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f2c0 8150 	blt.w	80081c2 <_dtoa_r+0x6e2>
 8007f22:	f1ba 0f0e 	cmp.w	sl, #14
 8007f26:	f300 814c 	bgt.w	80081c2 <_dtoa_r+0x6e2>
 8007f2a:	4b6a      	ldr	r3, [pc, #424]	; (80080d4 <_dtoa_r+0x5f4>)
 8007f2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f30:	ed93 7b00 	vldr	d7, [r3]
 8007f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f3c:	f280 80d8 	bge.w	80080f0 <_dtoa_r+0x610>
 8007f40:	f1b9 0f00 	cmp.w	r9, #0
 8007f44:	f300 80d4 	bgt.w	80080f0 <_dtoa_r+0x610>
 8007f48:	f040 825e 	bne.w	8008408 <_dtoa_r+0x928>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4b66      	ldr	r3, [pc, #408]	; (80080e8 <_dtoa_r+0x608>)
 8007f50:	ec51 0b17 	vmov	r0, r1, d7
 8007f54:	f7f8 fb58 	bl	8000608 <__aeabi_dmul>
 8007f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5c:	f7f8 fdda 	bl	8000b14 <__aeabi_dcmpge>
 8007f60:	464f      	mov	r7, r9
 8007f62:	464e      	mov	r6, r9
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f040 8234 	bne.w	80083d2 <_dtoa_r+0x8f2>
 8007f6a:	2331      	movs	r3, #49	; 0x31
 8007f6c:	f10b 0501 	add.w	r5, fp, #1
 8007f70:	f88b 3000 	strb.w	r3, [fp]
 8007f74:	f10a 0a01 	add.w	sl, sl, #1
 8007f78:	e22f      	b.n	80083da <_dtoa_r+0x8fa>
 8007f7a:	07f2      	lsls	r2, r6, #31
 8007f7c:	d505      	bpl.n	8007f8a <_dtoa_r+0x4aa>
 8007f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f82:	f7f8 fb41 	bl	8000608 <__aeabi_dmul>
 8007f86:	3501      	adds	r5, #1
 8007f88:	2301      	movs	r3, #1
 8007f8a:	1076      	asrs	r6, r6, #1
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	e772      	b.n	8007e76 <_dtoa_r+0x396>
 8007f90:	2502      	movs	r5, #2
 8007f92:	e774      	b.n	8007e7e <_dtoa_r+0x39e>
 8007f94:	f8cd a020 	str.w	sl, [sp, #32]
 8007f98:	464f      	mov	r7, r9
 8007f9a:	e791      	b.n	8007ec0 <_dtoa_r+0x3e0>
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	; (80080d4 <_dtoa_r+0x5f4>)
 8007f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fa2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d047      	beq.n	800803c <_dtoa_r+0x55c>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	494e      	ldr	r1, [pc, #312]	; (80080ec <_dtoa_r+0x60c>)
 8007fb4:	f7f8 fc52 	bl	800085c <__aeabi_ddiv>
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4633      	mov	r3, r6
 8007fbc:	f7f8 f96c 	bl	8000298 <__aeabi_dsub>
 8007fc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fc4:	465d      	mov	r5, fp
 8007fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fca:	f7f8 fdcd 	bl	8000b68 <__aeabi_d2iz>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	f7f8 fab0 	bl	8000534 <__aeabi_i2d>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fdc:	f7f8 f95c 	bl	8000298 <__aeabi_dsub>
 8007fe0:	3630      	adds	r6, #48	; 0x30
 8007fe2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007fea:	e9cd 0100 	strd	r0, r1, [sp]
 8007fee:	f7f8 fd7d 	bl	8000aec <__aeabi_dcmplt>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d163      	bne.n	80080be <_dtoa_r+0x5de>
 8007ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4937      	ldr	r1, [pc, #220]	; (80080dc <_dtoa_r+0x5fc>)
 8007ffe:	f7f8 f94b 	bl	8000298 <__aeabi_dsub>
 8008002:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008006:	f7f8 fd71 	bl	8000aec <__aeabi_dcmplt>
 800800a:	2800      	cmp	r0, #0
 800800c:	f040 80b7 	bne.w	800817e <_dtoa_r+0x69e>
 8008010:	eba5 030b 	sub.w	r3, r5, fp
 8008014:	429f      	cmp	r7, r3
 8008016:	f77f af7c 	ble.w	8007f12 <_dtoa_r+0x432>
 800801a:	2200      	movs	r2, #0
 800801c:	4b30      	ldr	r3, [pc, #192]	; (80080e0 <_dtoa_r+0x600>)
 800801e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008022:	f7f8 faf1 	bl	8000608 <__aeabi_dmul>
 8008026:	2200      	movs	r2, #0
 8008028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800802c:	4b2c      	ldr	r3, [pc, #176]	; (80080e0 <_dtoa_r+0x600>)
 800802e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008032:	f7f8 fae9 	bl	8000608 <__aeabi_dmul>
 8008036:	e9cd 0100 	strd	r0, r1, [sp]
 800803a:	e7c4      	b.n	8007fc6 <_dtoa_r+0x4e6>
 800803c:	462a      	mov	r2, r5
 800803e:	4633      	mov	r3, r6
 8008040:	f7f8 fae2 	bl	8000608 <__aeabi_dmul>
 8008044:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008048:	eb0b 0507 	add.w	r5, fp, r7
 800804c:	465e      	mov	r6, fp
 800804e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008052:	f7f8 fd89 	bl	8000b68 <__aeabi_d2iz>
 8008056:	4607      	mov	r7, r0
 8008058:	f7f8 fa6c 	bl	8000534 <__aeabi_i2d>
 800805c:	3730      	adds	r7, #48	; 0x30
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008066:	f7f8 f917 	bl	8000298 <__aeabi_dsub>
 800806a:	f806 7b01 	strb.w	r7, [r6], #1
 800806e:	42ae      	cmp	r6, r5
 8008070:	e9cd 0100 	strd	r0, r1, [sp]
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	d126      	bne.n	80080c8 <_dtoa_r+0x5e8>
 800807a:	4b1c      	ldr	r3, [pc, #112]	; (80080ec <_dtoa_r+0x60c>)
 800807c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008080:	f7f8 f90c 	bl	800029c <__adddf3>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800808c:	f7f8 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 8008090:	2800      	cmp	r0, #0
 8008092:	d174      	bne.n	800817e <_dtoa_r+0x69e>
 8008094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008098:	2000      	movs	r0, #0
 800809a:	4914      	ldr	r1, [pc, #80]	; (80080ec <_dtoa_r+0x60c>)
 800809c:	f7f8 f8fc 	bl	8000298 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080a8:	f7f8 fd20 	bl	8000aec <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f af30 	beq.w	8007f12 <_dtoa_r+0x432>
 80080b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80080bc:	d002      	beq.n	80080c4 <_dtoa_r+0x5e4>
 80080be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080c2:	e04a      	b.n	800815a <_dtoa_r+0x67a>
 80080c4:	4615      	mov	r5, r2
 80080c6:	e7f4      	b.n	80080b2 <_dtoa_r+0x5d2>
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <_dtoa_r+0x600>)
 80080ca:	f7f8 fa9d 	bl	8000608 <__aeabi_dmul>
 80080ce:	e9cd 0100 	strd	r0, r1, [sp]
 80080d2:	e7bc      	b.n	800804e <_dtoa_r+0x56e>
 80080d4:	0800a4f8 	.word	0x0800a4f8
 80080d8:	0800a4d0 	.word	0x0800a4d0
 80080dc:	3ff00000 	.word	0x3ff00000
 80080e0:	40240000 	.word	0x40240000
 80080e4:	401c0000 	.word	0x401c0000
 80080e8:	40140000 	.word	0x40140000
 80080ec:	3fe00000 	.word	0x3fe00000
 80080f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080f4:	465d      	mov	r5, fp
 80080f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080fa:	4630      	mov	r0, r6
 80080fc:	4639      	mov	r1, r7
 80080fe:	f7f8 fbad 	bl	800085c <__aeabi_ddiv>
 8008102:	f7f8 fd31 	bl	8000b68 <__aeabi_d2iz>
 8008106:	4680      	mov	r8, r0
 8008108:	f7f8 fa14 	bl	8000534 <__aeabi_i2d>
 800810c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008110:	f7f8 fa7a 	bl	8000608 <__aeabi_dmul>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4630      	mov	r0, r6
 800811a:	4639      	mov	r1, r7
 800811c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008120:	f7f8 f8ba 	bl	8000298 <__aeabi_dsub>
 8008124:	f805 6b01 	strb.w	r6, [r5], #1
 8008128:	eba5 060b 	sub.w	r6, r5, fp
 800812c:	45b1      	cmp	r9, r6
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	d139      	bne.n	80081a8 <_dtoa_r+0x6c8>
 8008134:	f7f8 f8b2 	bl	800029c <__adddf3>
 8008138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	f7f8 fcf2 	bl	8000b28 <__aeabi_dcmpgt>
 8008144:	b9c8      	cbnz	r0, 800817a <_dtoa_r+0x69a>
 8008146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	f7f8 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008152:	b110      	cbz	r0, 800815a <_dtoa_r+0x67a>
 8008154:	f018 0f01 	tst.w	r8, #1
 8008158:	d10f      	bne.n	800817a <_dtoa_r+0x69a>
 800815a:	9904      	ldr	r1, [sp, #16]
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fec9 	bl	8008ef4 <_Bfree>
 8008162:	2300      	movs	r3, #0
 8008164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008166:	702b      	strb	r3, [r5, #0]
 8008168:	f10a 0301 	add.w	r3, sl, #1
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 8241 	beq.w	80085f8 <_dtoa_r+0xb18>
 8008176:	601d      	str	r5, [r3, #0]
 8008178:	e23e      	b.n	80085f8 <_dtoa_r+0xb18>
 800817a:	f8cd a020 	str.w	sl, [sp, #32]
 800817e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008182:	2a39      	cmp	r2, #57	; 0x39
 8008184:	f105 33ff 	add.w	r3, r5, #4294967295
 8008188:	d108      	bne.n	800819c <_dtoa_r+0x6bc>
 800818a:	459b      	cmp	fp, r3
 800818c:	d10a      	bne.n	80081a4 <_dtoa_r+0x6c4>
 800818e:	9b08      	ldr	r3, [sp, #32]
 8008190:	3301      	adds	r3, #1
 8008192:	9308      	str	r3, [sp, #32]
 8008194:	2330      	movs	r3, #48	; 0x30
 8008196:	f88b 3000 	strb.w	r3, [fp]
 800819a:	465b      	mov	r3, fp
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	3201      	adds	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	e78c      	b.n	80080be <_dtoa_r+0x5de>
 80081a4:	461d      	mov	r5, r3
 80081a6:	e7ea      	b.n	800817e <_dtoa_r+0x69e>
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b9b      	ldr	r3, [pc, #620]	; (8008418 <_dtoa_r+0x938>)
 80081ac:	f7f8 fa2c 	bl	8000608 <__aeabi_dmul>
 80081b0:	2200      	movs	r2, #0
 80081b2:	2300      	movs	r3, #0
 80081b4:	4606      	mov	r6, r0
 80081b6:	460f      	mov	r7, r1
 80081b8:	f7f8 fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d09a      	beq.n	80080f6 <_dtoa_r+0x616>
 80081c0:	e7cb      	b.n	800815a <_dtoa_r+0x67a>
 80081c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	f000 808b 	beq.w	80082e0 <_dtoa_r+0x800>
 80081ca:	9a06      	ldr	r2, [sp, #24]
 80081cc:	2a01      	cmp	r2, #1
 80081ce:	dc6e      	bgt.n	80082ae <_dtoa_r+0x7ce>
 80081d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	d067      	beq.n	80082a6 <_dtoa_r+0x7c6>
 80081d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081da:	9f07      	ldr	r7, [sp, #28]
 80081dc:	9d05      	ldr	r5, [sp, #20]
 80081de:	9a05      	ldr	r2, [sp, #20]
 80081e0:	2101      	movs	r1, #1
 80081e2:	441a      	add	r2, r3
 80081e4:	4620      	mov	r0, r4
 80081e6:	9205      	str	r2, [sp, #20]
 80081e8:	4498      	add	r8, r3
 80081ea:	f000 ff61 	bl	80090b0 <__i2b>
 80081ee:	4606      	mov	r6, r0
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	dd0c      	ble.n	800820e <_dtoa_r+0x72e>
 80081f4:	f1b8 0f00 	cmp.w	r8, #0
 80081f8:	dd09      	ble.n	800820e <_dtoa_r+0x72e>
 80081fa:	4545      	cmp	r5, r8
 80081fc:	9a05      	ldr	r2, [sp, #20]
 80081fe:	462b      	mov	r3, r5
 8008200:	bfa8      	it	ge
 8008202:	4643      	movge	r3, r8
 8008204:	1ad2      	subs	r2, r2, r3
 8008206:	9205      	str	r2, [sp, #20]
 8008208:	1aed      	subs	r5, r5, r3
 800820a:	eba8 0803 	sub.w	r8, r8, r3
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	b1eb      	cbz	r3, 800824e <_dtoa_r+0x76e>
 8008212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008214:	2b00      	cmp	r3, #0
 8008216:	d067      	beq.n	80082e8 <_dtoa_r+0x808>
 8008218:	b18f      	cbz	r7, 800823e <_dtoa_r+0x75e>
 800821a:	4631      	mov	r1, r6
 800821c:	463a      	mov	r2, r7
 800821e:	4620      	mov	r0, r4
 8008220:	f000 ffe6 	bl	80091f0 <__pow5mult>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	4601      	mov	r1, r0
 8008228:	4606      	mov	r6, r0
 800822a:	4620      	mov	r0, r4
 800822c:	f000 ff49 	bl	80090c2 <__multiply>
 8008230:	9904      	ldr	r1, [sp, #16]
 8008232:	9008      	str	r0, [sp, #32]
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fe5d 	bl	8008ef4 <_Bfree>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	9b07      	ldr	r3, [sp, #28]
 8008240:	1bda      	subs	r2, r3, r7
 8008242:	d004      	beq.n	800824e <_dtoa_r+0x76e>
 8008244:	9904      	ldr	r1, [sp, #16]
 8008246:	4620      	mov	r0, r4
 8008248:	f000 ffd2 	bl	80091f0 <__pow5mult>
 800824c:	9004      	str	r0, [sp, #16]
 800824e:	2101      	movs	r1, #1
 8008250:	4620      	mov	r0, r4
 8008252:	f000 ff2d 	bl	80090b0 <__i2b>
 8008256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008258:	4607      	mov	r7, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 81d0 	beq.w	8008600 <_dtoa_r+0xb20>
 8008260:	461a      	mov	r2, r3
 8008262:	4601      	mov	r1, r0
 8008264:	4620      	mov	r0, r4
 8008266:	f000 ffc3 	bl	80091f0 <__pow5mult>
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	2b01      	cmp	r3, #1
 800826e:	4607      	mov	r7, r0
 8008270:	dc40      	bgt.n	80082f4 <_dtoa_r+0x814>
 8008272:	9b00      	ldr	r3, [sp, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d139      	bne.n	80082ec <_dtoa_r+0x80c>
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827e:	2b00      	cmp	r3, #0
 8008280:	d136      	bne.n	80082f0 <_dtoa_r+0x810>
 8008282:	9b01      	ldr	r3, [sp, #4]
 8008284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008288:	0d1b      	lsrs	r3, r3, #20
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	b12b      	cbz	r3, 800829a <_dtoa_r+0x7ba>
 800828e:	9b05      	ldr	r3, [sp, #20]
 8008290:	3301      	adds	r3, #1
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f108 0801 	add.w	r8, r8, #1
 8008298:	2301      	movs	r3, #1
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d12a      	bne.n	80082f8 <_dtoa_r+0x818>
 80082a2:	2001      	movs	r0, #1
 80082a4:	e030      	b.n	8008308 <_dtoa_r+0x828>
 80082a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082ac:	e795      	b.n	80081da <_dtoa_r+0x6fa>
 80082ae:	9b07      	ldr	r3, [sp, #28]
 80082b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80082b4:	42bb      	cmp	r3, r7
 80082b6:	bfbf      	itttt	lt
 80082b8:	9b07      	ldrlt	r3, [sp, #28]
 80082ba:	9707      	strlt	r7, [sp, #28]
 80082bc:	1afa      	sublt	r2, r7, r3
 80082be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80082c0:	bfbb      	ittet	lt
 80082c2:	189b      	addlt	r3, r3, r2
 80082c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80082c6:	1bdf      	subge	r7, r3, r7
 80082c8:	2700      	movlt	r7, #0
 80082ca:	f1b9 0f00 	cmp.w	r9, #0
 80082ce:	bfb5      	itete	lt
 80082d0:	9b05      	ldrlt	r3, [sp, #20]
 80082d2:	9d05      	ldrge	r5, [sp, #20]
 80082d4:	eba3 0509 	sublt.w	r5, r3, r9
 80082d8:	464b      	movge	r3, r9
 80082da:	bfb8      	it	lt
 80082dc:	2300      	movlt	r3, #0
 80082de:	e77e      	b.n	80081de <_dtoa_r+0x6fe>
 80082e0:	9f07      	ldr	r7, [sp, #28]
 80082e2:	9d05      	ldr	r5, [sp, #20]
 80082e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80082e6:	e783      	b.n	80081f0 <_dtoa_r+0x710>
 80082e8:	9a07      	ldr	r2, [sp, #28]
 80082ea:	e7ab      	b.n	8008244 <_dtoa_r+0x764>
 80082ec:	2300      	movs	r3, #0
 80082ee:	e7d4      	b.n	800829a <_dtoa_r+0x7ba>
 80082f0:	9b00      	ldr	r3, [sp, #0]
 80082f2:	e7d2      	b.n	800829a <_dtoa_r+0x7ba>
 80082f4:	2300      	movs	r3, #0
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80082fe:	6918      	ldr	r0, [r3, #16]
 8008300:	f000 fe88 	bl	8009014 <__hi0bits>
 8008304:	f1c0 0020 	rsb	r0, r0, #32
 8008308:	4440      	add	r0, r8
 800830a:	f010 001f 	ands.w	r0, r0, #31
 800830e:	d047      	beq.n	80083a0 <_dtoa_r+0x8c0>
 8008310:	f1c0 0320 	rsb	r3, r0, #32
 8008314:	2b04      	cmp	r3, #4
 8008316:	dd3b      	ble.n	8008390 <_dtoa_r+0x8b0>
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	f1c0 001c 	rsb	r0, r0, #28
 800831e:	4403      	add	r3, r0
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	4405      	add	r5, r0
 8008324:	4480      	add	r8, r0
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dd05      	ble.n	8008338 <_dtoa_r+0x858>
 800832c:	461a      	mov	r2, r3
 800832e:	9904      	ldr	r1, [sp, #16]
 8008330:	4620      	mov	r0, r4
 8008332:	f000 ffab 	bl	800928c <__lshift>
 8008336:	9004      	str	r0, [sp, #16]
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	dd05      	ble.n	800834a <_dtoa_r+0x86a>
 800833e:	4639      	mov	r1, r7
 8008340:	4642      	mov	r2, r8
 8008342:	4620      	mov	r0, r4
 8008344:	f000 ffa2 	bl	800928c <__lshift>
 8008348:	4607      	mov	r7, r0
 800834a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800834c:	b353      	cbz	r3, 80083a4 <_dtoa_r+0x8c4>
 800834e:	4639      	mov	r1, r7
 8008350:	9804      	ldr	r0, [sp, #16]
 8008352:	f000 ffef 	bl	8009334 <__mcmp>
 8008356:	2800      	cmp	r0, #0
 8008358:	da24      	bge.n	80083a4 <_dtoa_r+0x8c4>
 800835a:	2300      	movs	r3, #0
 800835c:	220a      	movs	r2, #10
 800835e:	9904      	ldr	r1, [sp, #16]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fdde 	bl	8008f22 <__multadd>
 8008366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008368:	9004      	str	r0, [sp, #16]
 800836a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 814d 	beq.w	800860e <_dtoa_r+0xb2e>
 8008374:	2300      	movs	r3, #0
 8008376:	4631      	mov	r1, r6
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fdd1 	bl	8008f22 <__multadd>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	4606      	mov	r6, r0
 8008386:	dc4f      	bgt.n	8008428 <_dtoa_r+0x948>
 8008388:	9b06      	ldr	r3, [sp, #24]
 800838a:	2b02      	cmp	r3, #2
 800838c:	dd4c      	ble.n	8008428 <_dtoa_r+0x948>
 800838e:	e011      	b.n	80083b4 <_dtoa_r+0x8d4>
 8008390:	d0c9      	beq.n	8008326 <_dtoa_r+0x846>
 8008392:	9a05      	ldr	r2, [sp, #20]
 8008394:	331c      	adds	r3, #28
 8008396:	441a      	add	r2, r3
 8008398:	9205      	str	r2, [sp, #20]
 800839a:	441d      	add	r5, r3
 800839c:	4498      	add	r8, r3
 800839e:	e7c2      	b.n	8008326 <_dtoa_r+0x846>
 80083a0:	4603      	mov	r3, r0
 80083a2:	e7f6      	b.n	8008392 <_dtoa_r+0x8b2>
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	dc38      	bgt.n	800841c <_dtoa_r+0x93c>
 80083aa:	9b06      	ldr	r3, [sp, #24]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	dd35      	ble.n	800841c <_dtoa_r+0x93c>
 80083b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80083b4:	9b02      	ldr	r3, [sp, #8]
 80083b6:	b963      	cbnz	r3, 80083d2 <_dtoa_r+0x8f2>
 80083b8:	4639      	mov	r1, r7
 80083ba:	2205      	movs	r2, #5
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fdb0 	bl	8008f22 <__multadd>
 80083c2:	4601      	mov	r1, r0
 80083c4:	4607      	mov	r7, r0
 80083c6:	9804      	ldr	r0, [sp, #16]
 80083c8:	f000 ffb4 	bl	8009334 <__mcmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f73f adcc 	bgt.w	8007f6a <_dtoa_r+0x48a>
 80083d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d4:	465d      	mov	r5, fp
 80083d6:	ea6f 0a03 	mvn.w	sl, r3
 80083da:	f04f 0900 	mov.w	r9, #0
 80083de:	4639      	mov	r1, r7
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fd87 	bl	8008ef4 <_Bfree>
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	f43f aeb7 	beq.w	800815a <_dtoa_r+0x67a>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	d005      	beq.n	80083fe <_dtoa_r+0x91e>
 80083f2:	45b1      	cmp	r9, r6
 80083f4:	d003      	beq.n	80083fe <_dtoa_r+0x91e>
 80083f6:	4649      	mov	r1, r9
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 fd7b 	bl	8008ef4 <_Bfree>
 80083fe:	4631      	mov	r1, r6
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fd77 	bl	8008ef4 <_Bfree>
 8008406:	e6a8      	b.n	800815a <_dtoa_r+0x67a>
 8008408:	2700      	movs	r7, #0
 800840a:	463e      	mov	r6, r7
 800840c:	e7e1      	b.n	80083d2 <_dtoa_r+0x8f2>
 800840e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008412:	463e      	mov	r6, r7
 8008414:	e5a9      	b.n	8007f6a <_dtoa_r+0x48a>
 8008416:	bf00      	nop
 8008418:	40240000 	.word	0x40240000
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80fa 	beq.w	800861c <_dtoa_r+0xb3c>
 8008428:	2d00      	cmp	r5, #0
 800842a:	dd05      	ble.n	8008438 <_dtoa_r+0x958>
 800842c:	4631      	mov	r1, r6
 800842e:	462a      	mov	r2, r5
 8008430:	4620      	mov	r0, r4
 8008432:	f000 ff2b 	bl	800928c <__lshift>
 8008436:	4606      	mov	r6, r0
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d04c      	beq.n	80084d8 <_dtoa_r+0x9f8>
 800843e:	6871      	ldr	r1, [r6, #4]
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fd23 	bl	8008e8c <_Balloc>
 8008446:	6932      	ldr	r2, [r6, #16]
 8008448:	3202      	adds	r2, #2
 800844a:	4605      	mov	r5, r0
 800844c:	0092      	lsls	r2, r2, #2
 800844e:	f106 010c 	add.w	r1, r6, #12
 8008452:	300c      	adds	r0, #12
 8008454:	f7fd fd36 	bl	8005ec4 <memcpy>
 8008458:	2201      	movs	r2, #1
 800845a:	4629      	mov	r1, r5
 800845c:	4620      	mov	r0, r4
 800845e:	f000 ff15 	bl	800928c <__lshift>
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	f8cd b014 	str.w	fp, [sp, #20]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	46b1      	mov	r9, r6
 800846e:	9307      	str	r3, [sp, #28]
 8008470:	4606      	mov	r6, r0
 8008472:	4639      	mov	r1, r7
 8008474:	9804      	ldr	r0, [sp, #16]
 8008476:	f7ff faa5 	bl	80079c4 <quorem>
 800847a:	4649      	mov	r1, r9
 800847c:	4605      	mov	r5, r0
 800847e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008482:	9804      	ldr	r0, [sp, #16]
 8008484:	f000 ff56 	bl	8009334 <__mcmp>
 8008488:	4632      	mov	r2, r6
 800848a:	9000      	str	r0, [sp, #0]
 800848c:	4639      	mov	r1, r7
 800848e:	4620      	mov	r0, r4
 8008490:	f000 ff6a 	bl	8009368 <__mdiff>
 8008494:	68c3      	ldr	r3, [r0, #12]
 8008496:	4602      	mov	r2, r0
 8008498:	bb03      	cbnz	r3, 80084dc <_dtoa_r+0x9fc>
 800849a:	4601      	mov	r1, r0
 800849c:	9008      	str	r0, [sp, #32]
 800849e:	9804      	ldr	r0, [sp, #16]
 80084a0:	f000 ff48 	bl	8009334 <__mcmp>
 80084a4:	9a08      	ldr	r2, [sp, #32]
 80084a6:	4603      	mov	r3, r0
 80084a8:	4611      	mov	r1, r2
 80084aa:	4620      	mov	r0, r4
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	f000 fd21 	bl	8008ef4 <_Bfree>
 80084b2:	9b08      	ldr	r3, [sp, #32]
 80084b4:	b9a3      	cbnz	r3, 80084e0 <_dtoa_r+0xa00>
 80084b6:	9a06      	ldr	r2, [sp, #24]
 80084b8:	b992      	cbnz	r2, 80084e0 <_dtoa_r+0xa00>
 80084ba:	9a07      	ldr	r2, [sp, #28]
 80084bc:	b982      	cbnz	r2, 80084e0 <_dtoa_r+0xa00>
 80084be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084c2:	d029      	beq.n	8008518 <_dtoa_r+0xa38>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dd01      	ble.n	80084ce <_dtoa_r+0x9ee>
 80084ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	1c5d      	adds	r5, r3, #1
 80084d2:	f883 8000 	strb.w	r8, [r3]
 80084d6:	e782      	b.n	80083de <_dtoa_r+0x8fe>
 80084d8:	4630      	mov	r0, r6
 80084da:	e7c2      	b.n	8008462 <_dtoa_r+0x982>
 80084dc:	2301      	movs	r3, #1
 80084de:	e7e3      	b.n	80084a8 <_dtoa_r+0x9c8>
 80084e0:	9a00      	ldr	r2, [sp, #0]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	db04      	blt.n	80084f0 <_dtoa_r+0xa10>
 80084e6:	d125      	bne.n	8008534 <_dtoa_r+0xa54>
 80084e8:	9a06      	ldr	r2, [sp, #24]
 80084ea:	bb1a      	cbnz	r2, 8008534 <_dtoa_r+0xa54>
 80084ec:	9a07      	ldr	r2, [sp, #28]
 80084ee:	bb0a      	cbnz	r2, 8008534 <_dtoa_r+0xa54>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	ddec      	ble.n	80084ce <_dtoa_r+0x9ee>
 80084f4:	2201      	movs	r2, #1
 80084f6:	9904      	ldr	r1, [sp, #16]
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fec7 	bl	800928c <__lshift>
 80084fe:	4639      	mov	r1, r7
 8008500:	9004      	str	r0, [sp, #16]
 8008502:	f000 ff17 	bl	8009334 <__mcmp>
 8008506:	2800      	cmp	r0, #0
 8008508:	dc03      	bgt.n	8008512 <_dtoa_r+0xa32>
 800850a:	d1e0      	bne.n	80084ce <_dtoa_r+0x9ee>
 800850c:	f018 0f01 	tst.w	r8, #1
 8008510:	d0dd      	beq.n	80084ce <_dtoa_r+0x9ee>
 8008512:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008516:	d1d8      	bne.n	80084ca <_dtoa_r+0x9ea>
 8008518:	9b05      	ldr	r3, [sp, #20]
 800851a:	9a05      	ldr	r2, [sp, #20]
 800851c:	1c5d      	adds	r5, r3, #1
 800851e:	2339      	movs	r3, #57	; 0x39
 8008520:	7013      	strb	r3, [r2, #0]
 8008522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008526:	2b39      	cmp	r3, #57	; 0x39
 8008528:	f105 32ff 	add.w	r2, r5, #4294967295
 800852c:	d04f      	beq.n	80085ce <_dtoa_r+0xaee>
 800852e:	3301      	adds	r3, #1
 8008530:	7013      	strb	r3, [r2, #0]
 8008532:	e754      	b.n	80083de <_dtoa_r+0x8fe>
 8008534:	9a05      	ldr	r2, [sp, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f102 0501 	add.w	r5, r2, #1
 800853c:	dd06      	ble.n	800854c <_dtoa_r+0xa6c>
 800853e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008542:	d0e9      	beq.n	8008518 <_dtoa_r+0xa38>
 8008544:	f108 0801 	add.w	r8, r8, #1
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	e7c2      	b.n	80084d2 <_dtoa_r+0x9f2>
 800854c:	9a02      	ldr	r2, [sp, #8]
 800854e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008552:	eba5 030b 	sub.w	r3, r5, fp
 8008556:	4293      	cmp	r3, r2
 8008558:	d021      	beq.n	800859e <_dtoa_r+0xabe>
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	9904      	ldr	r1, [sp, #16]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fcde 	bl	8008f22 <__multadd>
 8008566:	45b1      	cmp	r9, r6
 8008568:	9004      	str	r0, [sp, #16]
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	f04f 020a 	mov.w	r2, #10
 8008572:	4649      	mov	r1, r9
 8008574:	4620      	mov	r0, r4
 8008576:	d105      	bne.n	8008584 <_dtoa_r+0xaa4>
 8008578:	f000 fcd3 	bl	8008f22 <__multadd>
 800857c:	4681      	mov	r9, r0
 800857e:	4606      	mov	r6, r0
 8008580:	9505      	str	r5, [sp, #20]
 8008582:	e776      	b.n	8008472 <_dtoa_r+0x992>
 8008584:	f000 fccd 	bl	8008f22 <__multadd>
 8008588:	4631      	mov	r1, r6
 800858a:	4681      	mov	r9, r0
 800858c:	2300      	movs	r3, #0
 800858e:	220a      	movs	r2, #10
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fcc6 	bl	8008f22 <__multadd>
 8008596:	4606      	mov	r6, r0
 8008598:	e7f2      	b.n	8008580 <_dtoa_r+0xaa0>
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	2201      	movs	r2, #1
 80085a0:	9904      	ldr	r1, [sp, #16]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fe72 	bl	800928c <__lshift>
 80085a8:	4639      	mov	r1, r7
 80085aa:	9004      	str	r0, [sp, #16]
 80085ac:	f000 fec2 	bl	8009334 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dcb6      	bgt.n	8008522 <_dtoa_r+0xa42>
 80085b4:	d102      	bne.n	80085bc <_dtoa_r+0xadc>
 80085b6:	f018 0f01 	tst.w	r8, #1
 80085ba:	d1b2      	bne.n	8008522 <_dtoa_r+0xa42>
 80085bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085c0:	2b30      	cmp	r3, #48	; 0x30
 80085c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80085c6:	f47f af0a 	bne.w	80083de <_dtoa_r+0x8fe>
 80085ca:	4615      	mov	r5, r2
 80085cc:	e7f6      	b.n	80085bc <_dtoa_r+0xadc>
 80085ce:	4593      	cmp	fp, r2
 80085d0:	d105      	bne.n	80085de <_dtoa_r+0xafe>
 80085d2:	2331      	movs	r3, #49	; 0x31
 80085d4:	f10a 0a01 	add.w	sl, sl, #1
 80085d8:	f88b 3000 	strb.w	r3, [fp]
 80085dc:	e6ff      	b.n	80083de <_dtoa_r+0x8fe>
 80085de:	4615      	mov	r5, r2
 80085e0:	e79f      	b.n	8008522 <_dtoa_r+0xa42>
 80085e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008648 <_dtoa_r+0xb68>
 80085e6:	e007      	b.n	80085f8 <_dtoa_r+0xb18>
 80085e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800864c <_dtoa_r+0xb6c>
 80085ee:	b11b      	cbz	r3, 80085f8 <_dtoa_r+0xb18>
 80085f0:	f10b 0308 	add.w	r3, fp, #8
 80085f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	4658      	mov	r0, fp
 80085fa:	b017      	add	sp, #92	; 0x5c
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	2b01      	cmp	r3, #1
 8008604:	f77f ae35 	ble.w	8008272 <_dtoa_r+0x792>
 8008608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800860a:	9307      	str	r3, [sp, #28]
 800860c:	e649      	b.n	80082a2 <_dtoa_r+0x7c2>
 800860e:	9b02      	ldr	r3, [sp, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	dc03      	bgt.n	800861c <_dtoa_r+0xb3c>
 8008614:	9b06      	ldr	r3, [sp, #24]
 8008616:	2b02      	cmp	r3, #2
 8008618:	f73f aecc 	bgt.w	80083b4 <_dtoa_r+0x8d4>
 800861c:	465d      	mov	r5, fp
 800861e:	4639      	mov	r1, r7
 8008620:	9804      	ldr	r0, [sp, #16]
 8008622:	f7ff f9cf 	bl	80079c4 <quorem>
 8008626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800862a:	f805 8b01 	strb.w	r8, [r5], #1
 800862e:	9a02      	ldr	r2, [sp, #8]
 8008630:	eba5 030b 	sub.w	r3, r5, fp
 8008634:	429a      	cmp	r2, r3
 8008636:	ddb0      	ble.n	800859a <_dtoa_r+0xaba>
 8008638:	2300      	movs	r3, #0
 800863a:	220a      	movs	r2, #10
 800863c:	9904      	ldr	r1, [sp, #16]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fc6f 	bl	8008f22 <__multadd>
 8008644:	9004      	str	r0, [sp, #16]
 8008646:	e7ea      	b.n	800861e <_dtoa_r+0xb3e>
 8008648:	0800a3d4 	.word	0x0800a3d4
 800864c:	0800a450 	.word	0x0800a450

08008650 <std>:
 8008650:	2300      	movs	r3, #0
 8008652:	b510      	push	{r4, lr}
 8008654:	4604      	mov	r4, r0
 8008656:	e9c0 3300 	strd	r3, r3, [r0]
 800865a:	6083      	str	r3, [r0, #8]
 800865c:	8181      	strh	r1, [r0, #12]
 800865e:	6643      	str	r3, [r0, #100]	; 0x64
 8008660:	81c2      	strh	r2, [r0, #14]
 8008662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008666:	6183      	str	r3, [r0, #24]
 8008668:	4619      	mov	r1, r3
 800866a:	2208      	movs	r2, #8
 800866c:	305c      	adds	r0, #92	; 0x5c
 800866e:	f7fd fc34 	bl	8005eda <memset>
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <std+0x38>)
 8008674:	6263      	str	r3, [r4, #36]	; 0x24
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <std+0x3c>)
 8008678:	62a3      	str	r3, [r4, #40]	; 0x28
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <std+0x40>)
 800867c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <std+0x44>)
 8008680:	6224      	str	r4, [r4, #32]
 8008682:	6323      	str	r3, [r4, #48]	; 0x30
 8008684:	bd10      	pop	{r4, pc}
 8008686:	bf00      	nop
 8008688:	08009d3d 	.word	0x08009d3d
 800868c:	08009d5f 	.word	0x08009d5f
 8008690:	08009d97 	.word	0x08009d97
 8008694:	08009dbb 	.word	0x08009dbb

08008698 <_cleanup_r>:
 8008698:	4901      	ldr	r1, [pc, #4]	; (80086a0 <_cleanup_r+0x8>)
 800869a:	f000 b885 	b.w	80087a8 <_fwalk_reent>
 800869e:	bf00      	nop
 80086a0:	0800a0d5 	.word	0x0800a0d5

080086a4 <__sfmoreglue>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	1e4a      	subs	r2, r1, #1
 80086a8:	2568      	movs	r5, #104	; 0x68
 80086aa:	4355      	muls	r5, r2
 80086ac:	460e      	mov	r6, r1
 80086ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086b2:	f001 f847 	bl	8009744 <_malloc_r>
 80086b6:	4604      	mov	r4, r0
 80086b8:	b140      	cbz	r0, 80086cc <__sfmoreglue+0x28>
 80086ba:	2100      	movs	r1, #0
 80086bc:	e9c0 1600 	strd	r1, r6, [r0]
 80086c0:	300c      	adds	r0, #12
 80086c2:	60a0      	str	r0, [r4, #8]
 80086c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086c8:	f7fd fc07 	bl	8005eda <memset>
 80086cc:	4620      	mov	r0, r4
 80086ce:	bd70      	pop	{r4, r5, r6, pc}

080086d0 <__sinit>:
 80086d0:	6983      	ldr	r3, [r0, #24]
 80086d2:	b510      	push	{r4, lr}
 80086d4:	4604      	mov	r4, r0
 80086d6:	bb33      	cbnz	r3, 8008726 <__sinit+0x56>
 80086d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80086dc:	6503      	str	r3, [r0, #80]	; 0x50
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <__sinit+0x58>)
 80086e0:	4a12      	ldr	r2, [pc, #72]	; (800872c <__sinit+0x5c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6282      	str	r2, [r0, #40]	; 0x28
 80086e6:	4298      	cmp	r0, r3
 80086e8:	bf04      	itt	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	6183      	streq	r3, [r0, #24]
 80086ee:	f000 f81f 	bl	8008730 <__sfp>
 80086f2:	6060      	str	r0, [r4, #4]
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 f81b 	bl	8008730 <__sfp>
 80086fa:	60a0      	str	r0, [r4, #8]
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 f817 	bl	8008730 <__sfp>
 8008702:	2200      	movs	r2, #0
 8008704:	60e0      	str	r0, [r4, #12]
 8008706:	2104      	movs	r1, #4
 8008708:	6860      	ldr	r0, [r4, #4]
 800870a:	f7ff ffa1 	bl	8008650 <std>
 800870e:	2201      	movs	r2, #1
 8008710:	2109      	movs	r1, #9
 8008712:	68a0      	ldr	r0, [r4, #8]
 8008714:	f7ff ff9c 	bl	8008650 <std>
 8008718:	2202      	movs	r2, #2
 800871a:	2112      	movs	r1, #18
 800871c:	68e0      	ldr	r0, [r4, #12]
 800871e:	f7ff ff97 	bl	8008650 <std>
 8008722:	2301      	movs	r3, #1
 8008724:	61a3      	str	r3, [r4, #24]
 8008726:	bd10      	pop	{r4, pc}
 8008728:	0800a3c0 	.word	0x0800a3c0
 800872c:	08008699 	.word	0x08008699

08008730 <__sfp>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <__sfp+0x70>)
 8008734:	681e      	ldr	r6, [r3, #0]
 8008736:	69b3      	ldr	r3, [r6, #24]
 8008738:	4607      	mov	r7, r0
 800873a:	b913      	cbnz	r3, 8008742 <__sfp+0x12>
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff ffc7 	bl	80086d0 <__sinit>
 8008742:	3648      	adds	r6, #72	; 0x48
 8008744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	d503      	bpl.n	8008754 <__sfp+0x24>
 800874c:	6833      	ldr	r3, [r6, #0]
 800874e:	b133      	cbz	r3, 800875e <__sfp+0x2e>
 8008750:	6836      	ldr	r6, [r6, #0]
 8008752:	e7f7      	b.n	8008744 <__sfp+0x14>
 8008754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008758:	b16d      	cbz	r5, 8008776 <__sfp+0x46>
 800875a:	3468      	adds	r4, #104	; 0x68
 800875c:	e7f4      	b.n	8008748 <__sfp+0x18>
 800875e:	2104      	movs	r1, #4
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ff9f 	bl	80086a4 <__sfmoreglue>
 8008766:	6030      	str	r0, [r6, #0]
 8008768:	2800      	cmp	r0, #0
 800876a:	d1f1      	bne.n	8008750 <__sfp+0x20>
 800876c:	230c      	movs	r3, #12
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	4604      	mov	r4, r0
 8008772:	4620      	mov	r0, r4
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <__sfp+0x74>)
 8008778:	6665      	str	r5, [r4, #100]	; 0x64
 800877a:	e9c4 5500 	strd	r5, r5, [r4]
 800877e:	60a5      	str	r5, [r4, #8]
 8008780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008788:	2208      	movs	r2, #8
 800878a:	4629      	mov	r1, r5
 800878c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008790:	f7fd fba3 	bl	8005eda <memset>
 8008794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800879c:	e7e9      	b.n	8008772 <__sfp+0x42>
 800879e:	bf00      	nop
 80087a0:	0800a3c0 	.word	0x0800a3c0
 80087a4:	ffff0001 	.word	0xffff0001

080087a8 <_fwalk_reent>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087b4:	2600      	movs	r6, #0
 80087b6:	b914      	cbnz	r4, 80087be <_fwalk_reent+0x16>
 80087b8:	4630      	mov	r0, r6
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80087c2:	3f01      	subs	r7, #1
 80087c4:	d501      	bpl.n	80087ca <_fwalk_reent+0x22>
 80087c6:	6824      	ldr	r4, [r4, #0]
 80087c8:	e7f5      	b.n	80087b6 <_fwalk_reent+0xe>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d907      	bls.n	80087e0 <_fwalk_reent+0x38>
 80087d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d4:	3301      	adds	r3, #1
 80087d6:	d003      	beq.n	80087e0 <_fwalk_reent+0x38>
 80087d8:	4629      	mov	r1, r5
 80087da:	4640      	mov	r0, r8
 80087dc:	47c8      	blx	r9
 80087de:	4306      	orrs	r6, r0
 80087e0:	3568      	adds	r5, #104	; 0x68
 80087e2:	e7ee      	b.n	80087c2 <_fwalk_reent+0x1a>

080087e4 <rshift>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	6906      	ldr	r6, [r0, #16]
 80087e8:	114b      	asrs	r3, r1, #5
 80087ea:	429e      	cmp	r6, r3
 80087ec:	f100 0414 	add.w	r4, r0, #20
 80087f0:	dd30      	ble.n	8008854 <rshift+0x70>
 80087f2:	f011 011f 	ands.w	r1, r1, #31
 80087f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80087fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80087fe:	d108      	bne.n	8008812 <rshift+0x2e>
 8008800:	4621      	mov	r1, r4
 8008802:	42b2      	cmp	r2, r6
 8008804:	460b      	mov	r3, r1
 8008806:	d211      	bcs.n	800882c <rshift+0x48>
 8008808:	f852 3b04 	ldr.w	r3, [r2], #4
 800880c:	f841 3b04 	str.w	r3, [r1], #4
 8008810:	e7f7      	b.n	8008802 <rshift+0x1e>
 8008812:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008816:	f1c1 0c20 	rsb	ip, r1, #32
 800881a:	40cd      	lsrs	r5, r1
 800881c:	3204      	adds	r2, #4
 800881e:	4623      	mov	r3, r4
 8008820:	42b2      	cmp	r2, r6
 8008822:	4617      	mov	r7, r2
 8008824:	d30c      	bcc.n	8008840 <rshift+0x5c>
 8008826:	601d      	str	r5, [r3, #0]
 8008828:	b105      	cbz	r5, 800882c <rshift+0x48>
 800882a:	3304      	adds	r3, #4
 800882c:	1b1a      	subs	r2, r3, r4
 800882e:	42a3      	cmp	r3, r4
 8008830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008834:	bf08      	it	eq
 8008836:	2300      	moveq	r3, #0
 8008838:	6102      	str	r2, [r0, #16]
 800883a:	bf08      	it	eq
 800883c:	6143      	streq	r3, [r0, #20]
 800883e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008840:	683f      	ldr	r7, [r7, #0]
 8008842:	fa07 f70c 	lsl.w	r7, r7, ip
 8008846:	433d      	orrs	r5, r7
 8008848:	f843 5b04 	str.w	r5, [r3], #4
 800884c:	f852 5b04 	ldr.w	r5, [r2], #4
 8008850:	40cd      	lsrs	r5, r1
 8008852:	e7e5      	b.n	8008820 <rshift+0x3c>
 8008854:	4623      	mov	r3, r4
 8008856:	e7e9      	b.n	800882c <rshift+0x48>

08008858 <__hexdig_fun>:
 8008858:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800885c:	2b09      	cmp	r3, #9
 800885e:	d802      	bhi.n	8008866 <__hexdig_fun+0xe>
 8008860:	3820      	subs	r0, #32
 8008862:	b2c0      	uxtb	r0, r0
 8008864:	4770      	bx	lr
 8008866:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800886a:	2b05      	cmp	r3, #5
 800886c:	d801      	bhi.n	8008872 <__hexdig_fun+0x1a>
 800886e:	3847      	subs	r0, #71	; 0x47
 8008870:	e7f7      	b.n	8008862 <__hexdig_fun+0xa>
 8008872:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008876:	2b05      	cmp	r3, #5
 8008878:	d801      	bhi.n	800887e <__hexdig_fun+0x26>
 800887a:	3827      	subs	r0, #39	; 0x27
 800887c:	e7f1      	b.n	8008862 <__hexdig_fun+0xa>
 800887e:	2000      	movs	r0, #0
 8008880:	4770      	bx	lr

08008882 <__gethex>:
 8008882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008886:	b08b      	sub	sp, #44	; 0x2c
 8008888:	468a      	mov	sl, r1
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800888e:	9306      	str	r3, [sp, #24]
 8008890:	4690      	mov	r8, r2
 8008892:	f000 fad0 	bl	8008e36 <__localeconv_l>
 8008896:	6803      	ldr	r3, [r0, #0]
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f7 fca0 	bl	80001e0 <strlen>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	9001      	str	r0, [sp, #4]
 80088a4:	4403      	add	r3, r0
 80088a6:	f04f 0b00 	mov.w	fp, #0
 80088aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	f8da 3000 	ldr.w	r3, [sl]
 80088b4:	3302      	adds	r3, #2
 80088b6:	461f      	mov	r7, r3
 80088b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088bc:	2830      	cmp	r0, #48	; 0x30
 80088be:	d06c      	beq.n	800899a <__gethex+0x118>
 80088c0:	f7ff ffca 	bl	8008858 <__hexdig_fun>
 80088c4:	4604      	mov	r4, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d16a      	bne.n	80089a0 <__gethex+0x11e>
 80088ca:	9a01      	ldr	r2, [sp, #4]
 80088cc:	9903      	ldr	r1, [sp, #12]
 80088ce:	4638      	mov	r0, r7
 80088d0:	f001 fa77 	bl	8009dc2 <strncmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d166      	bne.n	80089a6 <__gethex+0x124>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	5cf8      	ldrb	r0, [r7, r3]
 80088dc:	18fe      	adds	r6, r7, r3
 80088de:	f7ff ffbb 	bl	8008858 <__hexdig_fun>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d062      	beq.n	80089ac <__gethex+0x12a>
 80088e6:	4633      	mov	r3, r6
 80088e8:	7818      	ldrb	r0, [r3, #0]
 80088ea:	2830      	cmp	r0, #48	; 0x30
 80088ec:	461f      	mov	r7, r3
 80088ee:	f103 0301 	add.w	r3, r3, #1
 80088f2:	d0f9      	beq.n	80088e8 <__gethex+0x66>
 80088f4:	f7ff ffb0 	bl	8008858 <__hexdig_fun>
 80088f8:	fab0 f580 	clz	r5, r0
 80088fc:	096d      	lsrs	r5, r5, #5
 80088fe:	4634      	mov	r4, r6
 8008900:	f04f 0b01 	mov.w	fp, #1
 8008904:	463a      	mov	r2, r7
 8008906:	4616      	mov	r6, r2
 8008908:	3201      	adds	r2, #1
 800890a:	7830      	ldrb	r0, [r6, #0]
 800890c:	f7ff ffa4 	bl	8008858 <__hexdig_fun>
 8008910:	2800      	cmp	r0, #0
 8008912:	d1f8      	bne.n	8008906 <__gethex+0x84>
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	9903      	ldr	r1, [sp, #12]
 8008918:	4630      	mov	r0, r6
 800891a:	f001 fa52 	bl	8009dc2 <strncmp>
 800891e:	b950      	cbnz	r0, 8008936 <__gethex+0xb4>
 8008920:	b954      	cbnz	r4, 8008938 <__gethex+0xb6>
 8008922:	9b01      	ldr	r3, [sp, #4]
 8008924:	18f4      	adds	r4, r6, r3
 8008926:	4622      	mov	r2, r4
 8008928:	4616      	mov	r6, r2
 800892a:	3201      	adds	r2, #1
 800892c:	7830      	ldrb	r0, [r6, #0]
 800892e:	f7ff ff93 	bl	8008858 <__hexdig_fun>
 8008932:	2800      	cmp	r0, #0
 8008934:	d1f8      	bne.n	8008928 <__gethex+0xa6>
 8008936:	b10c      	cbz	r4, 800893c <__gethex+0xba>
 8008938:	1ba4      	subs	r4, r4, r6
 800893a:	00a4      	lsls	r4, r4, #2
 800893c:	7833      	ldrb	r3, [r6, #0]
 800893e:	2b50      	cmp	r3, #80	; 0x50
 8008940:	d001      	beq.n	8008946 <__gethex+0xc4>
 8008942:	2b70      	cmp	r3, #112	; 0x70
 8008944:	d140      	bne.n	80089c8 <__gethex+0x146>
 8008946:	7873      	ldrb	r3, [r6, #1]
 8008948:	2b2b      	cmp	r3, #43	; 0x2b
 800894a:	d031      	beq.n	80089b0 <__gethex+0x12e>
 800894c:	2b2d      	cmp	r3, #45	; 0x2d
 800894e:	d033      	beq.n	80089b8 <__gethex+0x136>
 8008950:	1c71      	adds	r1, r6, #1
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	7808      	ldrb	r0, [r1, #0]
 8008958:	f7ff ff7e 	bl	8008858 <__hexdig_fun>
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b18      	cmp	r3, #24
 8008962:	d831      	bhi.n	80089c8 <__gethex+0x146>
 8008964:	f1a0 0210 	sub.w	r2, r0, #16
 8008968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800896c:	f7ff ff74 	bl	8008858 <__hexdig_fun>
 8008970:	1e43      	subs	r3, r0, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b18      	cmp	r3, #24
 8008976:	d922      	bls.n	80089be <__gethex+0x13c>
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	d000      	beq.n	8008980 <__gethex+0xfe>
 800897e:	4252      	negs	r2, r2
 8008980:	4414      	add	r4, r2
 8008982:	f8ca 1000 	str.w	r1, [sl]
 8008986:	b30d      	cbz	r5, 80089cc <__gethex+0x14a>
 8008988:	f1bb 0f00 	cmp.w	fp, #0
 800898c:	bf0c      	ite	eq
 800898e:	2706      	moveq	r7, #6
 8008990:	2700      	movne	r7, #0
 8008992:	4638      	mov	r0, r7
 8008994:	b00b      	add	sp, #44	; 0x2c
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	f10b 0b01 	add.w	fp, fp, #1
 800899e:	e78a      	b.n	80088b6 <__gethex+0x34>
 80089a0:	2500      	movs	r5, #0
 80089a2:	462c      	mov	r4, r5
 80089a4:	e7ae      	b.n	8008904 <__gethex+0x82>
 80089a6:	463e      	mov	r6, r7
 80089a8:	2501      	movs	r5, #1
 80089aa:	e7c7      	b.n	800893c <__gethex+0xba>
 80089ac:	4604      	mov	r4, r0
 80089ae:	e7fb      	b.n	80089a8 <__gethex+0x126>
 80089b0:	f04f 0900 	mov.w	r9, #0
 80089b4:	1cb1      	adds	r1, r6, #2
 80089b6:	e7ce      	b.n	8008956 <__gethex+0xd4>
 80089b8:	f04f 0901 	mov.w	r9, #1
 80089bc:	e7fa      	b.n	80089b4 <__gethex+0x132>
 80089be:	230a      	movs	r3, #10
 80089c0:	fb03 0202 	mla	r2, r3, r2, r0
 80089c4:	3a10      	subs	r2, #16
 80089c6:	e7cf      	b.n	8008968 <__gethex+0xe6>
 80089c8:	4631      	mov	r1, r6
 80089ca:	e7da      	b.n	8008982 <__gethex+0x100>
 80089cc:	1bf3      	subs	r3, r6, r7
 80089ce:	3b01      	subs	r3, #1
 80089d0:	4629      	mov	r1, r5
 80089d2:	2b07      	cmp	r3, #7
 80089d4:	dc49      	bgt.n	8008a6a <__gethex+0x1e8>
 80089d6:	9802      	ldr	r0, [sp, #8]
 80089d8:	f000 fa58 	bl	8008e8c <_Balloc>
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	f100 0914 	add.w	r9, r0, #20
 80089e2:	f04f 0b00 	mov.w	fp, #0
 80089e6:	f1c3 0301 	rsb	r3, r3, #1
 80089ea:	4605      	mov	r5, r0
 80089ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80089f0:	46da      	mov	sl, fp
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	42b7      	cmp	r7, r6
 80089f6:	d33b      	bcc.n	8008a70 <__gethex+0x1ee>
 80089f8:	9804      	ldr	r0, [sp, #16]
 80089fa:	f840 ab04 	str.w	sl, [r0], #4
 80089fe:	eba0 0009 	sub.w	r0, r0, r9
 8008a02:	1080      	asrs	r0, r0, #2
 8008a04:	6128      	str	r0, [r5, #16]
 8008a06:	0147      	lsls	r7, r0, #5
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f000 fb03 	bl	8009014 <__hi0bits>
 8008a0e:	f8d8 6000 	ldr.w	r6, [r8]
 8008a12:	1a3f      	subs	r7, r7, r0
 8008a14:	42b7      	cmp	r7, r6
 8008a16:	dd64      	ble.n	8008ae2 <__gethex+0x260>
 8008a18:	1bbf      	subs	r7, r7, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f000 fe13 	bl	8009648 <__any_on>
 8008a22:	4682      	mov	sl, r0
 8008a24:	b178      	cbz	r0, 8008a46 <__gethex+0x1c4>
 8008a26:	1e7b      	subs	r3, r7, #1
 8008a28:	1159      	asrs	r1, r3, #5
 8008a2a:	f003 021f 	and.w	r2, r3, #31
 8008a2e:	f04f 0a01 	mov.w	sl, #1
 8008a32:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a36:	fa0a f202 	lsl.w	r2, sl, r2
 8008a3a:	420a      	tst	r2, r1
 8008a3c:	d003      	beq.n	8008a46 <__gethex+0x1c4>
 8008a3e:	4553      	cmp	r3, sl
 8008a40:	dc46      	bgt.n	8008ad0 <__gethex+0x24e>
 8008a42:	f04f 0a02 	mov.w	sl, #2
 8008a46:	4639      	mov	r1, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f7ff fecb 	bl	80087e4 <rshift>
 8008a4e:	443c      	add	r4, r7
 8008a50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	da52      	bge.n	8008afe <__gethex+0x27c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	9802      	ldr	r0, [sp, #8]
 8008a5c:	f000 fa4a 	bl	8008ef4 <_Bfree>
 8008a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a62:	2300      	movs	r3, #0
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	27a3      	movs	r7, #163	; 0xa3
 8008a68:	e793      	b.n	8008992 <__gethex+0x110>
 8008a6a:	3101      	adds	r1, #1
 8008a6c:	105b      	asrs	r3, r3, #1
 8008a6e:	e7b0      	b.n	80089d2 <__gethex+0x150>
 8008a70:	1e73      	subs	r3, r6, #1
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d018      	beq.n	8008ab0 <__gethex+0x22e>
 8008a7e:	f1bb 0f20 	cmp.w	fp, #32
 8008a82:	d107      	bne.n	8008a94 <__gethex+0x212>
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	f8c3 a000 	str.w	sl, [r3]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	f04f 0a00 	mov.w	sl, #0
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46d3      	mov	fp, sl
 8008a94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a98:	f7ff fede 	bl	8008858 <__hexdig_fun>
 8008a9c:	f000 000f 	and.w	r0, r0, #15
 8008aa0:	fa00 f00b 	lsl.w	r0, r0, fp
 8008aa4:	ea4a 0a00 	orr.w	sl, sl, r0
 8008aa8:	f10b 0b04 	add.w	fp, fp, #4
 8008aac:	9b05      	ldr	r3, [sp, #20]
 8008aae:	e00d      	b.n	8008acc <__gethex+0x24a>
 8008ab0:	9b05      	ldr	r3, [sp, #20]
 8008ab2:	9a08      	ldr	r2, [sp, #32]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	42bb      	cmp	r3, r7
 8008ab8:	d3e1      	bcc.n	8008a7e <__gethex+0x1fc>
 8008aba:	4618      	mov	r0, r3
 8008abc:	9a01      	ldr	r2, [sp, #4]
 8008abe:	9903      	ldr	r1, [sp, #12]
 8008ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac2:	f001 f97e 	bl	8009dc2 <strncmp>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d1d8      	bne.n	8008a7e <__gethex+0x1fc>
 8008acc:	461e      	mov	r6, r3
 8008ace:	e791      	b.n	80089f4 <__gethex+0x172>
 8008ad0:	1eb9      	subs	r1, r7, #2
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fdb8 	bl	8009648 <__any_on>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d0b2      	beq.n	8008a42 <__gethex+0x1c0>
 8008adc:	f04f 0a03 	mov.w	sl, #3
 8008ae0:	e7b1      	b.n	8008a46 <__gethex+0x1c4>
 8008ae2:	da09      	bge.n	8008af8 <__gethex+0x276>
 8008ae4:	1bf7      	subs	r7, r6, r7
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	463a      	mov	r2, r7
 8008aea:	9802      	ldr	r0, [sp, #8]
 8008aec:	f000 fbce 	bl	800928c <__lshift>
 8008af0:	1be4      	subs	r4, r4, r7
 8008af2:	4605      	mov	r5, r0
 8008af4:	f100 0914 	add.w	r9, r0, #20
 8008af8:	f04f 0a00 	mov.w	sl, #0
 8008afc:	e7a8      	b.n	8008a50 <__gethex+0x1ce>
 8008afe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b02:	42a0      	cmp	r0, r4
 8008b04:	dd6a      	ble.n	8008bdc <__gethex+0x35a>
 8008b06:	1b04      	subs	r4, r0, r4
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	dc2e      	bgt.n	8008b6a <__gethex+0x2e8>
 8008b0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d022      	beq.n	8008b5a <__gethex+0x2d8>
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d024      	beq.n	8008b62 <__gethex+0x2e0>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d115      	bne.n	8008b48 <__gethex+0x2c6>
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d113      	bne.n	8008b48 <__gethex+0x2c6>
 8008b20:	2e01      	cmp	r6, #1
 8008b22:	dc0b      	bgt.n	8008b3c <__gethex+0x2ba>
 8008b24:	9a06      	ldr	r2, [sp, #24]
 8008b26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	612b      	str	r3, [r5, #16]
 8008b30:	f8c9 3000 	str.w	r3, [r9]
 8008b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b36:	2762      	movs	r7, #98	; 0x62
 8008b38:	601d      	str	r5, [r3, #0]
 8008b3a:	e72a      	b.n	8008992 <__gethex+0x110>
 8008b3c:	1e71      	subs	r1, r6, #1
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fd82 	bl	8009648 <__any_on>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d1ed      	bne.n	8008b24 <__gethex+0x2a2>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	9802      	ldr	r0, [sp, #8]
 8008b4c:	f000 f9d2 	bl	8008ef4 <_Bfree>
 8008b50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b52:	2300      	movs	r3, #0
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	2750      	movs	r7, #80	; 0x50
 8008b58:	e71b      	b.n	8008992 <__gethex+0x110>
 8008b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0e1      	beq.n	8008b24 <__gethex+0x2a2>
 8008b60:	e7f2      	b.n	8008b48 <__gethex+0x2c6>
 8008b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1dd      	bne.n	8008b24 <__gethex+0x2a2>
 8008b68:	e7ee      	b.n	8008b48 <__gethex+0x2c6>
 8008b6a:	1e67      	subs	r7, r4, #1
 8008b6c:	f1ba 0f00 	cmp.w	sl, #0
 8008b70:	d131      	bne.n	8008bd6 <__gethex+0x354>
 8008b72:	b127      	cbz	r7, 8008b7e <__gethex+0x2fc>
 8008b74:	4639      	mov	r1, r7
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 fd66 	bl	8009648 <__any_on>
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	117a      	asrs	r2, r7, #5
 8008b80:	2301      	movs	r3, #1
 8008b82:	f007 071f 	and.w	r7, r7, #31
 8008b86:	fa03 f707 	lsl.w	r7, r3, r7
 8008b8a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008b8e:	4621      	mov	r1, r4
 8008b90:	421f      	tst	r7, r3
 8008b92:	4628      	mov	r0, r5
 8008b94:	bf18      	it	ne
 8008b96:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b9a:	1b36      	subs	r6, r6, r4
 8008b9c:	f7ff fe22 	bl	80087e4 <rshift>
 8008ba0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008ba4:	2702      	movs	r7, #2
 8008ba6:	f1ba 0f00 	cmp.w	sl, #0
 8008baa:	d048      	beq.n	8008c3e <__gethex+0x3bc>
 8008bac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d015      	beq.n	8008be0 <__gethex+0x35e>
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d017      	beq.n	8008be8 <__gethex+0x366>
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d109      	bne.n	8008bd0 <__gethex+0x34e>
 8008bbc:	f01a 0f02 	tst.w	sl, #2
 8008bc0:	d006      	beq.n	8008bd0 <__gethex+0x34e>
 8008bc2:	f8d9 3000 	ldr.w	r3, [r9]
 8008bc6:	ea4a 0a03 	orr.w	sl, sl, r3
 8008bca:	f01a 0f01 	tst.w	sl, #1
 8008bce:	d10e      	bne.n	8008bee <__gethex+0x36c>
 8008bd0:	f047 0710 	orr.w	r7, r7, #16
 8008bd4:	e033      	b.n	8008c3e <__gethex+0x3bc>
 8008bd6:	f04f 0a01 	mov.w	sl, #1
 8008bda:	e7d0      	b.n	8008b7e <__gethex+0x2fc>
 8008bdc:	2701      	movs	r7, #1
 8008bde:	e7e2      	b.n	8008ba6 <__gethex+0x324>
 8008be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008be2:	f1c3 0301 	rsb	r3, r3, #1
 8008be6:	9315      	str	r3, [sp, #84]	; 0x54
 8008be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f0      	beq.n	8008bd0 <__gethex+0x34e>
 8008bee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008bf2:	f105 0314 	add.w	r3, r5, #20
 8008bf6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008bfa:	eb03 010a 	add.w	r1, r3, sl
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c0c:	d01c      	beq.n	8008c48 <__gethex+0x3c6>
 8008c0e:	3201      	adds	r2, #1
 8008c10:	6002      	str	r2, [r0, #0]
 8008c12:	2f02      	cmp	r7, #2
 8008c14:	f105 0314 	add.w	r3, r5, #20
 8008c18:	d138      	bne.n	8008c8c <__gethex+0x40a>
 8008c1a:	f8d8 2000 	ldr.w	r2, [r8]
 8008c1e:	3a01      	subs	r2, #1
 8008c20:	42b2      	cmp	r2, r6
 8008c22:	d10a      	bne.n	8008c3a <__gethex+0x3b8>
 8008c24:	1171      	asrs	r1, r6, #5
 8008c26:	2201      	movs	r2, #1
 8008c28:	f006 061f 	and.w	r6, r6, #31
 8008c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c30:	fa02 f606 	lsl.w	r6, r2, r6
 8008c34:	421e      	tst	r6, r3
 8008c36:	bf18      	it	ne
 8008c38:	4617      	movne	r7, r2
 8008c3a:	f047 0720 	orr.w	r7, r7, #32
 8008c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c40:	601d      	str	r5, [r3, #0]
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	601c      	str	r4, [r3, #0]
 8008c46:	e6a4      	b.n	8008992 <__gethex+0x110>
 8008c48:	4299      	cmp	r1, r3
 8008c4a:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c4e:	d8d8      	bhi.n	8008c02 <__gethex+0x380>
 8008c50:	68ab      	ldr	r3, [r5, #8]
 8008c52:	4599      	cmp	r9, r3
 8008c54:	db12      	blt.n	8008c7c <__gethex+0x3fa>
 8008c56:	6869      	ldr	r1, [r5, #4]
 8008c58:	9802      	ldr	r0, [sp, #8]
 8008c5a:	3101      	adds	r1, #1
 8008c5c:	f000 f916 	bl	8008e8c <_Balloc>
 8008c60:	692a      	ldr	r2, [r5, #16]
 8008c62:	3202      	adds	r2, #2
 8008c64:	f105 010c 	add.w	r1, r5, #12
 8008c68:	4683      	mov	fp, r0
 8008c6a:	0092      	lsls	r2, r2, #2
 8008c6c:	300c      	adds	r0, #12
 8008c6e:	f7fd f929 	bl	8005ec4 <memcpy>
 8008c72:	4629      	mov	r1, r5
 8008c74:	9802      	ldr	r0, [sp, #8]
 8008c76:	f000 f93d 	bl	8008ef4 <_Bfree>
 8008c7a:	465d      	mov	r5, fp
 8008c7c:	692b      	ldr	r3, [r5, #16]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008c84:	612a      	str	r2, [r5, #16]
 8008c86:	2201      	movs	r2, #1
 8008c88:	615a      	str	r2, [r3, #20]
 8008c8a:	e7c2      	b.n	8008c12 <__gethex+0x390>
 8008c8c:	692a      	ldr	r2, [r5, #16]
 8008c8e:	454a      	cmp	r2, r9
 8008c90:	dd0b      	ble.n	8008caa <__gethex+0x428>
 8008c92:	2101      	movs	r1, #1
 8008c94:	4628      	mov	r0, r5
 8008c96:	f7ff fda5 	bl	80087e4 <rshift>
 8008c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c9e:	3401      	adds	r4, #1
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	f6ff aed9 	blt.w	8008a58 <__gethex+0x1d6>
 8008ca6:	2701      	movs	r7, #1
 8008ca8:	e7c7      	b.n	8008c3a <__gethex+0x3b8>
 8008caa:	f016 061f 	ands.w	r6, r6, #31
 8008cae:	d0fa      	beq.n	8008ca6 <__gethex+0x424>
 8008cb0:	449a      	add	sl, r3
 8008cb2:	f1c6 0620 	rsb	r6, r6, #32
 8008cb6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008cba:	f000 f9ab 	bl	8009014 <__hi0bits>
 8008cbe:	42b0      	cmp	r0, r6
 8008cc0:	dbe7      	blt.n	8008c92 <__gethex+0x410>
 8008cc2:	e7f0      	b.n	8008ca6 <__gethex+0x424>

08008cc4 <L_shift>:
 8008cc4:	f1c2 0208 	rsb	r2, r2, #8
 8008cc8:	0092      	lsls	r2, r2, #2
 8008cca:	b570      	push	{r4, r5, r6, lr}
 8008ccc:	f1c2 0620 	rsb	r6, r2, #32
 8008cd0:	6843      	ldr	r3, [r0, #4]
 8008cd2:	6804      	ldr	r4, [r0, #0]
 8008cd4:	fa03 f506 	lsl.w	r5, r3, r6
 8008cd8:	432c      	orrs	r4, r5
 8008cda:	40d3      	lsrs	r3, r2
 8008cdc:	6004      	str	r4, [r0, #0]
 8008cde:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ce2:	4288      	cmp	r0, r1
 8008ce4:	d3f4      	bcc.n	8008cd0 <L_shift+0xc>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}

08008ce8 <__match>:
 8008ce8:	b530      	push	{r4, r5, lr}
 8008cea:	6803      	ldr	r3, [r0, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf2:	b914      	cbnz	r4, 8008cfa <__match+0x12>
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	bd30      	pop	{r4, r5, pc}
 8008cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d02:	2d19      	cmp	r5, #25
 8008d04:	bf98      	it	ls
 8008d06:	3220      	addls	r2, #32
 8008d08:	42a2      	cmp	r2, r4
 8008d0a:	d0f0      	beq.n	8008cee <__match+0x6>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7f3      	b.n	8008cf8 <__match+0x10>

08008d10 <__hexnan>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	680b      	ldr	r3, [r1, #0]
 8008d16:	6801      	ldr	r1, [r0, #0]
 8008d18:	115f      	asrs	r7, r3, #5
 8008d1a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008d1e:	f013 031f 	ands.w	r3, r3, #31
 8008d22:	b087      	sub	sp, #28
 8008d24:	bf18      	it	ne
 8008d26:	3704      	addne	r7, #4
 8008d28:	2500      	movs	r5, #0
 8008d2a:	1f3e      	subs	r6, r7, #4
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	4690      	mov	r8, r2
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f847 5c04 	str.w	r5, [r7, #-4]
 8008d36:	46b1      	mov	r9, r6
 8008d38:	4634      	mov	r4, r6
 8008d3a:	9502      	str	r5, [sp, #8]
 8008d3c:	46ab      	mov	fp, r5
 8008d3e:	784a      	ldrb	r2, [r1, #1]
 8008d40:	1c4b      	adds	r3, r1, #1
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	b342      	cbz	r2, 8008d98 <__hexnan+0x88>
 8008d46:	4610      	mov	r0, r2
 8008d48:	9105      	str	r1, [sp, #20]
 8008d4a:	9204      	str	r2, [sp, #16]
 8008d4c:	f7ff fd84 	bl	8008858 <__hexdig_fun>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d143      	bne.n	8008ddc <__hexnan+0xcc>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	9905      	ldr	r1, [sp, #20]
 8008d58:	2a20      	cmp	r2, #32
 8008d5a:	d818      	bhi.n	8008d8e <__hexnan+0x7e>
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	459b      	cmp	fp, r3
 8008d60:	dd13      	ble.n	8008d8a <__hexnan+0x7a>
 8008d62:	454c      	cmp	r4, r9
 8008d64:	d206      	bcs.n	8008d74 <__hexnan+0x64>
 8008d66:	2d07      	cmp	r5, #7
 8008d68:	dc04      	bgt.n	8008d74 <__hexnan+0x64>
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff ffa8 	bl	8008cc4 <L_shift>
 8008d74:	4544      	cmp	r4, r8
 8008d76:	d944      	bls.n	8008e02 <__hexnan+0xf2>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d82:	f8cd b008 	str.w	fp, [sp, #8]
 8008d86:	464c      	mov	r4, r9
 8008d88:	461d      	mov	r5, r3
 8008d8a:	9903      	ldr	r1, [sp, #12]
 8008d8c:	e7d7      	b.n	8008d3e <__hexnan+0x2e>
 8008d8e:	2a29      	cmp	r2, #41	; 0x29
 8008d90:	d14a      	bne.n	8008e28 <__hexnan+0x118>
 8008d92:	3102      	adds	r1, #2
 8008d94:	f8ca 1000 	str.w	r1, [sl]
 8008d98:	f1bb 0f00 	cmp.w	fp, #0
 8008d9c:	d044      	beq.n	8008e28 <__hexnan+0x118>
 8008d9e:	454c      	cmp	r4, r9
 8008da0:	d206      	bcs.n	8008db0 <__hexnan+0xa0>
 8008da2:	2d07      	cmp	r5, #7
 8008da4:	dc04      	bgt.n	8008db0 <__hexnan+0xa0>
 8008da6:	462a      	mov	r2, r5
 8008da8:	4649      	mov	r1, r9
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff ff8a 	bl	8008cc4 <L_shift>
 8008db0:	4544      	cmp	r4, r8
 8008db2:	d928      	bls.n	8008e06 <__hexnan+0xf6>
 8008db4:	4643      	mov	r3, r8
 8008db6:	f854 2b04 	ldr.w	r2, [r4], #4
 8008dba:	f843 2b04 	str.w	r2, [r3], #4
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d2f9      	bcs.n	8008db6 <__hexnan+0xa6>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f843 2b04 	str.w	r2, [r3], #4
 8008dc8:	429e      	cmp	r6, r3
 8008dca:	d2fb      	bcs.n	8008dc4 <__hexnan+0xb4>
 8008dcc:	6833      	ldr	r3, [r6, #0]
 8008dce:	b91b      	cbnz	r3, 8008dd8 <__hexnan+0xc8>
 8008dd0:	4546      	cmp	r6, r8
 8008dd2:	d127      	bne.n	8008e24 <__hexnan+0x114>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6033      	str	r3, [r6, #0]
 8008dd8:	2005      	movs	r0, #5
 8008dda:	e026      	b.n	8008e2a <__hexnan+0x11a>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	2d08      	cmp	r5, #8
 8008de0:	f10b 0b01 	add.w	fp, fp, #1
 8008de4:	dd06      	ble.n	8008df4 <__hexnan+0xe4>
 8008de6:	4544      	cmp	r4, r8
 8008de8:	d9cf      	bls.n	8008d8a <__hexnan+0x7a>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f844 3c04 	str.w	r3, [r4, #-4]
 8008df0:	2501      	movs	r5, #1
 8008df2:	3c04      	subs	r4, #4
 8008df4:	6822      	ldr	r2, [r4, #0]
 8008df6:	f000 000f 	and.w	r0, r0, #15
 8008dfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dfe:	6020      	str	r0, [r4, #0]
 8008e00:	e7c3      	b.n	8008d8a <__hexnan+0x7a>
 8008e02:	2508      	movs	r5, #8
 8008e04:	e7c1      	b.n	8008d8a <__hexnan+0x7a>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0df      	beq.n	8008dcc <__hexnan+0xbc>
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e10:	f1c3 0320 	rsb	r3, r3, #32
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
 8008e18:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008e22:	e7d3      	b.n	8008dcc <__hexnan+0xbc>
 8008e24:	3e04      	subs	r6, #4
 8008e26:	e7d1      	b.n	8008dcc <__hexnan+0xbc>
 8008e28:	2004      	movs	r0, #4
 8008e2a:	b007      	add	sp, #28
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e30 <__locale_ctype_ptr_l>:
 8008e30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008e34:	4770      	bx	lr

08008e36 <__localeconv_l>:
 8008e36:	30f0      	adds	r0, #240	; 0xf0
 8008e38:	4770      	bx	lr
	...

08008e3c <_localeconv_r>:
 8008e3c:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <_localeconv_r+0x14>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a18      	ldr	r0, [r3, #32]
 8008e42:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <_localeconv_r+0x18>)
 8008e44:	2800      	cmp	r0, #0
 8008e46:	bf08      	it	eq
 8008e48:	4618      	moveq	r0, r3
 8008e4a:	30f0      	adds	r0, #240	; 0xf0
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000010 	.word	0x20000010
 8008e54:	20000074 	.word	0x20000074

08008e58 <malloc>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <malloc+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f000 bc71 	b.w	8009744 <_malloc_r>
 8008e62:	bf00      	nop
 8008e64:	20000010 	.word	0x20000010

08008e68 <__ascii_mbtowc>:
 8008e68:	b082      	sub	sp, #8
 8008e6a:	b901      	cbnz	r1, 8008e6e <__ascii_mbtowc+0x6>
 8008e6c:	a901      	add	r1, sp, #4
 8008e6e:	b142      	cbz	r2, 8008e82 <__ascii_mbtowc+0x1a>
 8008e70:	b14b      	cbz	r3, 8008e86 <__ascii_mbtowc+0x1e>
 8008e72:	7813      	ldrb	r3, [r2, #0]
 8008e74:	600b      	str	r3, [r1, #0]
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	1c10      	adds	r0, r2, #0
 8008e7a:	bf18      	it	ne
 8008e7c:	2001      	movne	r0, #1
 8008e7e:	b002      	add	sp, #8
 8008e80:	4770      	bx	lr
 8008e82:	4610      	mov	r0, r2
 8008e84:	e7fb      	b.n	8008e7e <__ascii_mbtowc+0x16>
 8008e86:	f06f 0001 	mvn.w	r0, #1
 8008e8a:	e7f8      	b.n	8008e7e <__ascii_mbtowc+0x16>

08008e8c <_Balloc>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e90:	4604      	mov	r4, r0
 8008e92:	460e      	mov	r6, r1
 8008e94:	b93d      	cbnz	r5, 8008ea6 <_Balloc+0x1a>
 8008e96:	2010      	movs	r0, #16
 8008e98:	f7ff ffde 	bl	8008e58 <malloc>
 8008e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ea2:	6005      	str	r5, [r0, #0]
 8008ea4:	60c5      	str	r5, [r0, #12]
 8008ea6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ea8:	68eb      	ldr	r3, [r5, #12]
 8008eaa:	b183      	cbz	r3, 8008ece <_Balloc+0x42>
 8008eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008eb4:	b9b8      	cbnz	r0, 8008ee6 <_Balloc+0x5a>
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	fa01 f506 	lsl.w	r5, r1, r6
 8008ebc:	1d6a      	adds	r2, r5, #5
 8008ebe:	0092      	lsls	r2, r2, #2
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fbe2 	bl	800968a <_calloc_r>
 8008ec6:	b160      	cbz	r0, 8008ee2 <_Balloc+0x56>
 8008ec8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008ecc:	e00e      	b.n	8008eec <_Balloc+0x60>
 8008ece:	2221      	movs	r2, #33	; 0x21
 8008ed0:	2104      	movs	r1, #4
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fbd9 	bl	800968a <_calloc_r>
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	60e8      	str	r0, [r5, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e4      	bne.n	8008eac <_Balloc+0x20>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	6802      	ldr	r2, [r0, #0]
 8008ee8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008eec:	2300      	movs	r3, #0
 8008eee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ef2:	e7f7      	b.n	8008ee4 <_Balloc+0x58>

08008ef4 <_Bfree>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ef8:	4606      	mov	r6, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	b93c      	cbnz	r4, 8008f0e <_Bfree+0x1a>
 8008efe:	2010      	movs	r0, #16
 8008f00:	f7ff ffaa 	bl	8008e58 <malloc>
 8008f04:	6270      	str	r0, [r6, #36]	; 0x24
 8008f06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f0a:	6004      	str	r4, [r0, #0]
 8008f0c:	60c4      	str	r4, [r0, #12]
 8008f0e:	b13d      	cbz	r5, 8008f20 <_Bfree+0x2c>
 8008f10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f12:	686a      	ldr	r2, [r5, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f1a:	6029      	str	r1, [r5, #0]
 8008f1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f20:	bd70      	pop	{r4, r5, r6, pc}

08008f22 <__multadd>:
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	690d      	ldr	r5, [r1, #16]
 8008f28:	461f      	mov	r7, r3
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	f101 0c14 	add.w	ip, r1, #20
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8dc 0000 	ldr.w	r0, [ip]
 8008f38:	b281      	uxth	r1, r0
 8008f3a:	fb02 7101 	mla	r1, r2, r1, r7
 8008f3e:	0c0f      	lsrs	r7, r1, #16
 8008f40:	0c00      	lsrs	r0, r0, #16
 8008f42:	fb02 7000 	mla	r0, r2, r0, r7
 8008f46:	b289      	uxth	r1, r1
 8008f48:	3301      	adds	r3, #1
 8008f4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f4e:	429d      	cmp	r5, r3
 8008f50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f54:	f84c 1b04 	str.w	r1, [ip], #4
 8008f58:	dcec      	bgt.n	8008f34 <__multadd+0x12>
 8008f5a:	b1d7      	cbz	r7, 8008f92 <__multadd+0x70>
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	dc12      	bgt.n	8008f88 <__multadd+0x66>
 8008f62:	6861      	ldr	r1, [r4, #4]
 8008f64:	4630      	mov	r0, r6
 8008f66:	3101      	adds	r1, #1
 8008f68:	f7ff ff90 	bl	8008e8c <_Balloc>
 8008f6c:	6922      	ldr	r2, [r4, #16]
 8008f6e:	3202      	adds	r2, #2
 8008f70:	f104 010c 	add.w	r1, r4, #12
 8008f74:	4680      	mov	r8, r0
 8008f76:	0092      	lsls	r2, r2, #2
 8008f78:	300c      	adds	r0, #12
 8008f7a:	f7fc ffa3 	bl	8005ec4 <memcpy>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7ff ffb7 	bl	8008ef4 <_Bfree>
 8008f86:	4644      	mov	r4, r8
 8008f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f8c:	3501      	adds	r5, #1
 8008f8e:	615f      	str	r7, [r3, #20]
 8008f90:	6125      	str	r5, [r4, #16]
 8008f92:	4620      	mov	r0, r4
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f98 <__s2b>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	4615      	mov	r5, r2
 8008fa0:	461f      	mov	r7, r3
 8008fa2:	2209      	movs	r2, #9
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fac:	2100      	movs	r1, #0
 8008fae:	2201      	movs	r2, #1
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	db20      	blt.n	8008ff6 <__s2b+0x5e>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7ff ff69 	bl	8008e8c <_Balloc>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	6143      	str	r3, [r0, #20]
 8008fbe:	2d09      	cmp	r5, #9
 8008fc0:	f04f 0301 	mov.w	r3, #1
 8008fc4:	6103      	str	r3, [r0, #16]
 8008fc6:	dd19      	ble.n	8008ffc <__s2b+0x64>
 8008fc8:	f104 0809 	add.w	r8, r4, #9
 8008fcc:	46c1      	mov	r9, r8
 8008fce:	442c      	add	r4, r5
 8008fd0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	3b30      	subs	r3, #48	; 0x30
 8008fd8:	220a      	movs	r2, #10
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ffa1 	bl	8008f22 <__multadd>
 8008fe0:	45a1      	cmp	r9, r4
 8008fe2:	d1f5      	bne.n	8008fd0 <__s2b+0x38>
 8008fe4:	eb08 0405 	add.w	r4, r8, r5
 8008fe8:	3c08      	subs	r4, #8
 8008fea:	1b2d      	subs	r5, r5, r4
 8008fec:	1963      	adds	r3, r4, r5
 8008fee:	42bb      	cmp	r3, r7
 8008ff0:	db07      	blt.n	8009002 <__s2b+0x6a>
 8008ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	0052      	lsls	r2, r2, #1
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	e7d9      	b.n	8008fb0 <__s2b+0x18>
 8008ffc:	340a      	adds	r4, #10
 8008ffe:	2509      	movs	r5, #9
 8009000:	e7f3      	b.n	8008fea <__s2b+0x52>
 8009002:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009006:	4601      	mov	r1, r0
 8009008:	3b30      	subs	r3, #48	; 0x30
 800900a:	220a      	movs	r2, #10
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff ff88 	bl	8008f22 <__multadd>
 8009012:	e7eb      	b.n	8008fec <__s2b+0x54>

08009014 <__hi0bits>:
 8009014:	0c02      	lsrs	r2, r0, #16
 8009016:	0412      	lsls	r2, r2, #16
 8009018:	4603      	mov	r3, r0
 800901a:	b9b2      	cbnz	r2, 800904a <__hi0bits+0x36>
 800901c:	0403      	lsls	r3, r0, #16
 800901e:	2010      	movs	r0, #16
 8009020:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009024:	bf04      	itt	eq
 8009026:	021b      	lsleq	r3, r3, #8
 8009028:	3008      	addeq	r0, #8
 800902a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800902e:	bf04      	itt	eq
 8009030:	011b      	lsleq	r3, r3, #4
 8009032:	3004      	addeq	r0, #4
 8009034:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009038:	bf04      	itt	eq
 800903a:	009b      	lsleq	r3, r3, #2
 800903c:	3002      	addeq	r0, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	db06      	blt.n	8009050 <__hi0bits+0x3c>
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	d503      	bpl.n	800904e <__hi0bits+0x3a>
 8009046:	3001      	adds	r0, #1
 8009048:	4770      	bx	lr
 800904a:	2000      	movs	r0, #0
 800904c:	e7e8      	b.n	8009020 <__hi0bits+0xc>
 800904e:	2020      	movs	r0, #32
 8009050:	4770      	bx	lr

08009052 <__lo0bits>:
 8009052:	6803      	ldr	r3, [r0, #0]
 8009054:	f013 0207 	ands.w	r2, r3, #7
 8009058:	4601      	mov	r1, r0
 800905a:	d00b      	beq.n	8009074 <__lo0bits+0x22>
 800905c:	07da      	lsls	r2, r3, #31
 800905e:	d423      	bmi.n	80090a8 <__lo0bits+0x56>
 8009060:	0798      	lsls	r0, r3, #30
 8009062:	bf49      	itett	mi
 8009064:	085b      	lsrmi	r3, r3, #1
 8009066:	089b      	lsrpl	r3, r3, #2
 8009068:	2001      	movmi	r0, #1
 800906a:	600b      	strmi	r3, [r1, #0]
 800906c:	bf5c      	itt	pl
 800906e:	600b      	strpl	r3, [r1, #0]
 8009070:	2002      	movpl	r0, #2
 8009072:	4770      	bx	lr
 8009074:	b298      	uxth	r0, r3
 8009076:	b9a8      	cbnz	r0, 80090a4 <__lo0bits+0x52>
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	2010      	movs	r0, #16
 800907c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009080:	bf04      	itt	eq
 8009082:	0a1b      	lsreq	r3, r3, #8
 8009084:	3008      	addeq	r0, #8
 8009086:	071a      	lsls	r2, r3, #28
 8009088:	bf04      	itt	eq
 800908a:	091b      	lsreq	r3, r3, #4
 800908c:	3004      	addeq	r0, #4
 800908e:	079a      	lsls	r2, r3, #30
 8009090:	bf04      	itt	eq
 8009092:	089b      	lsreq	r3, r3, #2
 8009094:	3002      	addeq	r0, #2
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d402      	bmi.n	80090a0 <__lo0bits+0x4e>
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	d006      	beq.n	80090ac <__lo0bits+0x5a>
 800909e:	3001      	adds	r0, #1
 80090a0:	600b      	str	r3, [r1, #0]
 80090a2:	4770      	bx	lr
 80090a4:	4610      	mov	r0, r2
 80090a6:	e7e9      	b.n	800907c <__lo0bits+0x2a>
 80090a8:	2000      	movs	r0, #0
 80090aa:	4770      	bx	lr
 80090ac:	2020      	movs	r0, #32
 80090ae:	4770      	bx	lr

080090b0 <__i2b>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	460c      	mov	r4, r1
 80090b4:	2101      	movs	r1, #1
 80090b6:	f7ff fee9 	bl	8008e8c <_Balloc>
 80090ba:	2201      	movs	r2, #1
 80090bc:	6144      	str	r4, [r0, #20]
 80090be:	6102      	str	r2, [r0, #16]
 80090c0:	bd10      	pop	{r4, pc}

080090c2 <__multiply>:
 80090c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	690a      	ldr	r2, [r1, #16]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	bfb8      	it	lt
 80090d0:	460b      	movlt	r3, r1
 80090d2:	4688      	mov	r8, r1
 80090d4:	bfbc      	itt	lt
 80090d6:	46a0      	movlt	r8, r4
 80090d8:	461c      	movlt	r4, r3
 80090da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090ea:	eb07 0609 	add.w	r6, r7, r9
 80090ee:	42b3      	cmp	r3, r6
 80090f0:	bfb8      	it	lt
 80090f2:	3101      	addlt	r1, #1
 80090f4:	f7ff feca 	bl	8008e8c <_Balloc>
 80090f8:	f100 0514 	add.w	r5, r0, #20
 80090fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009100:	462b      	mov	r3, r5
 8009102:	2200      	movs	r2, #0
 8009104:	4573      	cmp	r3, lr
 8009106:	d316      	bcc.n	8009136 <__multiply+0x74>
 8009108:	f104 0214 	add.w	r2, r4, #20
 800910c:	f108 0114 	add.w	r1, r8, #20
 8009110:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009114:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	9201      	str	r2, [sp, #4]
 800911e:	4293      	cmp	r3, r2
 8009120:	d80c      	bhi.n	800913c <__multiply+0x7a>
 8009122:	2e00      	cmp	r6, #0
 8009124:	dd03      	ble.n	800912e <__multiply+0x6c>
 8009126:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800912a:	2b00      	cmp	r3, #0
 800912c:	d05d      	beq.n	80091ea <__multiply+0x128>
 800912e:	6106      	str	r6, [r0, #16]
 8009130:	b003      	add	sp, #12
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	f843 2b04 	str.w	r2, [r3], #4
 800913a:	e7e3      	b.n	8009104 <__multiply+0x42>
 800913c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009140:	f1bb 0f00 	cmp.w	fp, #0
 8009144:	d023      	beq.n	800918e <__multiply+0xcc>
 8009146:	4689      	mov	r9, r1
 8009148:	46ac      	mov	ip, r5
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009152:	f8dc a000 	ldr.w	sl, [ip]
 8009156:	b2a3      	uxth	r3, r4
 8009158:	fa1f fa8a 	uxth.w	sl, sl
 800915c:	fb0b a303 	mla	r3, fp, r3, sl
 8009160:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009164:	f8dc 4000 	ldr.w	r4, [ip]
 8009168:	4443      	add	r3, r8
 800916a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800916e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009172:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009176:	46e2      	mov	sl, ip
 8009178:	b29b      	uxth	r3, r3
 800917a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800917e:	454f      	cmp	r7, r9
 8009180:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009184:	f84a 3b04 	str.w	r3, [sl], #4
 8009188:	d82b      	bhi.n	80091e2 <__multiply+0x120>
 800918a:	f8cc 8004 	str.w	r8, [ip, #4]
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009194:	3204      	adds	r2, #4
 8009196:	f1ba 0f00 	cmp.w	sl, #0
 800919a:	d020      	beq.n	80091de <__multiply+0x11c>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	4689      	mov	r9, r1
 80091a0:	46a8      	mov	r8, r5
 80091a2:	f04f 0b00 	mov.w	fp, #0
 80091a6:	f8b9 c000 	ldrh.w	ip, [r9]
 80091aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80091ae:	fb0a 440c 	mla	r4, sl, ip, r4
 80091b2:	445c      	add	r4, fp
 80091b4:	46c4      	mov	ip, r8
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091bc:	f84c 3b04 	str.w	r3, [ip], #4
 80091c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80091c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80091c8:	0c1b      	lsrs	r3, r3, #16
 80091ca:	fb0a b303 	mla	r3, sl, r3, fp
 80091ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80091d2:	454f      	cmp	r7, r9
 80091d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80091d8:	d805      	bhi.n	80091e6 <__multiply+0x124>
 80091da:	f8c8 3004 	str.w	r3, [r8, #4]
 80091de:	3504      	adds	r5, #4
 80091e0:	e79b      	b.n	800911a <__multiply+0x58>
 80091e2:	46d4      	mov	ip, sl
 80091e4:	e7b3      	b.n	800914e <__multiply+0x8c>
 80091e6:	46e0      	mov	r8, ip
 80091e8:	e7dd      	b.n	80091a6 <__multiply+0xe4>
 80091ea:	3e01      	subs	r6, #1
 80091ec:	e799      	b.n	8009122 <__multiply+0x60>
	...

080091f0 <__pow5mult>:
 80091f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	4615      	mov	r5, r2
 80091f6:	f012 0203 	ands.w	r2, r2, #3
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	d007      	beq.n	8009210 <__pow5mult+0x20>
 8009200:	3a01      	subs	r2, #1
 8009202:	4c21      	ldr	r4, [pc, #132]	; (8009288 <__pow5mult+0x98>)
 8009204:	2300      	movs	r3, #0
 8009206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920a:	f7ff fe8a 	bl	8008f22 <__multadd>
 800920e:	4607      	mov	r7, r0
 8009210:	10ad      	asrs	r5, r5, #2
 8009212:	d035      	beq.n	8009280 <__pow5mult+0x90>
 8009214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009216:	b93c      	cbnz	r4, 8009228 <__pow5mult+0x38>
 8009218:	2010      	movs	r0, #16
 800921a:	f7ff fe1d 	bl	8008e58 <malloc>
 800921e:	6270      	str	r0, [r6, #36]	; 0x24
 8009220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009224:	6004      	str	r4, [r0, #0]
 8009226:	60c4      	str	r4, [r0, #12]
 8009228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800922c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009230:	b94c      	cbnz	r4, 8009246 <__pow5mult+0x56>
 8009232:	f240 2171 	movw	r1, #625	; 0x271
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ff3a 	bl	80090b0 <__i2b>
 800923c:	2300      	movs	r3, #0
 800923e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009242:	4604      	mov	r4, r0
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	07eb      	lsls	r3, r5, #31
 800924c:	d50a      	bpl.n	8009264 <__pow5mult+0x74>
 800924e:	4639      	mov	r1, r7
 8009250:	4622      	mov	r2, r4
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff35 	bl	80090c2 <__multiply>
 8009258:	4639      	mov	r1, r7
 800925a:	4681      	mov	r9, r0
 800925c:	4630      	mov	r0, r6
 800925e:	f7ff fe49 	bl	8008ef4 <_Bfree>
 8009262:	464f      	mov	r7, r9
 8009264:	106d      	asrs	r5, r5, #1
 8009266:	d00b      	beq.n	8009280 <__pow5mult+0x90>
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	b938      	cbnz	r0, 800927c <__pow5mult+0x8c>
 800926c:	4622      	mov	r2, r4
 800926e:	4621      	mov	r1, r4
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff ff26 	bl	80090c2 <__multiply>
 8009276:	6020      	str	r0, [r4, #0]
 8009278:	f8c0 8000 	str.w	r8, [r0]
 800927c:	4604      	mov	r4, r0
 800927e:	e7e4      	b.n	800924a <__pow5mult+0x5a>
 8009280:	4638      	mov	r0, r7
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	bf00      	nop
 8009288:	0800a5c0 	.word	0x0800a5c0

0800928c <__lshift>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	6849      	ldr	r1, [r1, #4]
 800929a:	eb0a 0903 	add.w	r9, sl, r3
 800929e:	68a3      	ldr	r3, [r4, #8]
 80092a0:	4607      	mov	r7, r0
 80092a2:	4616      	mov	r6, r2
 80092a4:	f109 0501 	add.w	r5, r9, #1
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	db32      	blt.n	8009312 <__lshift+0x86>
 80092ac:	4638      	mov	r0, r7
 80092ae:	f7ff fded 	bl	8008e8c <_Balloc>
 80092b2:	2300      	movs	r3, #0
 80092b4:	4680      	mov	r8, r0
 80092b6:	f100 0114 	add.w	r1, r0, #20
 80092ba:	461a      	mov	r2, r3
 80092bc:	4553      	cmp	r3, sl
 80092be:	db2b      	blt.n	8009318 <__lshift+0x8c>
 80092c0:	6920      	ldr	r0, [r4, #16]
 80092c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092c6:	f104 0314 	add.w	r3, r4, #20
 80092ca:	f016 021f 	ands.w	r2, r6, #31
 80092ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092d6:	d025      	beq.n	8009324 <__lshift+0x98>
 80092d8:	f1c2 0e20 	rsb	lr, r2, #32
 80092dc:	2000      	movs	r0, #0
 80092de:	681e      	ldr	r6, [r3, #0]
 80092e0:	468a      	mov	sl, r1
 80092e2:	4096      	lsls	r6, r2
 80092e4:	4330      	orrs	r0, r6
 80092e6:	f84a 0b04 	str.w	r0, [sl], #4
 80092ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80092ee:	459c      	cmp	ip, r3
 80092f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80092f4:	d814      	bhi.n	8009320 <__lshift+0x94>
 80092f6:	6048      	str	r0, [r1, #4]
 80092f8:	b108      	cbz	r0, 80092fe <__lshift+0x72>
 80092fa:	f109 0502 	add.w	r5, r9, #2
 80092fe:	3d01      	subs	r5, #1
 8009300:	4638      	mov	r0, r7
 8009302:	f8c8 5010 	str.w	r5, [r8, #16]
 8009306:	4621      	mov	r1, r4
 8009308:	f7ff fdf4 	bl	8008ef4 <_Bfree>
 800930c:	4640      	mov	r0, r8
 800930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009312:	3101      	adds	r1, #1
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	e7c7      	b.n	80092a8 <__lshift+0x1c>
 8009318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800931c:	3301      	adds	r3, #1
 800931e:	e7cd      	b.n	80092bc <__lshift+0x30>
 8009320:	4651      	mov	r1, sl
 8009322:	e7dc      	b.n	80092de <__lshift+0x52>
 8009324:	3904      	subs	r1, #4
 8009326:	f853 2b04 	ldr.w	r2, [r3], #4
 800932a:	f841 2f04 	str.w	r2, [r1, #4]!
 800932e:	459c      	cmp	ip, r3
 8009330:	d8f9      	bhi.n	8009326 <__lshift+0x9a>
 8009332:	e7e4      	b.n	80092fe <__lshift+0x72>

08009334 <__mcmp>:
 8009334:	6903      	ldr	r3, [r0, #16]
 8009336:	690a      	ldr	r2, [r1, #16]
 8009338:	1a9b      	subs	r3, r3, r2
 800933a:	b530      	push	{r4, r5, lr}
 800933c:	d10c      	bne.n	8009358 <__mcmp+0x24>
 800933e:	0092      	lsls	r2, r2, #2
 8009340:	3014      	adds	r0, #20
 8009342:	3114      	adds	r1, #20
 8009344:	1884      	adds	r4, r0, r2
 8009346:	4411      	add	r1, r2
 8009348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800934c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009350:	4295      	cmp	r5, r2
 8009352:	d003      	beq.n	800935c <__mcmp+0x28>
 8009354:	d305      	bcc.n	8009362 <__mcmp+0x2e>
 8009356:	2301      	movs	r3, #1
 8009358:	4618      	mov	r0, r3
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	42a0      	cmp	r0, r4
 800935e:	d3f3      	bcc.n	8009348 <__mcmp+0x14>
 8009360:	e7fa      	b.n	8009358 <__mcmp+0x24>
 8009362:	f04f 33ff 	mov.w	r3, #4294967295
 8009366:	e7f7      	b.n	8009358 <__mcmp+0x24>

08009368 <__mdiff>:
 8009368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	460d      	mov	r5, r1
 800936e:	4607      	mov	r7, r0
 8009370:	4611      	mov	r1, r2
 8009372:	4628      	mov	r0, r5
 8009374:	4614      	mov	r4, r2
 8009376:	f7ff ffdd 	bl	8009334 <__mcmp>
 800937a:	1e06      	subs	r6, r0, #0
 800937c:	d108      	bne.n	8009390 <__mdiff+0x28>
 800937e:	4631      	mov	r1, r6
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff fd83 	bl	8008e8c <_Balloc>
 8009386:	2301      	movs	r3, #1
 8009388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800938c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009390:	bfa4      	itt	ge
 8009392:	4623      	movge	r3, r4
 8009394:	462c      	movge	r4, r5
 8009396:	4638      	mov	r0, r7
 8009398:	6861      	ldr	r1, [r4, #4]
 800939a:	bfa6      	itte	ge
 800939c:	461d      	movge	r5, r3
 800939e:	2600      	movge	r6, #0
 80093a0:	2601      	movlt	r6, #1
 80093a2:	f7ff fd73 	bl	8008e8c <_Balloc>
 80093a6:	692b      	ldr	r3, [r5, #16]
 80093a8:	60c6      	str	r6, [r0, #12]
 80093aa:	6926      	ldr	r6, [r4, #16]
 80093ac:	f105 0914 	add.w	r9, r5, #20
 80093b0:	f104 0214 	add.w	r2, r4, #20
 80093b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80093b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80093bc:	f100 0514 	add.w	r5, r0, #20
 80093c0:	f04f 0e00 	mov.w	lr, #0
 80093c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80093c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80093cc:	fa1e f18a 	uxtah	r1, lr, sl
 80093d0:	b2a3      	uxth	r3, r4
 80093d2:	1ac9      	subs	r1, r1, r3
 80093d4:	0c23      	lsrs	r3, r4, #16
 80093d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80093da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093de:	b289      	uxth	r1, r1
 80093e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80093e4:	45c8      	cmp	r8, r9
 80093e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093ea:	4694      	mov	ip, r2
 80093ec:	f845 3b04 	str.w	r3, [r5], #4
 80093f0:	d8e8      	bhi.n	80093c4 <__mdiff+0x5c>
 80093f2:	45bc      	cmp	ip, r7
 80093f4:	d304      	bcc.n	8009400 <__mdiff+0x98>
 80093f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80093fa:	b183      	cbz	r3, 800941e <__mdiff+0xb6>
 80093fc:	6106      	str	r6, [r0, #16]
 80093fe:	e7c5      	b.n	800938c <__mdiff+0x24>
 8009400:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009404:	fa1e f381 	uxtah	r3, lr, r1
 8009408:	141a      	asrs	r2, r3, #16
 800940a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800940e:	b29b      	uxth	r3, r3
 8009410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009414:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009418:	f845 3b04 	str.w	r3, [r5], #4
 800941c:	e7e9      	b.n	80093f2 <__mdiff+0x8a>
 800941e:	3e01      	subs	r6, #1
 8009420:	e7e9      	b.n	80093f6 <__mdiff+0x8e>
	...

08009424 <__ulp>:
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <__ulp+0x4c>)
 8009426:	ee10 2a90 	vmov	r2, s1
 800942a:	401a      	ands	r2, r3
 800942c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd04      	ble.n	800943e <__ulp+0x1a>
 8009434:	2000      	movs	r0, #0
 8009436:	4619      	mov	r1, r3
 8009438:	ec41 0b10 	vmov	d0, r0, r1
 800943c:	4770      	bx	lr
 800943e:	425b      	negs	r3, r3
 8009440:	151b      	asrs	r3, r3, #20
 8009442:	2b13      	cmp	r3, #19
 8009444:	f04f 0000 	mov.w	r0, #0
 8009448:	f04f 0100 	mov.w	r1, #0
 800944c:	dc04      	bgt.n	8009458 <__ulp+0x34>
 800944e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009452:	fa42 f103 	asr.w	r1, r2, r3
 8009456:	e7ef      	b.n	8009438 <__ulp+0x14>
 8009458:	3b14      	subs	r3, #20
 800945a:	2b1e      	cmp	r3, #30
 800945c:	f04f 0201 	mov.w	r2, #1
 8009460:	bfda      	itte	le
 8009462:	f1c3 031f 	rsble	r3, r3, #31
 8009466:	fa02 f303 	lslle.w	r3, r2, r3
 800946a:	4613      	movgt	r3, r2
 800946c:	4618      	mov	r0, r3
 800946e:	e7e3      	b.n	8009438 <__ulp+0x14>
 8009470:	7ff00000 	.word	0x7ff00000

08009474 <__b2d>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	6905      	ldr	r5, [r0, #16]
 8009478:	f100 0714 	add.w	r7, r0, #20
 800947c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009480:	1f2e      	subs	r6, r5, #4
 8009482:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009486:	4620      	mov	r0, r4
 8009488:	f7ff fdc4 	bl	8009014 <__hi0bits>
 800948c:	f1c0 0320 	rsb	r3, r0, #32
 8009490:	280a      	cmp	r0, #10
 8009492:	600b      	str	r3, [r1, #0]
 8009494:	f8df c074 	ldr.w	ip, [pc, #116]	; 800950c <__b2d+0x98>
 8009498:	dc14      	bgt.n	80094c4 <__b2d+0x50>
 800949a:	f1c0 0e0b 	rsb	lr, r0, #11
 800949e:	fa24 f10e 	lsr.w	r1, r4, lr
 80094a2:	42b7      	cmp	r7, r6
 80094a4:	ea41 030c 	orr.w	r3, r1, ip
 80094a8:	bf34      	ite	cc
 80094aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094ae:	2100      	movcs	r1, #0
 80094b0:	3015      	adds	r0, #21
 80094b2:	fa04 f000 	lsl.w	r0, r4, r0
 80094b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80094ba:	ea40 0201 	orr.w	r2, r0, r1
 80094be:	ec43 2b10 	vmov	d0, r2, r3
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c4:	42b7      	cmp	r7, r6
 80094c6:	bf3a      	itte	cc
 80094c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80094cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094d0:	2100      	movcs	r1, #0
 80094d2:	380b      	subs	r0, #11
 80094d4:	d015      	beq.n	8009502 <__b2d+0x8e>
 80094d6:	4084      	lsls	r4, r0
 80094d8:	f1c0 0520 	rsb	r5, r0, #32
 80094dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80094e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80094e4:	42be      	cmp	r6, r7
 80094e6:	fa21 fc05 	lsr.w	ip, r1, r5
 80094ea:	ea44 030c 	orr.w	r3, r4, ip
 80094ee:	bf8c      	ite	hi
 80094f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80094f4:	2400      	movls	r4, #0
 80094f6:	fa01 f000 	lsl.w	r0, r1, r0
 80094fa:	40ec      	lsrs	r4, r5
 80094fc:	ea40 0204 	orr.w	r2, r0, r4
 8009500:	e7dd      	b.n	80094be <__b2d+0x4a>
 8009502:	ea44 030c 	orr.w	r3, r4, ip
 8009506:	460a      	mov	r2, r1
 8009508:	e7d9      	b.n	80094be <__b2d+0x4a>
 800950a:	bf00      	nop
 800950c:	3ff00000 	.word	0x3ff00000

08009510 <__d2b>:
 8009510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009514:	460e      	mov	r6, r1
 8009516:	2101      	movs	r1, #1
 8009518:	ec59 8b10 	vmov	r8, r9, d0
 800951c:	4615      	mov	r5, r2
 800951e:	f7ff fcb5 	bl	8008e8c <_Balloc>
 8009522:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009526:	4607      	mov	r7, r0
 8009528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800952c:	bb34      	cbnz	r4, 800957c <__d2b+0x6c>
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	f1b8 0300 	subs.w	r3, r8, #0
 8009534:	d027      	beq.n	8009586 <__d2b+0x76>
 8009536:	a802      	add	r0, sp, #8
 8009538:	f840 3d08 	str.w	r3, [r0, #-8]!
 800953c:	f7ff fd89 	bl	8009052 <__lo0bits>
 8009540:	9900      	ldr	r1, [sp, #0]
 8009542:	b1f0      	cbz	r0, 8009582 <__d2b+0x72>
 8009544:	9a01      	ldr	r2, [sp, #4]
 8009546:	f1c0 0320 	rsb	r3, r0, #32
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	430b      	orrs	r3, r1
 8009550:	40c2      	lsrs	r2, r0
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	9201      	str	r2, [sp, #4]
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	bf14      	ite	ne
 800955e:	2102      	movne	r1, #2
 8009560:	2101      	moveq	r1, #1
 8009562:	6139      	str	r1, [r7, #16]
 8009564:	b1c4      	cbz	r4, 8009598 <__d2b+0x88>
 8009566:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800956a:	4404      	add	r4, r0
 800956c:	6034      	str	r4, [r6, #0]
 800956e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009572:	6028      	str	r0, [r5, #0]
 8009574:	4638      	mov	r0, r7
 8009576:	b003      	add	sp, #12
 8009578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800957c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009580:	e7d5      	b.n	800952e <__d2b+0x1e>
 8009582:	6179      	str	r1, [r7, #20]
 8009584:	e7e7      	b.n	8009556 <__d2b+0x46>
 8009586:	a801      	add	r0, sp, #4
 8009588:	f7ff fd63 	bl	8009052 <__lo0bits>
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	2101      	movs	r1, #1
 8009592:	6139      	str	r1, [r7, #16]
 8009594:	3020      	adds	r0, #32
 8009596:	e7e5      	b.n	8009564 <__d2b+0x54>
 8009598:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800959c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095a0:	6030      	str	r0, [r6, #0]
 80095a2:	6918      	ldr	r0, [r3, #16]
 80095a4:	f7ff fd36 	bl	8009014 <__hi0bits>
 80095a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095ac:	e7e1      	b.n	8009572 <__d2b+0x62>

080095ae <__ratio>:
 80095ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b2:	4688      	mov	r8, r1
 80095b4:	4669      	mov	r1, sp
 80095b6:	4681      	mov	r9, r0
 80095b8:	f7ff ff5c 	bl	8009474 <__b2d>
 80095bc:	a901      	add	r1, sp, #4
 80095be:	4640      	mov	r0, r8
 80095c0:	ec57 6b10 	vmov	r6, r7, d0
 80095c4:	f7ff ff56 	bl	8009474 <__b2d>
 80095c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80095d0:	eba3 0c02 	sub.w	ip, r3, r2
 80095d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095de:	ec5b ab10 	vmov	sl, fp, d0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfce      	itee	gt
 80095e6:	463a      	movgt	r2, r7
 80095e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095ec:	465a      	movle	r2, fp
 80095ee:	4659      	mov	r1, fp
 80095f0:	463d      	mov	r5, r7
 80095f2:	bfd4      	ite	le
 80095f4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80095f8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80095fc:	4630      	mov	r0, r6
 80095fe:	ee10 2a10 	vmov	r2, s0
 8009602:	460b      	mov	r3, r1
 8009604:	4629      	mov	r1, r5
 8009606:	f7f7 f929 	bl	800085c <__aeabi_ddiv>
 800960a:	ec41 0b10 	vmov	d0, r0, r1
 800960e:	b003      	add	sp, #12
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009614 <__copybits>:
 8009614:	3901      	subs	r1, #1
 8009616:	b510      	push	{r4, lr}
 8009618:	1149      	asrs	r1, r1, #5
 800961a:	6914      	ldr	r4, [r2, #16]
 800961c:	3101      	adds	r1, #1
 800961e:	f102 0314 	add.w	r3, r2, #20
 8009622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800962a:	42a3      	cmp	r3, r4
 800962c:	4602      	mov	r2, r0
 800962e:	d303      	bcc.n	8009638 <__copybits+0x24>
 8009630:	2300      	movs	r3, #0
 8009632:	428a      	cmp	r2, r1
 8009634:	d305      	bcc.n	8009642 <__copybits+0x2e>
 8009636:	bd10      	pop	{r4, pc}
 8009638:	f853 2b04 	ldr.w	r2, [r3], #4
 800963c:	f840 2b04 	str.w	r2, [r0], #4
 8009640:	e7f3      	b.n	800962a <__copybits+0x16>
 8009642:	f842 3b04 	str.w	r3, [r2], #4
 8009646:	e7f4      	b.n	8009632 <__copybits+0x1e>

08009648 <__any_on>:
 8009648:	f100 0214 	add.w	r2, r0, #20
 800964c:	6900      	ldr	r0, [r0, #16]
 800964e:	114b      	asrs	r3, r1, #5
 8009650:	4298      	cmp	r0, r3
 8009652:	b510      	push	{r4, lr}
 8009654:	db11      	blt.n	800967a <__any_on+0x32>
 8009656:	dd0a      	ble.n	800966e <__any_on+0x26>
 8009658:	f011 011f 	ands.w	r1, r1, #31
 800965c:	d007      	beq.n	800966e <__any_on+0x26>
 800965e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009662:	fa24 f001 	lsr.w	r0, r4, r1
 8009666:	fa00 f101 	lsl.w	r1, r0, r1
 800966a:	428c      	cmp	r4, r1
 800966c:	d10b      	bne.n	8009686 <__any_on+0x3e>
 800966e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009672:	4293      	cmp	r3, r2
 8009674:	d803      	bhi.n	800967e <__any_on+0x36>
 8009676:	2000      	movs	r0, #0
 8009678:	bd10      	pop	{r4, pc}
 800967a:	4603      	mov	r3, r0
 800967c:	e7f7      	b.n	800966e <__any_on+0x26>
 800967e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009682:	2900      	cmp	r1, #0
 8009684:	d0f5      	beq.n	8009672 <__any_on+0x2a>
 8009686:	2001      	movs	r0, #1
 8009688:	e7f6      	b.n	8009678 <__any_on+0x30>

0800968a <_calloc_r>:
 800968a:	b538      	push	{r3, r4, r5, lr}
 800968c:	fb02 f401 	mul.w	r4, r2, r1
 8009690:	4621      	mov	r1, r4
 8009692:	f000 f857 	bl	8009744 <_malloc_r>
 8009696:	4605      	mov	r5, r0
 8009698:	b118      	cbz	r0, 80096a2 <_calloc_r+0x18>
 800969a:	4622      	mov	r2, r4
 800969c:	2100      	movs	r1, #0
 800969e:	f7fc fc1c 	bl	8005eda <memset>
 80096a2:	4628      	mov	r0, r5
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080096a8 <_free_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4605      	mov	r5, r0
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d045      	beq.n	800973c <_free_r+0x94>
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f0c      	subs	r4, r1, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfb8      	it	lt
 80096ba:	18e4      	addlt	r4, r4, r3
 80096bc:	f000 fdc3 	bl	800a246 <__malloc_lock>
 80096c0:	4a1f      	ldr	r2, [pc, #124]	; (8009740 <_free_r+0x98>)
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	4610      	mov	r0, r2
 80096c6:	b933      	cbnz	r3, 80096d6 <_free_r+0x2e>
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	6014      	str	r4, [r2, #0]
 80096cc:	4628      	mov	r0, r5
 80096ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d2:	f000 bdb9 	b.w	800a248 <__malloc_unlock>
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	d90c      	bls.n	80096f4 <_free_r+0x4c>
 80096da:	6821      	ldr	r1, [r4, #0]
 80096dc:	1862      	adds	r2, r4, r1
 80096de:	4293      	cmp	r3, r2
 80096e0:	bf04      	itt	eq
 80096e2:	681a      	ldreq	r2, [r3, #0]
 80096e4:	685b      	ldreq	r3, [r3, #4]
 80096e6:	6063      	str	r3, [r4, #4]
 80096e8:	bf04      	itt	eq
 80096ea:	1852      	addeq	r2, r2, r1
 80096ec:	6022      	streq	r2, [r4, #0]
 80096ee:	6004      	str	r4, [r0, #0]
 80096f0:	e7ec      	b.n	80096cc <_free_r+0x24>
 80096f2:	4613      	mov	r3, r2
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	b10a      	cbz	r2, 80096fc <_free_r+0x54>
 80096f8:	42a2      	cmp	r2, r4
 80096fa:	d9fa      	bls.n	80096f2 <_free_r+0x4a>
 80096fc:	6819      	ldr	r1, [r3, #0]
 80096fe:	1858      	adds	r0, r3, r1
 8009700:	42a0      	cmp	r0, r4
 8009702:	d10b      	bne.n	800971c <_free_r+0x74>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	4401      	add	r1, r0
 8009708:	1858      	adds	r0, r3, r1
 800970a:	4282      	cmp	r2, r0
 800970c:	6019      	str	r1, [r3, #0]
 800970e:	d1dd      	bne.n	80096cc <_free_r+0x24>
 8009710:	6810      	ldr	r0, [r2, #0]
 8009712:	6852      	ldr	r2, [r2, #4]
 8009714:	605a      	str	r2, [r3, #4]
 8009716:	4401      	add	r1, r0
 8009718:	6019      	str	r1, [r3, #0]
 800971a:	e7d7      	b.n	80096cc <_free_r+0x24>
 800971c:	d902      	bls.n	8009724 <_free_r+0x7c>
 800971e:	230c      	movs	r3, #12
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	e7d3      	b.n	80096cc <_free_r+0x24>
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	1821      	adds	r1, r4, r0
 8009728:	428a      	cmp	r2, r1
 800972a:	bf04      	itt	eq
 800972c:	6811      	ldreq	r1, [r2, #0]
 800972e:	6852      	ldreq	r2, [r2, #4]
 8009730:	6062      	str	r2, [r4, #4]
 8009732:	bf04      	itt	eq
 8009734:	1809      	addeq	r1, r1, r0
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	605c      	str	r4, [r3, #4]
 800973a:	e7c7      	b.n	80096cc <_free_r+0x24>
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	20000258 	.word	0x20000258

08009744 <_malloc_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	1ccd      	adds	r5, r1, #3
 8009748:	f025 0503 	bic.w	r5, r5, #3
 800974c:	3508      	adds	r5, #8
 800974e:	2d0c      	cmp	r5, #12
 8009750:	bf38      	it	cc
 8009752:	250c      	movcc	r5, #12
 8009754:	2d00      	cmp	r5, #0
 8009756:	4606      	mov	r6, r0
 8009758:	db01      	blt.n	800975e <_malloc_r+0x1a>
 800975a:	42a9      	cmp	r1, r5
 800975c:	d903      	bls.n	8009766 <_malloc_r+0x22>
 800975e:	230c      	movs	r3, #12
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	2000      	movs	r0, #0
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	f000 fd6e 	bl	800a246 <__malloc_lock>
 800976a:	4a21      	ldr	r2, [pc, #132]	; (80097f0 <_malloc_r+0xac>)
 800976c:	6814      	ldr	r4, [r2, #0]
 800976e:	4621      	mov	r1, r4
 8009770:	b991      	cbnz	r1, 8009798 <_malloc_r+0x54>
 8009772:	4c20      	ldr	r4, [pc, #128]	; (80097f4 <_malloc_r+0xb0>)
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	b91b      	cbnz	r3, 8009780 <_malloc_r+0x3c>
 8009778:	4630      	mov	r0, r6
 800977a:	f000 facf 	bl	8009d1c <_sbrk_r>
 800977e:	6020      	str	r0, [r4, #0]
 8009780:	4629      	mov	r1, r5
 8009782:	4630      	mov	r0, r6
 8009784:	f000 faca 	bl	8009d1c <_sbrk_r>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d124      	bne.n	80097d6 <_malloc_r+0x92>
 800978c:	230c      	movs	r3, #12
 800978e:	6033      	str	r3, [r6, #0]
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fd59 	bl	800a248 <__malloc_unlock>
 8009796:	e7e4      	b.n	8009762 <_malloc_r+0x1e>
 8009798:	680b      	ldr	r3, [r1, #0]
 800979a:	1b5b      	subs	r3, r3, r5
 800979c:	d418      	bmi.n	80097d0 <_malloc_r+0x8c>
 800979e:	2b0b      	cmp	r3, #11
 80097a0:	d90f      	bls.n	80097c2 <_malloc_r+0x7e>
 80097a2:	600b      	str	r3, [r1, #0]
 80097a4:	50cd      	str	r5, [r1, r3]
 80097a6:	18cc      	adds	r4, r1, r3
 80097a8:	4630      	mov	r0, r6
 80097aa:	f000 fd4d 	bl	800a248 <__malloc_unlock>
 80097ae:	f104 000b 	add.w	r0, r4, #11
 80097b2:	1d23      	adds	r3, r4, #4
 80097b4:	f020 0007 	bic.w	r0, r0, #7
 80097b8:	1ac3      	subs	r3, r0, r3
 80097ba:	d0d3      	beq.n	8009764 <_malloc_r+0x20>
 80097bc:	425a      	negs	r2, r3
 80097be:	50e2      	str	r2, [r4, r3]
 80097c0:	e7d0      	b.n	8009764 <_malloc_r+0x20>
 80097c2:	428c      	cmp	r4, r1
 80097c4:	684b      	ldr	r3, [r1, #4]
 80097c6:	bf16      	itet	ne
 80097c8:	6063      	strne	r3, [r4, #4]
 80097ca:	6013      	streq	r3, [r2, #0]
 80097cc:	460c      	movne	r4, r1
 80097ce:	e7eb      	b.n	80097a8 <_malloc_r+0x64>
 80097d0:	460c      	mov	r4, r1
 80097d2:	6849      	ldr	r1, [r1, #4]
 80097d4:	e7cc      	b.n	8009770 <_malloc_r+0x2c>
 80097d6:	1cc4      	adds	r4, r0, #3
 80097d8:	f024 0403 	bic.w	r4, r4, #3
 80097dc:	42a0      	cmp	r0, r4
 80097de:	d005      	beq.n	80097ec <_malloc_r+0xa8>
 80097e0:	1a21      	subs	r1, r4, r0
 80097e2:	4630      	mov	r0, r6
 80097e4:	f000 fa9a 	bl	8009d1c <_sbrk_r>
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0cf      	beq.n	800978c <_malloc_r+0x48>
 80097ec:	6025      	str	r5, [r4, #0]
 80097ee:	e7db      	b.n	80097a8 <_malloc_r+0x64>
 80097f0:	20000258 	.word	0x20000258
 80097f4:	2000025c 	.word	0x2000025c

080097f8 <__ssputs_r>:
 80097f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	688e      	ldr	r6, [r1, #8]
 80097fe:	429e      	cmp	r6, r3
 8009800:	4682      	mov	sl, r0
 8009802:	460c      	mov	r4, r1
 8009804:	4690      	mov	r8, r2
 8009806:	4699      	mov	r9, r3
 8009808:	d837      	bhi.n	800987a <__ssputs_r+0x82>
 800980a:	898a      	ldrh	r2, [r1, #12]
 800980c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009810:	d031      	beq.n	8009876 <__ssputs_r+0x7e>
 8009812:	6825      	ldr	r5, [r4, #0]
 8009814:	6909      	ldr	r1, [r1, #16]
 8009816:	1a6f      	subs	r7, r5, r1
 8009818:	6965      	ldr	r5, [r4, #20]
 800981a:	2302      	movs	r3, #2
 800981c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009820:	fb95 f5f3 	sdiv	r5, r5, r3
 8009824:	f109 0301 	add.w	r3, r9, #1
 8009828:	443b      	add	r3, r7
 800982a:	429d      	cmp	r5, r3
 800982c:	bf38      	it	cc
 800982e:	461d      	movcc	r5, r3
 8009830:	0553      	lsls	r3, r2, #21
 8009832:	d530      	bpl.n	8009896 <__ssputs_r+0x9e>
 8009834:	4629      	mov	r1, r5
 8009836:	f7ff ff85 	bl	8009744 <_malloc_r>
 800983a:	4606      	mov	r6, r0
 800983c:	b950      	cbnz	r0, 8009854 <__ssputs_r+0x5c>
 800983e:	230c      	movs	r3, #12
 8009840:	f8ca 3000 	str.w	r3, [sl]
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009854:	463a      	mov	r2, r7
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	f7fc fb34 	bl	8005ec4 <memcpy>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	6126      	str	r6, [r4, #16]
 800986a:	6165      	str	r5, [r4, #20]
 800986c:	443e      	add	r6, r7
 800986e:	1bed      	subs	r5, r5, r7
 8009870:	6026      	str	r6, [r4, #0]
 8009872:	60a5      	str	r5, [r4, #8]
 8009874:	464e      	mov	r6, r9
 8009876:	454e      	cmp	r6, r9
 8009878:	d900      	bls.n	800987c <__ssputs_r+0x84>
 800987a:	464e      	mov	r6, r9
 800987c:	4632      	mov	r2, r6
 800987e:	4641      	mov	r1, r8
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	f000 fcc7 	bl	800a214 <memmove>
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	1b9b      	subs	r3, r3, r6
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	441e      	add	r6, r3
 8009890:	6026      	str	r6, [r4, #0]
 8009892:	2000      	movs	r0, #0
 8009894:	e7dc      	b.n	8009850 <__ssputs_r+0x58>
 8009896:	462a      	mov	r2, r5
 8009898:	f000 fcd7 	bl	800a24a <_realloc_r>
 800989c:	4606      	mov	r6, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	d1e2      	bne.n	8009868 <__ssputs_r+0x70>
 80098a2:	6921      	ldr	r1, [r4, #16]
 80098a4:	4650      	mov	r0, sl
 80098a6:	f7ff feff 	bl	80096a8 <_free_r>
 80098aa:	e7c8      	b.n	800983e <__ssputs_r+0x46>

080098ac <_svfiprintf_r>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	461d      	mov	r5, r3
 80098b2:	898b      	ldrh	r3, [r1, #12]
 80098b4:	061f      	lsls	r7, r3, #24
 80098b6:	b09d      	sub	sp, #116	; 0x74
 80098b8:	4680      	mov	r8, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	4616      	mov	r6, r2
 80098be:	d50f      	bpl.n	80098e0 <_svfiprintf_r+0x34>
 80098c0:	690b      	ldr	r3, [r1, #16]
 80098c2:	b96b      	cbnz	r3, 80098e0 <_svfiprintf_r+0x34>
 80098c4:	2140      	movs	r1, #64	; 0x40
 80098c6:	f7ff ff3d 	bl	8009744 <_malloc_r>
 80098ca:	6020      	str	r0, [r4, #0]
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	b928      	cbnz	r0, 80098dc <_svfiprintf_r+0x30>
 80098d0:	230c      	movs	r3, #12
 80098d2:	f8c8 3000 	str.w	r3, [r8]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	e0c8      	b.n	8009a6e <_svfiprintf_r+0x1c2>
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	6163      	str	r3, [r4, #20]
 80098e0:	2300      	movs	r3, #0
 80098e2:	9309      	str	r3, [sp, #36]	; 0x24
 80098e4:	2320      	movs	r3, #32
 80098e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ea:	2330      	movs	r3, #48	; 0x30
 80098ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f0:	9503      	str	r5, [sp, #12]
 80098f2:	f04f 0b01 	mov.w	fp, #1
 80098f6:	4637      	mov	r7, r6
 80098f8:	463d      	mov	r5, r7
 80098fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80098fe:	b10b      	cbz	r3, 8009904 <_svfiprintf_r+0x58>
 8009900:	2b25      	cmp	r3, #37	; 0x25
 8009902:	d13e      	bne.n	8009982 <_svfiprintf_r+0xd6>
 8009904:	ebb7 0a06 	subs.w	sl, r7, r6
 8009908:	d00b      	beq.n	8009922 <_svfiprintf_r+0x76>
 800990a:	4653      	mov	r3, sl
 800990c:	4632      	mov	r2, r6
 800990e:	4621      	mov	r1, r4
 8009910:	4640      	mov	r0, r8
 8009912:	f7ff ff71 	bl	80097f8 <__ssputs_r>
 8009916:	3001      	adds	r0, #1
 8009918:	f000 80a4 	beq.w	8009a64 <_svfiprintf_r+0x1b8>
 800991c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991e:	4453      	add	r3, sl
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	783b      	ldrb	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 809d 	beq.w	8009a64 <_svfiprintf_r+0x1b8>
 800992a:	2300      	movs	r3, #0
 800992c:	f04f 32ff 	mov.w	r2, #4294967295
 8009930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993c:	931a      	str	r3, [sp, #104]	; 0x68
 800993e:	462f      	mov	r7, r5
 8009940:	2205      	movs	r2, #5
 8009942:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009946:	4850      	ldr	r0, [pc, #320]	; (8009a88 <_svfiprintf_r+0x1dc>)
 8009948:	f7f6 fc52 	bl	80001f0 <memchr>
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	b9d0      	cbnz	r0, 8009986 <_svfiprintf_r+0xda>
 8009950:	06d9      	lsls	r1, r3, #27
 8009952:	bf44      	itt	mi
 8009954:	2220      	movmi	r2, #32
 8009956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800995a:	071a      	lsls	r2, r3, #28
 800995c:	bf44      	itt	mi
 800995e:	222b      	movmi	r2, #43	; 0x2b
 8009960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009964:	782a      	ldrb	r2, [r5, #0]
 8009966:	2a2a      	cmp	r2, #42	; 0x2a
 8009968:	d015      	beq.n	8009996 <_svfiprintf_r+0xea>
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	462f      	mov	r7, r5
 800996e:	2000      	movs	r0, #0
 8009970:	250a      	movs	r5, #10
 8009972:	4639      	mov	r1, r7
 8009974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009978:	3b30      	subs	r3, #48	; 0x30
 800997a:	2b09      	cmp	r3, #9
 800997c:	d94d      	bls.n	8009a1a <_svfiprintf_r+0x16e>
 800997e:	b1b8      	cbz	r0, 80099b0 <_svfiprintf_r+0x104>
 8009980:	e00f      	b.n	80099a2 <_svfiprintf_r+0xf6>
 8009982:	462f      	mov	r7, r5
 8009984:	e7b8      	b.n	80098f8 <_svfiprintf_r+0x4c>
 8009986:	4a40      	ldr	r2, [pc, #256]	; (8009a88 <_svfiprintf_r+0x1dc>)
 8009988:	1a80      	subs	r0, r0, r2
 800998a:	fa0b f000 	lsl.w	r0, fp, r0
 800998e:	4318      	orrs	r0, r3
 8009990:	9004      	str	r0, [sp, #16]
 8009992:	463d      	mov	r5, r7
 8009994:	e7d3      	b.n	800993e <_svfiprintf_r+0x92>
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	1d11      	adds	r1, r2, #4
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	9103      	str	r1, [sp, #12]
 800999e:	2a00      	cmp	r2, #0
 80099a0:	db01      	blt.n	80099a6 <_svfiprintf_r+0xfa>
 80099a2:	9207      	str	r2, [sp, #28]
 80099a4:	e004      	b.n	80099b0 <_svfiprintf_r+0x104>
 80099a6:	4252      	negs	r2, r2
 80099a8:	f043 0302 	orr.w	r3, r3, #2
 80099ac:	9207      	str	r2, [sp, #28]
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	783b      	ldrb	r3, [r7, #0]
 80099b2:	2b2e      	cmp	r3, #46	; 0x2e
 80099b4:	d10c      	bne.n	80099d0 <_svfiprintf_r+0x124>
 80099b6:	787b      	ldrb	r3, [r7, #1]
 80099b8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ba:	d133      	bne.n	8009a24 <_svfiprintf_r+0x178>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	1d1a      	adds	r2, r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9203      	str	r2, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bfb8      	it	lt
 80099c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099cc:	3702      	adds	r7, #2
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	4d2e      	ldr	r5, [pc, #184]	; (8009a8c <_svfiprintf_r+0x1e0>)
 80099d2:	7839      	ldrb	r1, [r7, #0]
 80099d4:	2203      	movs	r2, #3
 80099d6:	4628      	mov	r0, r5
 80099d8:	f7f6 fc0a 	bl	80001f0 <memchr>
 80099dc:	b138      	cbz	r0, 80099ee <_svfiprintf_r+0x142>
 80099de:	2340      	movs	r3, #64	; 0x40
 80099e0:	1b40      	subs	r0, r0, r5
 80099e2:	fa03 f000 	lsl.w	r0, r3, r0
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	4303      	orrs	r3, r0
 80099ea:	3701      	adds	r7, #1
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	7839      	ldrb	r1, [r7, #0]
 80099f0:	4827      	ldr	r0, [pc, #156]	; (8009a90 <_svfiprintf_r+0x1e4>)
 80099f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099f6:	2206      	movs	r2, #6
 80099f8:	1c7e      	adds	r6, r7, #1
 80099fa:	f7f6 fbf9 	bl	80001f0 <memchr>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d038      	beq.n	8009a74 <_svfiprintf_r+0x1c8>
 8009a02:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <_svfiprintf_r+0x1e8>)
 8009a04:	bb13      	cbnz	r3, 8009a4c <_svfiprintf_r+0x1a0>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	3307      	adds	r3, #7
 8009a0a:	f023 0307 	bic.w	r3, r3, #7
 8009a0e:	3308      	adds	r3, #8
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	444b      	add	r3, r9
 8009a16:	9309      	str	r3, [sp, #36]	; 0x24
 8009a18:	e76d      	b.n	80098f6 <_svfiprintf_r+0x4a>
 8009a1a:	fb05 3202 	mla	r2, r5, r2, r3
 8009a1e:	2001      	movs	r0, #1
 8009a20:	460f      	mov	r7, r1
 8009a22:	e7a6      	b.n	8009972 <_svfiprintf_r+0xc6>
 8009a24:	2300      	movs	r3, #0
 8009a26:	3701      	adds	r7, #1
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	250a      	movs	r5, #10
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a34:	3a30      	subs	r2, #48	; 0x30
 8009a36:	2a09      	cmp	r2, #9
 8009a38:	d903      	bls.n	8009a42 <_svfiprintf_r+0x196>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0c8      	beq.n	80099d0 <_svfiprintf_r+0x124>
 8009a3e:	9105      	str	r1, [sp, #20]
 8009a40:	e7c6      	b.n	80099d0 <_svfiprintf_r+0x124>
 8009a42:	fb05 2101 	mla	r1, r5, r1, r2
 8009a46:	2301      	movs	r3, #1
 8009a48:	4607      	mov	r7, r0
 8009a4a:	e7f0      	b.n	8009a2e <_svfiprintf_r+0x182>
 8009a4c:	ab03      	add	r3, sp, #12
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4622      	mov	r2, r4
 8009a52:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <_svfiprintf_r+0x1ec>)
 8009a54:	a904      	add	r1, sp, #16
 8009a56:	4640      	mov	r0, r8
 8009a58:	f7fc fadc 	bl	8006014 <_printf_float>
 8009a5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a60:	4681      	mov	r9, r0
 8009a62:	d1d6      	bne.n	8009a12 <_svfiprintf_r+0x166>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	065b      	lsls	r3, r3, #25
 8009a68:	f53f af35 	bmi.w	80098d6 <_svfiprintf_r+0x2a>
 8009a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a6e:	b01d      	add	sp, #116	; 0x74
 8009a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <_svfiprintf_r+0x1ec>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4640      	mov	r0, r8
 8009a80:	f7fc fd7e 	bl	8006580 <_printf_i>
 8009a84:	e7ea      	b.n	8009a5c <_svfiprintf_r+0x1b0>
 8009a86:	bf00      	nop
 8009a88:	0800a5cc 	.word	0x0800a5cc
 8009a8c:	0800a5d2 	.word	0x0800a5d2
 8009a90:	0800a5d6 	.word	0x0800a5d6
 8009a94:	08006015 	.word	0x08006015
 8009a98:	080097f9 	.word	0x080097f9

08009a9c <__sfputc_r>:
 8009a9c:	6893      	ldr	r3, [r2, #8]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	b410      	push	{r4}
 8009aa4:	6093      	str	r3, [r2, #8]
 8009aa6:	da08      	bge.n	8009aba <__sfputc_r+0x1e>
 8009aa8:	6994      	ldr	r4, [r2, #24]
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	db01      	blt.n	8009ab2 <__sfputc_r+0x16>
 8009aae:	290a      	cmp	r1, #10
 8009ab0:	d103      	bne.n	8009aba <__sfputc_r+0x1e>
 8009ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab6:	f000 b997 	b.w	8009de8 <__swbuf_r>
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	1c58      	adds	r0, r3, #1
 8009abe:	6010      	str	r0, [r2, #0]
 8009ac0:	7019      	strb	r1, [r3, #0]
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <__sfputs_r>:
 8009aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009acc:	4606      	mov	r6, r0
 8009ace:	460f      	mov	r7, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	18d5      	adds	r5, r2, r3
 8009ad4:	42ac      	cmp	r4, r5
 8009ad6:	d101      	bne.n	8009adc <__sfputs_r+0x12>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e007      	b.n	8009aec <__sfputs_r+0x22>
 8009adc:	463a      	mov	r2, r7
 8009ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ffda 	bl	8009a9c <__sfputc_r>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d1f3      	bne.n	8009ad4 <__sfputs_r+0xa>
 8009aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009af0 <_vfiprintf_r>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	b09d      	sub	sp, #116	; 0x74
 8009af8:	4617      	mov	r7, r2
 8009afa:	461d      	mov	r5, r3
 8009afc:	4606      	mov	r6, r0
 8009afe:	b118      	cbz	r0, 8009b08 <_vfiprintf_r+0x18>
 8009b00:	6983      	ldr	r3, [r0, #24]
 8009b02:	b90b      	cbnz	r3, 8009b08 <_vfiprintf_r+0x18>
 8009b04:	f7fe fde4 	bl	80086d0 <__sinit>
 8009b08:	4b7c      	ldr	r3, [pc, #496]	; (8009cfc <_vfiprintf_r+0x20c>)
 8009b0a:	429c      	cmp	r4, r3
 8009b0c:	d158      	bne.n	8009bc0 <_vfiprintf_r+0xd0>
 8009b0e:	6874      	ldr	r4, [r6, #4]
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	0718      	lsls	r0, r3, #28
 8009b14:	d55e      	bpl.n	8009bd4 <_vfiprintf_r+0xe4>
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d05b      	beq.n	8009bd4 <_vfiprintf_r+0xe4>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b20:	2320      	movs	r3, #32
 8009b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b26:	2330      	movs	r3, #48	; 0x30
 8009b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2c:	9503      	str	r5, [sp, #12]
 8009b2e:	f04f 0b01 	mov.w	fp, #1
 8009b32:	46b8      	mov	r8, r7
 8009b34:	4645      	mov	r5, r8
 8009b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b3a:	b10b      	cbz	r3, 8009b40 <_vfiprintf_r+0x50>
 8009b3c:	2b25      	cmp	r3, #37	; 0x25
 8009b3e:	d154      	bne.n	8009bea <_vfiprintf_r+0xfa>
 8009b40:	ebb8 0a07 	subs.w	sl, r8, r7
 8009b44:	d00b      	beq.n	8009b5e <_vfiprintf_r+0x6e>
 8009b46:	4653      	mov	r3, sl
 8009b48:	463a      	mov	r2, r7
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff ffbc 	bl	8009aca <__sfputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80c2 	beq.w	8009cdc <_vfiprintf_r+0x1ec>
 8009b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5a:	4453      	add	r3, sl
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5e:	f898 3000 	ldrb.w	r3, [r8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80ba 	beq.w	8009cdc <_vfiprintf_r+0x1ec>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b7c:	46a8      	mov	r8, r5
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009b84:	485e      	ldr	r0, [pc, #376]	; (8009d00 <_vfiprintf_r+0x210>)
 8009b86:	f7f6 fb33 	bl	80001f0 <memchr>
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	bb78      	cbnz	r0, 8009bee <_vfiprintf_r+0xfe>
 8009b8e:	06d9      	lsls	r1, r3, #27
 8009b90:	bf44      	itt	mi
 8009b92:	2220      	movmi	r2, #32
 8009b94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b98:	071a      	lsls	r2, r3, #28
 8009b9a:	bf44      	itt	mi
 8009b9c:	222b      	movmi	r2, #43	; 0x2b
 8009b9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ba2:	782a      	ldrb	r2, [r5, #0]
 8009ba4:	2a2a      	cmp	r2, #42	; 0x2a
 8009ba6:	d02a      	beq.n	8009bfe <_vfiprintf_r+0x10e>
 8009ba8:	9a07      	ldr	r2, [sp, #28]
 8009baa:	46a8      	mov	r8, r5
 8009bac:	2000      	movs	r0, #0
 8009bae:	250a      	movs	r5, #10
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bb6:	3b30      	subs	r3, #48	; 0x30
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d969      	bls.n	8009c90 <_vfiprintf_r+0x1a0>
 8009bbc:	b360      	cbz	r0, 8009c18 <_vfiprintf_r+0x128>
 8009bbe:	e024      	b.n	8009c0a <_vfiprintf_r+0x11a>
 8009bc0:	4b50      	ldr	r3, [pc, #320]	; (8009d04 <_vfiprintf_r+0x214>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d101      	bne.n	8009bca <_vfiprintf_r+0xda>
 8009bc6:	68b4      	ldr	r4, [r6, #8]
 8009bc8:	e7a2      	b.n	8009b10 <_vfiprintf_r+0x20>
 8009bca:	4b4f      	ldr	r3, [pc, #316]	; (8009d08 <_vfiprintf_r+0x218>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	bf08      	it	eq
 8009bd0:	68f4      	ldreq	r4, [r6, #12]
 8009bd2:	e79d      	b.n	8009b10 <_vfiprintf_r+0x20>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f000 f978 	bl	8009ecc <__swsetup_r>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d09d      	beq.n	8009b1c <_vfiprintf_r+0x2c>
 8009be0:	f04f 30ff 	mov.w	r0, #4294967295
 8009be4:	b01d      	add	sp, #116	; 0x74
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	46a8      	mov	r8, r5
 8009bec:	e7a2      	b.n	8009b34 <_vfiprintf_r+0x44>
 8009bee:	4a44      	ldr	r2, [pc, #272]	; (8009d00 <_vfiprintf_r+0x210>)
 8009bf0:	1a80      	subs	r0, r0, r2
 8009bf2:	fa0b f000 	lsl.w	r0, fp, r0
 8009bf6:	4318      	orrs	r0, r3
 8009bf8:	9004      	str	r0, [sp, #16]
 8009bfa:	4645      	mov	r5, r8
 8009bfc:	e7be      	b.n	8009b7c <_vfiprintf_r+0x8c>
 8009bfe:	9a03      	ldr	r2, [sp, #12]
 8009c00:	1d11      	adds	r1, r2, #4
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	9103      	str	r1, [sp, #12]
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	db01      	blt.n	8009c0e <_vfiprintf_r+0x11e>
 8009c0a:	9207      	str	r2, [sp, #28]
 8009c0c:	e004      	b.n	8009c18 <_vfiprintf_r+0x128>
 8009c0e:	4252      	negs	r2, r2
 8009c10:	f043 0302 	orr.w	r3, r3, #2
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	f898 3000 	ldrb.w	r3, [r8]
 8009c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c1e:	d10e      	bne.n	8009c3e <_vfiprintf_r+0x14e>
 8009c20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d138      	bne.n	8009c9a <_vfiprintf_r+0x1aa>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9203      	str	r2, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfb8      	it	lt
 8009c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c38:	f108 0802 	add.w	r8, r8, #2
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	4d33      	ldr	r5, [pc, #204]	; (8009d0c <_vfiprintf_r+0x21c>)
 8009c40:	f898 1000 	ldrb.w	r1, [r8]
 8009c44:	2203      	movs	r2, #3
 8009c46:	4628      	mov	r0, r5
 8009c48:	f7f6 fad2 	bl	80001f0 <memchr>
 8009c4c:	b140      	cbz	r0, 8009c60 <_vfiprintf_r+0x170>
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	1b40      	subs	r0, r0, r5
 8009c52:	fa03 f000 	lsl.w	r0, r3, r0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	4303      	orrs	r3, r0
 8009c5a:	f108 0801 	add.w	r8, r8, #1
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	f898 1000 	ldrb.w	r1, [r8]
 8009c64:	482a      	ldr	r0, [pc, #168]	; (8009d10 <_vfiprintf_r+0x220>)
 8009c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c6a:	2206      	movs	r2, #6
 8009c6c:	f108 0701 	add.w	r7, r8, #1
 8009c70:	f7f6 fabe 	bl	80001f0 <memchr>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d037      	beq.n	8009ce8 <_vfiprintf_r+0x1f8>
 8009c78:	4b26      	ldr	r3, [pc, #152]	; (8009d14 <_vfiprintf_r+0x224>)
 8009c7a:	bb1b      	cbnz	r3, 8009cc4 <_vfiprintf_r+0x1d4>
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	3307      	adds	r3, #7
 8009c80:	f023 0307 	bic.w	r3, r3, #7
 8009c84:	3308      	adds	r3, #8
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	444b      	add	r3, r9
 8009c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8e:	e750      	b.n	8009b32 <_vfiprintf_r+0x42>
 8009c90:	fb05 3202 	mla	r2, r5, r2, r3
 8009c94:	2001      	movs	r0, #1
 8009c96:	4688      	mov	r8, r1
 8009c98:	e78a      	b.n	8009bb0 <_vfiprintf_r+0xc0>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f108 0801 	add.w	r8, r8, #1
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	250a      	movs	r5, #10
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cac:	3a30      	subs	r2, #48	; 0x30
 8009cae:	2a09      	cmp	r2, #9
 8009cb0:	d903      	bls.n	8009cba <_vfiprintf_r+0x1ca>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c3      	beq.n	8009c3e <_vfiprintf_r+0x14e>
 8009cb6:	9105      	str	r1, [sp, #20]
 8009cb8:	e7c1      	b.n	8009c3e <_vfiprintf_r+0x14e>
 8009cba:	fb05 2101 	mla	r1, r5, r1, r2
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	e7f0      	b.n	8009ca6 <_vfiprintf_r+0x1b6>
 8009cc4:	ab03      	add	r3, sp, #12
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <_vfiprintf_r+0x228>)
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7fc f9a0 	bl	8006014 <_printf_float>
 8009cd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009cd8:	4681      	mov	r9, r0
 8009cda:	d1d5      	bne.n	8009c88 <_vfiprintf_r+0x198>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	065b      	lsls	r3, r3, #25
 8009ce0:	f53f af7e 	bmi.w	8009be0 <_vfiprintf_r+0xf0>
 8009ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce6:	e77d      	b.n	8009be4 <_vfiprintf_r+0xf4>
 8009ce8:	ab03      	add	r3, sp, #12
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4622      	mov	r2, r4
 8009cee:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <_vfiprintf_r+0x228>)
 8009cf0:	a904      	add	r1, sp, #16
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7fc fc44 	bl	8006580 <_printf_i>
 8009cf8:	e7ec      	b.n	8009cd4 <_vfiprintf_r+0x1e4>
 8009cfa:	bf00      	nop
 8009cfc:	0800a480 	.word	0x0800a480
 8009d00:	0800a5cc 	.word	0x0800a5cc
 8009d04:	0800a4a0 	.word	0x0800a4a0
 8009d08:	0800a460 	.word	0x0800a460
 8009d0c:	0800a5d2 	.word	0x0800a5d2
 8009d10:	0800a5d6 	.word	0x0800a5d6
 8009d14:	08006015 	.word	0x08006015
 8009d18:	08009acb 	.word	0x08009acb

08009d1c <_sbrk_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4c06      	ldr	r4, [pc, #24]	; (8009d38 <_sbrk_r+0x1c>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4605      	mov	r5, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	f7f8 fcc6 	bl	80026b8 <_sbrk>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_sbrk_r+0x1a>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_sbrk_r+0x1a>
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	20001704 	.word	0x20001704

08009d3c <__sread>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	460c      	mov	r4, r1
 8009d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d44:	f000 faa8 	bl	800a298 <_read_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	bfab      	itete	ge
 8009d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d50:	181b      	addge	r3, r3, r0
 8009d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d56:	bfac      	ite	ge
 8009d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d5a:	81a3      	strhlt	r3, [r4, #12]
 8009d5c:	bd10      	pop	{r4, pc}

08009d5e <__swrite>:
 8009d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d62:	461f      	mov	r7, r3
 8009d64:	898b      	ldrh	r3, [r1, #12]
 8009d66:	05db      	lsls	r3, r3, #23
 8009d68:	4605      	mov	r5, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	4616      	mov	r6, r2
 8009d6e:	d505      	bpl.n	8009d7c <__swrite+0x1e>
 8009d70:	2302      	movs	r3, #2
 8009d72:	2200      	movs	r2, #0
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	f000 f9d6 	bl	800a128 <_lseek_r>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	4632      	mov	r2, r6
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d92:	f000 b889 	b.w	8009ea8 <_write_r>

08009d96 <__sseek>:
 8009d96:	b510      	push	{r4, lr}
 8009d98:	460c      	mov	r4, r1
 8009d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9e:	f000 f9c3 	bl	800a128 <_lseek_r>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	bf15      	itete	ne
 8009da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009db2:	81a3      	strheq	r3, [r4, #12]
 8009db4:	bf18      	it	ne
 8009db6:	81a3      	strhne	r3, [r4, #12]
 8009db8:	bd10      	pop	{r4, pc}

08009dba <__sclose>:
 8009dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbe:	f000 b8f3 	b.w	8009fa8 <_close_r>

08009dc2 <strncmp>:
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	b16a      	cbz	r2, 8009de2 <strncmp+0x20>
 8009dc6:	3901      	subs	r1, #1
 8009dc8:	1884      	adds	r4, r0, r2
 8009dca:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d103      	bne.n	8009dde <strncmp+0x1c>
 8009dd6:	42a0      	cmp	r0, r4
 8009dd8:	d001      	beq.n	8009dde <strncmp+0x1c>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f5      	bne.n	8009dca <strncmp+0x8>
 8009dde:	1a98      	subs	r0, r3, r2
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	4610      	mov	r0, r2
 8009de4:	e7fc      	b.n	8009de0 <strncmp+0x1e>
	...

08009de8 <__swbuf_r>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	460e      	mov	r6, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	4605      	mov	r5, r0
 8009df0:	b118      	cbz	r0, 8009dfa <__swbuf_r+0x12>
 8009df2:	6983      	ldr	r3, [r0, #24]
 8009df4:	b90b      	cbnz	r3, 8009dfa <__swbuf_r+0x12>
 8009df6:	f7fe fc6b 	bl	80086d0 <__sinit>
 8009dfa:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <__swbuf_r+0x98>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d12a      	bne.n	8009e56 <__swbuf_r+0x6e>
 8009e00:	686c      	ldr	r4, [r5, #4]
 8009e02:	69a3      	ldr	r3, [r4, #24]
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	071a      	lsls	r2, r3, #28
 8009e0a:	d52e      	bpl.n	8009e6a <__swbuf_r+0x82>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	b363      	cbz	r3, 8009e6a <__swbuf_r+0x82>
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	6820      	ldr	r0, [r4, #0]
 8009e14:	1ac0      	subs	r0, r0, r3
 8009e16:	6963      	ldr	r3, [r4, #20]
 8009e18:	b2f6      	uxtb	r6, r6
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	dc04      	bgt.n	8009e2a <__swbuf_r+0x42>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f956 	bl	800a0d4 <_fflush_r>
 8009e28:	bb28      	cbnz	r0, 8009e76 <__swbuf_r+0x8e>
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	701e      	strb	r6, [r3, #0]
 8009e38:	6963      	ldr	r3, [r4, #20]
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	4283      	cmp	r3, r0
 8009e3e:	d004      	beq.n	8009e4a <__swbuf_r+0x62>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	07db      	lsls	r3, r3, #31
 8009e44:	d519      	bpl.n	8009e7a <__swbuf_r+0x92>
 8009e46:	2e0a      	cmp	r6, #10
 8009e48:	d117      	bne.n	8009e7a <__swbuf_r+0x92>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 f941 	bl	800a0d4 <_fflush_r>
 8009e52:	b190      	cbz	r0, 8009e7a <__swbuf_r+0x92>
 8009e54:	e00f      	b.n	8009e76 <__swbuf_r+0x8e>
 8009e56:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <__swbuf_r+0x9c>)
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	d101      	bne.n	8009e60 <__swbuf_r+0x78>
 8009e5c:	68ac      	ldr	r4, [r5, #8]
 8009e5e:	e7d0      	b.n	8009e02 <__swbuf_r+0x1a>
 8009e60:	4b09      	ldr	r3, [pc, #36]	; (8009e88 <__swbuf_r+0xa0>)
 8009e62:	429c      	cmp	r4, r3
 8009e64:	bf08      	it	eq
 8009e66:	68ec      	ldreq	r4, [r5, #12]
 8009e68:	e7cb      	b.n	8009e02 <__swbuf_r+0x1a>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f000 f82d 	bl	8009ecc <__swsetup_r>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0cc      	beq.n	8009e10 <__swbuf_r+0x28>
 8009e76:	f04f 37ff 	mov.w	r7, #4294967295
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800a480 	.word	0x0800a480
 8009e84:	0800a4a0 	.word	0x0800a4a0
 8009e88:	0800a460 	.word	0x0800a460

08009e8c <__ascii_wctomb>:
 8009e8c:	b149      	cbz	r1, 8009ea2 <__ascii_wctomb+0x16>
 8009e8e:	2aff      	cmp	r2, #255	; 0xff
 8009e90:	bf85      	ittet	hi
 8009e92:	238a      	movhi	r3, #138	; 0x8a
 8009e94:	6003      	strhi	r3, [r0, #0]
 8009e96:	700a      	strbls	r2, [r1, #0]
 8009e98:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e9c:	bf98      	it	ls
 8009e9e:	2001      	movls	r0, #1
 8009ea0:	4770      	bx	lr
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4770      	bx	lr
	...

08009ea8 <_write_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4c07      	ldr	r4, [pc, #28]	; (8009ec8 <_write_r+0x20>)
 8009eac:	4605      	mov	r5, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f8 fbad 	bl	8002616 <_write>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_write_r+0x1e>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_write_r+0x1e>
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20001704 	.word	0x20001704

08009ecc <__swsetup_r>:
 8009ecc:	4b32      	ldr	r3, [pc, #200]	; (8009f98 <__swsetup_r+0xcc>)
 8009ece:	b570      	push	{r4, r5, r6, lr}
 8009ed0:	681d      	ldr	r5, [r3, #0]
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	b125      	cbz	r5, 8009ee2 <__swsetup_r+0x16>
 8009ed8:	69ab      	ldr	r3, [r5, #24]
 8009eda:	b913      	cbnz	r3, 8009ee2 <__swsetup_r+0x16>
 8009edc:	4628      	mov	r0, r5
 8009ede:	f7fe fbf7 	bl	80086d0 <__sinit>
 8009ee2:	4b2e      	ldr	r3, [pc, #184]	; (8009f9c <__swsetup_r+0xd0>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	d10f      	bne.n	8009f08 <__swsetup_r+0x3c>
 8009ee8:	686c      	ldr	r4, [r5, #4]
 8009eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	0715      	lsls	r5, r2, #28
 8009ef2:	d42c      	bmi.n	8009f4e <__swsetup_r+0x82>
 8009ef4:	06d0      	lsls	r0, r2, #27
 8009ef6:	d411      	bmi.n	8009f1c <__swsetup_r+0x50>
 8009ef8:	2209      	movs	r2, #9
 8009efa:	6032      	str	r2, [r6, #0]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295
 8009f06:	e03e      	b.n	8009f86 <__swsetup_r+0xba>
 8009f08:	4b25      	ldr	r3, [pc, #148]	; (8009fa0 <__swsetup_r+0xd4>)
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d101      	bne.n	8009f12 <__swsetup_r+0x46>
 8009f0e:	68ac      	ldr	r4, [r5, #8]
 8009f10:	e7eb      	b.n	8009eea <__swsetup_r+0x1e>
 8009f12:	4b24      	ldr	r3, [pc, #144]	; (8009fa4 <__swsetup_r+0xd8>)
 8009f14:	429c      	cmp	r4, r3
 8009f16:	bf08      	it	eq
 8009f18:	68ec      	ldreq	r4, [r5, #12]
 8009f1a:	e7e6      	b.n	8009eea <__swsetup_r+0x1e>
 8009f1c:	0751      	lsls	r1, r2, #29
 8009f1e:	d512      	bpl.n	8009f46 <__swsetup_r+0x7a>
 8009f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f22:	b141      	cbz	r1, 8009f36 <__swsetup_r+0x6a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__swsetup_r+0x66>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff fbbb 	bl	80096a8 <_free_r>
 8009f32:	2300      	movs	r3, #0
 8009f34:	6363      	str	r3, [r4, #52]	; 0x34
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b94b      	cbnz	r3, 8009f66 <__swsetup_r+0x9a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f5c:	d003      	beq.n	8009f66 <__swsetup_r+0x9a>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 f917 	bl	800a194 <__smakebuf_r>
 8009f66:	89a2      	ldrh	r2, [r4, #12]
 8009f68:	f012 0301 	ands.w	r3, r2, #1
 8009f6c:	d00c      	beq.n	8009f88 <__swsetup_r+0xbc>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60a3      	str	r3, [r4, #8]
 8009f72:	6963      	ldr	r3, [r4, #20]
 8009f74:	425b      	negs	r3, r3
 8009f76:	61a3      	str	r3, [r4, #24]
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	b953      	cbnz	r3, 8009f92 <__swsetup_r+0xc6>
 8009f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009f84:	d1ba      	bne.n	8009efc <__swsetup_r+0x30>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	0792      	lsls	r2, r2, #30
 8009f8a:	bf58      	it	pl
 8009f8c:	6963      	ldrpl	r3, [r4, #20]
 8009f8e:	60a3      	str	r3, [r4, #8]
 8009f90:	e7f2      	b.n	8009f78 <__swsetup_r+0xac>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7f7      	b.n	8009f86 <__swsetup_r+0xba>
 8009f96:	bf00      	nop
 8009f98:	20000010 	.word	0x20000010
 8009f9c:	0800a480 	.word	0x0800a480
 8009fa0:	0800a4a0 	.word	0x0800a4a0
 8009fa4:	0800a460 	.word	0x0800a460

08009fa8 <_close_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4c06      	ldr	r4, [pc, #24]	; (8009fc4 <_close_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4605      	mov	r5, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	6023      	str	r3, [r4, #0]
 8009fb4:	f7f8 fb4b 	bl	800264e <_close>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_close_r+0x1a>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_close_r+0x1a>
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20001704 	.word	0x20001704

08009fc8 <__sflush_r>:
 8009fc8:	898a      	ldrh	r2, [r1, #12]
 8009fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fce:	4605      	mov	r5, r0
 8009fd0:	0710      	lsls	r0, r2, #28
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	d458      	bmi.n	800a088 <__sflush_r+0xc0>
 8009fd6:	684b      	ldr	r3, [r1, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	dc05      	bgt.n	8009fe8 <__sflush_r+0x20>
 8009fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dc02      	bgt.n	8009fe8 <__sflush_r+0x20>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	d0f9      	beq.n	8009fe2 <__sflush_r+0x1a>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ff4:	682f      	ldr	r7, [r5, #0]
 8009ff6:	6a21      	ldr	r1, [r4, #32]
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	d032      	beq.n	800a062 <__sflush_r+0x9a>
 8009ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	075a      	lsls	r2, r3, #29
 800a002:	d505      	bpl.n	800a010 <__sflush_r+0x48>
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	1ac0      	subs	r0, r0, r3
 800a008:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a00a:	b10b      	cbz	r3, 800a010 <__sflush_r+0x48>
 800a00c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a00e:	1ac0      	subs	r0, r0, r3
 800a010:	2300      	movs	r3, #0
 800a012:	4602      	mov	r2, r0
 800a014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a016:	6a21      	ldr	r1, [r4, #32]
 800a018:	4628      	mov	r0, r5
 800a01a:	47b0      	blx	r6
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	d106      	bne.n	800a030 <__sflush_r+0x68>
 800a022:	6829      	ldr	r1, [r5, #0]
 800a024:	291d      	cmp	r1, #29
 800a026:	d848      	bhi.n	800a0ba <__sflush_r+0xf2>
 800a028:	4a29      	ldr	r2, [pc, #164]	; (800a0d0 <__sflush_r+0x108>)
 800a02a:	40ca      	lsrs	r2, r1
 800a02c:	07d6      	lsls	r6, r2, #31
 800a02e:	d544      	bpl.n	800a0ba <__sflush_r+0xf2>
 800a030:	2200      	movs	r2, #0
 800a032:	6062      	str	r2, [r4, #4]
 800a034:	04d9      	lsls	r1, r3, #19
 800a036:	6922      	ldr	r2, [r4, #16]
 800a038:	6022      	str	r2, [r4, #0]
 800a03a:	d504      	bpl.n	800a046 <__sflush_r+0x7e>
 800a03c:	1c42      	adds	r2, r0, #1
 800a03e:	d101      	bne.n	800a044 <__sflush_r+0x7c>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b903      	cbnz	r3, 800a046 <__sflush_r+0x7e>
 800a044:	6560      	str	r0, [r4, #84]	; 0x54
 800a046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a048:	602f      	str	r7, [r5, #0]
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d0c9      	beq.n	8009fe2 <__sflush_r+0x1a>
 800a04e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a052:	4299      	cmp	r1, r3
 800a054:	d002      	beq.n	800a05c <__sflush_r+0x94>
 800a056:	4628      	mov	r0, r5
 800a058:	f7ff fb26 	bl	80096a8 <_free_r>
 800a05c:	2000      	movs	r0, #0
 800a05e:	6360      	str	r0, [r4, #52]	; 0x34
 800a060:	e7c0      	b.n	8009fe4 <__sflush_r+0x1c>
 800a062:	2301      	movs	r3, #1
 800a064:	4628      	mov	r0, r5
 800a066:	47b0      	blx	r6
 800a068:	1c41      	adds	r1, r0, #1
 800a06a:	d1c8      	bne.n	8009ffe <__sflush_r+0x36>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0c5      	beq.n	8009ffe <__sflush_r+0x36>
 800a072:	2b1d      	cmp	r3, #29
 800a074:	d001      	beq.n	800a07a <__sflush_r+0xb2>
 800a076:	2b16      	cmp	r3, #22
 800a078:	d101      	bne.n	800a07e <__sflush_r+0xb6>
 800a07a:	602f      	str	r7, [r5, #0]
 800a07c:	e7b1      	b.n	8009fe2 <__sflush_r+0x1a>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	e7ad      	b.n	8009fe4 <__sflush_r+0x1c>
 800a088:	690f      	ldr	r7, [r1, #16]
 800a08a:	2f00      	cmp	r7, #0
 800a08c:	d0a9      	beq.n	8009fe2 <__sflush_r+0x1a>
 800a08e:	0793      	lsls	r3, r2, #30
 800a090:	680e      	ldr	r6, [r1, #0]
 800a092:	bf08      	it	eq
 800a094:	694b      	ldreq	r3, [r1, #20]
 800a096:	600f      	str	r7, [r1, #0]
 800a098:	bf18      	it	ne
 800a09a:	2300      	movne	r3, #0
 800a09c:	eba6 0807 	sub.w	r8, r6, r7
 800a0a0:	608b      	str	r3, [r1, #8]
 800a0a2:	f1b8 0f00 	cmp.w	r8, #0
 800a0a6:	dd9c      	ble.n	8009fe2 <__sflush_r+0x1a>
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	463a      	mov	r2, r7
 800a0ac:	6a21      	ldr	r1, [r4, #32]
 800a0ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b0      	blx	r6
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	dc06      	bgt.n	800a0c6 <__sflush_r+0xfe>
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	e78e      	b.n	8009fe4 <__sflush_r+0x1c>
 800a0c6:	4407      	add	r7, r0
 800a0c8:	eba8 0800 	sub.w	r8, r8, r0
 800a0cc:	e7e9      	b.n	800a0a2 <__sflush_r+0xda>
 800a0ce:	bf00      	nop
 800a0d0:	20400001 	.word	0x20400001

0800a0d4 <_fflush_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	690b      	ldr	r3, [r1, #16]
 800a0d8:	4605      	mov	r5, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	b1db      	cbz	r3, 800a116 <_fflush_r+0x42>
 800a0de:	b118      	cbz	r0, 800a0e8 <_fflush_r+0x14>
 800a0e0:	6983      	ldr	r3, [r0, #24]
 800a0e2:	b90b      	cbnz	r3, 800a0e8 <_fflush_r+0x14>
 800a0e4:	f7fe faf4 	bl	80086d0 <__sinit>
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <_fflush_r+0x48>)
 800a0ea:	429c      	cmp	r4, r3
 800a0ec:	d109      	bne.n	800a102 <_fflush_r+0x2e>
 800a0ee:	686c      	ldr	r4, [r5, #4]
 800a0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f4:	b17b      	cbz	r3, 800a116 <_fflush_r+0x42>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f7ff bf63 	b.w	8009fc8 <__sflush_r>
 800a102:	4b07      	ldr	r3, [pc, #28]	; (800a120 <_fflush_r+0x4c>)
 800a104:	429c      	cmp	r4, r3
 800a106:	d101      	bne.n	800a10c <_fflush_r+0x38>
 800a108:	68ac      	ldr	r4, [r5, #8]
 800a10a:	e7f1      	b.n	800a0f0 <_fflush_r+0x1c>
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <_fflush_r+0x50>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	bf08      	it	eq
 800a112:	68ec      	ldreq	r4, [r5, #12]
 800a114:	e7ec      	b.n	800a0f0 <_fflush_r+0x1c>
 800a116:	2000      	movs	r0, #0
 800a118:	bd38      	pop	{r3, r4, r5, pc}
 800a11a:	bf00      	nop
 800a11c:	0800a480 	.word	0x0800a480
 800a120:	0800a4a0 	.word	0x0800a4a0
 800a124:	0800a460 	.word	0x0800a460

0800a128 <_lseek_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4c07      	ldr	r4, [pc, #28]	; (800a148 <_lseek_r+0x20>)
 800a12c:	4605      	mov	r5, r0
 800a12e:	4608      	mov	r0, r1
 800a130:	4611      	mov	r1, r2
 800a132:	2200      	movs	r2, #0
 800a134:	6022      	str	r2, [r4, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	f7f8 fab0 	bl	800269c <_lseek>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d102      	bne.n	800a146 <_lseek_r+0x1e>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	b103      	cbz	r3, 800a146 <_lseek_r+0x1e>
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	20001704 	.word	0x20001704

0800a14c <__swhatbuf_r>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	460e      	mov	r6, r1
 800a150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a154:	2900      	cmp	r1, #0
 800a156:	b096      	sub	sp, #88	; 0x58
 800a158:	4614      	mov	r4, r2
 800a15a:	461d      	mov	r5, r3
 800a15c:	da07      	bge.n	800a16e <__swhatbuf_r+0x22>
 800a15e:	2300      	movs	r3, #0
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	89b3      	ldrh	r3, [r6, #12]
 800a164:	061a      	lsls	r2, r3, #24
 800a166:	d410      	bmi.n	800a18a <__swhatbuf_r+0x3e>
 800a168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a16c:	e00e      	b.n	800a18c <__swhatbuf_r+0x40>
 800a16e:	466a      	mov	r2, sp
 800a170:	f000 f8a4 	bl	800a2bc <_fstat_r>
 800a174:	2800      	cmp	r0, #0
 800a176:	dbf2      	blt.n	800a15e <__swhatbuf_r+0x12>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a17e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a182:	425a      	negs	r2, r3
 800a184:	415a      	adcs	r2, r3
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	e7ee      	b.n	800a168 <__swhatbuf_r+0x1c>
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	2000      	movs	r0, #0
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	b016      	add	sp, #88	; 0x58
 800a192:	bd70      	pop	{r4, r5, r6, pc}

0800a194 <__smakebuf_r>:
 800a194:	898b      	ldrh	r3, [r1, #12]
 800a196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a198:	079d      	lsls	r5, r3, #30
 800a19a:	4606      	mov	r6, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	d507      	bpl.n	800a1b0 <__smakebuf_r+0x1c>
 800a1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	6163      	str	r3, [r4, #20]
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	ab01      	add	r3, sp, #4
 800a1b2:	466a      	mov	r2, sp
 800a1b4:	f7ff ffca 	bl	800a14c <__swhatbuf_r>
 800a1b8:	9900      	ldr	r1, [sp, #0]
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff fac1 	bl	8009744 <_malloc_r>
 800a1c2:	b948      	cbnz	r0, 800a1d8 <__smakebuf_r+0x44>
 800a1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d4ef      	bmi.n	800a1ac <__smakebuf_r+0x18>
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	f043 0302 	orr.w	r3, r3, #2
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7e3      	b.n	800a1a0 <__smakebuf_r+0xc>
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <__smakebuf_r+0x7c>)
 800a1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	6020      	str	r0, [r4, #0]
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	9b00      	ldr	r3, [sp, #0]
 800a1e8:	6163      	str	r3, [r4, #20]
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	6120      	str	r0, [r4, #16]
 800a1ee:	b15b      	cbz	r3, 800a208 <__smakebuf_r+0x74>
 800a1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 f873 	bl	800a2e0 <_isatty_r>
 800a1fa:	b128      	cbz	r0, 800a208 <__smakebuf_r+0x74>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f023 0303 	bic.w	r3, r3, #3
 800a202:	f043 0301 	orr.w	r3, r3, #1
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	431d      	orrs	r5, r3
 800a20c:	81a5      	strh	r5, [r4, #12]
 800a20e:	e7cd      	b.n	800a1ac <__smakebuf_r+0x18>
 800a210:	08008699 	.word	0x08008699

0800a214 <memmove>:
 800a214:	4288      	cmp	r0, r1
 800a216:	b510      	push	{r4, lr}
 800a218:	eb01 0302 	add.w	r3, r1, r2
 800a21c:	d807      	bhi.n	800a22e <memmove+0x1a>
 800a21e:	1e42      	subs	r2, r0, #1
 800a220:	4299      	cmp	r1, r3
 800a222:	d00a      	beq.n	800a23a <memmove+0x26>
 800a224:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a228:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a22c:	e7f8      	b.n	800a220 <memmove+0xc>
 800a22e:	4283      	cmp	r3, r0
 800a230:	d9f5      	bls.n	800a21e <memmove+0xa>
 800a232:	1881      	adds	r1, r0, r2
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	42d3      	cmn	r3, r2
 800a238:	d100      	bne.n	800a23c <memmove+0x28>
 800a23a:	bd10      	pop	{r4, pc}
 800a23c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a240:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a244:	e7f7      	b.n	800a236 <memmove+0x22>

0800a246 <__malloc_lock>:
 800a246:	4770      	bx	lr

0800a248 <__malloc_unlock>:
 800a248:	4770      	bx	lr

0800a24a <_realloc_r>:
 800a24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24c:	4607      	mov	r7, r0
 800a24e:	4614      	mov	r4, r2
 800a250:	460e      	mov	r6, r1
 800a252:	b921      	cbnz	r1, 800a25e <_realloc_r+0x14>
 800a254:	4611      	mov	r1, r2
 800a256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a25a:	f7ff ba73 	b.w	8009744 <_malloc_r>
 800a25e:	b922      	cbnz	r2, 800a26a <_realloc_r+0x20>
 800a260:	f7ff fa22 	bl	80096a8 <_free_r>
 800a264:	4625      	mov	r5, r4
 800a266:	4628      	mov	r0, r5
 800a268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a26a:	f000 f849 	bl	800a300 <_malloc_usable_size_r>
 800a26e:	42a0      	cmp	r0, r4
 800a270:	d20f      	bcs.n	800a292 <_realloc_r+0x48>
 800a272:	4621      	mov	r1, r4
 800a274:	4638      	mov	r0, r7
 800a276:	f7ff fa65 	bl	8009744 <_malloc_r>
 800a27a:	4605      	mov	r5, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d0f2      	beq.n	800a266 <_realloc_r+0x1c>
 800a280:	4631      	mov	r1, r6
 800a282:	4622      	mov	r2, r4
 800a284:	f7fb fe1e 	bl	8005ec4 <memcpy>
 800a288:	4631      	mov	r1, r6
 800a28a:	4638      	mov	r0, r7
 800a28c:	f7ff fa0c 	bl	80096a8 <_free_r>
 800a290:	e7e9      	b.n	800a266 <_realloc_r+0x1c>
 800a292:	4635      	mov	r5, r6
 800a294:	e7e7      	b.n	800a266 <_realloc_r+0x1c>
	...

0800a298 <_read_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4c07      	ldr	r4, [pc, #28]	; (800a2b8 <_read_r+0x20>)
 800a29c:	4605      	mov	r5, r0
 800a29e:	4608      	mov	r0, r1
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f7f8 f998 	bl	80025dc <_read>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_read_r+0x1e>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_read_r+0x1e>
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	20001704 	.word	0x20001704

0800a2bc <_fstat_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4c07      	ldr	r4, [pc, #28]	; (800a2dc <_fstat_r+0x20>)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	f7f8 f9cc 	bl	8002666 <_fstat>
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d102      	bne.n	800a2d8 <_fstat_r+0x1c>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	b103      	cbz	r3, 800a2d8 <_fstat_r+0x1c>
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	bd38      	pop	{r3, r4, r5, pc}
 800a2da:	bf00      	nop
 800a2dc:	20001704 	.word	0x20001704

0800a2e0 <_isatty_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4c06      	ldr	r4, [pc, #24]	; (800a2fc <_isatty_r+0x1c>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	f7f8 f9cb 	bl	8002686 <_isatty>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_isatty_r+0x1a>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_isatty_r+0x1a>
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	20001704 	.word	0x20001704

0800a300 <_malloc_usable_size_r>:
 800a300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a304:	1f18      	subs	r0, r3, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	bfbc      	itt	lt
 800a30a:	580b      	ldrlt	r3, [r1, r0]
 800a30c:	18c0      	addlt	r0, r0, r3
 800a30e:	4770      	bx	lr

0800a310 <_init>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	bf00      	nop
 800a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a316:	bc08      	pop	{r3}
 800a318:	469e      	mov	lr, r3
 800a31a:	4770      	bx	lr

0800a31c <_fini>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	bf00      	nop
 800a320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a322:	bc08      	pop	{r3}
 800a324:	469e      	mov	lr, r3
 800a326:	4770      	bx	lr
